<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="3798"><g><title>[[stack]] (4 samples, 0.11%)</title><rect x="0.0000%" y="853" width="0.1053%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 0.11%)</title><rect x="0.0000%" y="837" width="0.1053%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.0790%" y="821" width="0.0263%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3290%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.0790%" y="805" width="0.0263%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3290%" y="815.50"></text></g><g><title>[anon] (2 samples, 0.05%)</title><rect x="0.1053%" y="853" width="0.0527%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="2"/><text x="0.3553%" y="863.50"></text></g><g><title>&lt;rodio::decoder::Decoder&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="0.1053%" y="837" width="0.0527%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="0.3553%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.11%)</title><rect x="0.1580%" y="853" width="0.1053%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="4"/><text x="0.4080%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.08%)</title><rect x="0.1843%" y="837" width="0.0790%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="3"/><text x="0.4343%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2370%" y="821" width="0.0263%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.4870%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2370%" y="805" width="0.0263%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="1"/><text x="0.4870%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2370%" y="789" width="0.0263%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.4870%" y="799.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.2902%" y="821" width="0.0263%" height="15" fill="rgb(240,193,28)" fg:x="49" fg:w="1"/><text x="1.5402%" y="831.50"></text></g><g><title>[unknown] (4 samples, 0.11%)</title><rect x="1.3165%" y="821" width="0.1053%" height="15" fill="rgb(216,20,37)" fg:x="50" fg:w="4"/><text x="1.5665%" y="831.50"></text></g><g><title>__ctype_init (13 samples, 0.34%)</title><rect x="1.4218%" y="821" width="0.3423%" height="15" fill="rgb(206,188,39)" fg:x="54" fg:w="13"/><text x="1.6718%" y="831.50"></text></g><g><title>__sigsetjmp (3 samples, 0.08%)</title><rect x="1.7641%" y="821" width="0.0790%" height="15" fill="rgb(217,207,13)" fg:x="67" fg:w="3"/><text x="2.0141%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="1.8431%" y="805" width="0.0263%" height="15" fill="rgb(231,73,38)" fg:x="70" fg:w="1"/><text x="2.0931%" y="815.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="1.8431%" y="789" width="0.0263%" height="15" fill="rgb(225,20,46)" fg:x="70" fg:w="1"/><text x="2.0931%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.03%)</title><rect x="1.8431%" y="773" width="0.0263%" height="15" fill="rgb(210,31,41)" fg:x="70" fg:w="1"/><text x="2.0931%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.03%)</title><rect x="1.8431%" y="757" width="0.0263%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="1"/><text x="2.0931%" y="767.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.03%)</title><rect x="1.8431%" y="741" width="0.0263%" height="15" fill="rgb(226,26,5)" fg:x="70" fg:w="1"/><text x="2.0931%" y="751.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.03%)</title><rect x="1.8431%" y="725" width="0.0263%" height="15" fill="rgb(249,33,26)" fg:x="70" fg:w="1"/><text x="2.0931%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.8431%" y="709" width="0.0263%" height="15" fill="rgb(235,183,28)" fg:x="70" fg:w="1"/><text x="2.0931%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.03%)</title><rect x="1.8694%" y="773" width="0.0263%" height="15" fill="rgb(221,5,38)" fg:x="71" fg:w="1"/><text x="2.1194%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="1.8694%" y="757" width="0.0263%" height="15" fill="rgb(247,18,42)" fg:x="71" fg:w="1"/><text x="2.1194%" y="767.50"></text></g><g><title>__mmap (1 samples, 0.03%)</title><rect x="1.8957%" y="741" width="0.0263%" height="15" fill="rgb(241,131,45)" fg:x="72" fg:w="1"/><text x="2.1457%" y="751.50"></text></g><g><title>__mprotect (1 samples, 0.03%)</title><rect x="1.9221%" y="741" width="0.0263%" height="15" fill="rgb(249,31,29)" fg:x="73" fg:w="1"/><text x="2.1721%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="1.9221%" y="725" width="0.0263%" height="15" fill="rgb(225,111,53)" fg:x="73" fg:w="1"/><text x="2.1721%" y="735.50"></text></g><g><title>[libc.so.6] (65 samples, 1.71%)</title><rect x="0.2633%" y="853" width="1.7114%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="65"/><text x="0.5133%" y="863.50"></text></g><g><title>[libc.so.6] (64 samples, 1.69%)</title><rect x="0.2896%" y="837" width="1.6851%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="64"/><text x="0.5396%" y="847.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5 samples, 0.13%)</title><rect x="1.8431%" y="821" width="0.1316%" height="15" fill="rgb(232,36,49)" fg:x="70" fg:w="5"/><text x="2.0931%" y="831.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 0.11%)</title><rect x="1.8694%" y="805" width="0.1053%" height="15" fill="rgb(209,103,24)" fg:x="71" fg:w="4"/><text x="2.1194%" y="815.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 0.11%)</title><rect x="1.8694%" y="789" width="0.1053%" height="15" fill="rgb(229,88,8)" fg:x="71" fg:w="4"/><text x="2.1194%" y="799.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 0.08%)</title><rect x="1.8957%" y="773" width="0.0790%" height="15" fill="rgb(213,181,19)" fg:x="72" fg:w="3"/><text x="2.1457%" y="783.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 0.08%)</title><rect x="1.8957%" y="757" width="0.0790%" height="15" fill="rgb(254,191,54)" fg:x="72" fg:w="3"/><text x="2.1457%" y="767.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.03%)</title><rect x="1.9484%" y="741" width="0.0263%" height="15" fill="rgb(241,83,37)" fg:x="74" fg:w="1"/><text x="2.1984%" y="751.50"></text></g><g><title>__sysconf (1 samples, 0.03%)</title><rect x="1.9484%" y="725" width="0.0263%" height="15" fill="rgb(233,36,39)" fg:x="74" fg:w="1"/><text x="2.1984%" y="735.50"></text></g><g><title>__getpagesize (1 samples, 0.03%)</title><rect x="1.9484%" y="709" width="0.0263%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="2.1984%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.05%)</title><rect x="2.7646%" y="837" width="0.0527%" height="15" fill="rgb(245,192,40)" fg:x="105" fg:w="2"/><text x="3.0146%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.05%)</title><rect x="2.7646%" y="821" width="0.0527%" height="15" fill="rgb(238,167,29)" fg:x="105" fg:w="2"/><text x="3.0146%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.05%)</title><rect x="2.7646%" y="805" width="0.0527%" height="15" fill="rgb(232,182,51)" fg:x="105" fg:w="2"/><text x="3.0146%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.05%)</title><rect x="2.7646%" y="789" width="0.0527%" height="15" fill="rgb(231,60,39)" fg:x="105" fg:w="2"/><text x="3.0146%" y="799.50"></text></g><g><title>&lt;rodio::decoder::Decoder&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="2.8173%" y="837" width="0.0790%" height="15" fill="rgb(208,69,12)" fg:x="107" fg:w="3"/><text x="3.0673%" y="847.50"></text></g><g><title>L3_dct3_9 (1 samples, 0.03%)</title><rect x="2.8963%" y="837" width="0.0263%" height="15" fill="rgb(235,93,37)" fg:x="110" fg:w="1"/><text x="3.1463%" y="847.50"></text></g><g><title>[[vdso]] (1 samples, 0.03%)</title><rect x="2.9226%" y="837" width="0.0263%" height="15" fill="rgb(213,116,39)" fg:x="111" fg:w="1"/><text x="3.1726%" y="847.50"></text></g><g><title>syscall (1 samples, 0.03%)</title><rect x="2.9226%" y="821" width="0.0263%" height="15" fill="rgb(222,207,29)" fg:x="111" fg:w="1"/><text x="3.1726%" y="831.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="2.9489%" y="837" width="0.0790%" height="15" fill="rgb(206,96,30)" fg:x="112" fg:w="3"/><text x="3.1989%" y="847.50"></text></g><g><title>__sysconf (1 samples, 0.03%)</title><rect x="3.0279%" y="837" width="0.0263%" height="15" fill="rgb(218,138,4)" fg:x="115" fg:w="1"/><text x="3.2779%" y="847.50"></text></g><g><title>_mm_mul_ps (2 samples, 0.05%)</title><rect x="3.0542%" y="789" width="0.0527%" height="15" fill="rgb(250,191,14)" fg:x="116" fg:w="2"/><text x="3.3042%" y="799.50"></text></g><g><title>L3_antialias (3 samples, 0.08%)</title><rect x="3.0542%" y="805" width="0.0790%" height="15" fill="rgb(239,60,40)" fg:x="116" fg:w="3"/><text x="3.3042%" y="815.50"></text></g><g><title>_mm_shuffle_ps (1 samples, 0.03%)</title><rect x="3.1069%" y="789" width="0.0263%" height="15" fill="rgb(206,27,48)" fg:x="118" fg:w="1"/><text x="3.3569%" y="799.50"></text></g><g><title>L3_change_sign (1 samples, 0.03%)</title><rect x="3.1332%" y="805" width="0.0263%" height="15" fill="rgb(225,35,8)" fg:x="119" fg:w="1"/><text x="3.3832%" y="815.50"></text></g><g><title>L3_ldexp_q2 (1 samples, 0.03%)</title><rect x="3.1596%" y="789" width="0.0263%" height="15" fill="rgb(250,213,24)" fg:x="120" fg:w="1"/><text x="3.4096%" y="799.50"></text></g><g><title>L3_decode_scalefactors (3 samples, 0.08%)</title><rect x="3.1596%" y="805" width="0.0790%" height="15" fill="rgb(247,123,22)" fg:x="120" fg:w="3"/><text x="3.4096%" y="815.50"></text></g><g><title>L3_read_scalefactors (2 samples, 0.05%)</title><rect x="3.1859%" y="789" width="0.0527%" height="15" fill="rgb(231,138,38)" fg:x="121" fg:w="2"/><text x="3.4359%" y="799.50"></text></g><g><title>get_bits (1 samples, 0.03%)</title><rect x="3.2122%" y="773" width="0.0263%" height="15" fill="rgb(231,145,46)" fg:x="122" fg:w="1"/><text x="3.4622%" y="783.50"></text></g><g><title>L3_huffman (46 samples, 1.21%)</title><rect x="3.2385%" y="805" width="1.2112%" height="15" fill="rgb(251,118,11)" fg:x="123" fg:w="46"/><text x="3.4885%" y="815.50"></text></g><g><title>L3_pow_43 (2 samples, 0.05%)</title><rect x="4.3971%" y="789" width="0.0527%" height="15" fill="rgb(217,147,25)" fg:x="167" fg:w="2"/><text x="4.6471%" y="799.50"></text></g><g><title>L3_dct3_9 (9 samples, 0.24%)</title><rect x="4.5550%" y="773" width="0.2370%" height="15" fill="rgb(247,81,37)" fg:x="173" fg:w="9"/><text x="4.8050%" y="783.50"></text></g><g><title>_mm_mul_ps (6 samples, 0.16%)</title><rect x="4.7920%" y="773" width="0.1580%" height="15" fill="rgb(209,12,38)" fg:x="182" fg:w="6"/><text x="5.0420%" y="783.50"></text></g><g><title>L3_decode (73 samples, 1.92%)</title><rect x="3.0542%" y="821" width="1.9221%" height="15" fill="rgb(227,1,9)" fg:x="116" fg:w="73"/><text x="3.3042%" y="831.50">L..</text></g><g><title>L3_imdct_gr (20 samples, 0.53%)</title><rect x="4.4497%" y="805" width="0.5266%" height="15" fill="rgb(248,47,43)" fg:x="169" fg:w="20"/><text x="4.6997%" y="815.50"></text></g><g><title>L3_imdct36 (20 samples, 0.53%)</title><rect x="4.4497%" y="789" width="0.5266%" height="15" fill="rgb(221,10,30)" fg:x="169" fg:w="20"/><text x="4.6997%" y="799.50"></text></g><g><title>_mm_sub_ps (1 samples, 0.03%)</title><rect x="4.9500%" y="773" width="0.0263%" height="15" fill="rgb(210,229,1)" fg:x="188" fg:w="1"/><text x="5.2000%" y="783.50"></text></g><g><title>_mm_add_ps (1 samples, 0.03%)</title><rect x="5.0026%" y="789" width="0.0263%" height="15" fill="rgb(222,148,37)" fg:x="190" fg:w="1"/><text x="5.2526%" y="799.50"></text></g><g><title>_mm_mul_ps (1 samples, 0.03%)</title><rect x="5.0290%" y="789" width="0.0263%" height="15" fill="rgb(234,67,33)" fg:x="191" fg:w="1"/><text x="5.2790%" y="799.50"></text></g><g><title>mp3d_DCT_II (4 samples, 0.11%)</title><rect x="4.9763%" y="805" width="0.1053%" height="15" fill="rgb(247,98,35)" fg:x="189" fg:w="4"/><text x="5.2263%" y="815.50"></text></g><g><title>_mm_sub_ps (1 samples, 0.03%)</title><rect x="5.0553%" y="789" width="0.0263%" height="15" fill="rgb(247,138,52)" fg:x="192" fg:w="1"/><text x="5.3053%" y="799.50"></text></g><g><title>_mm_add_ps (5 samples, 0.13%)</title><rect x="5.2396%" y="789" width="0.1316%" height="15" fill="rgb(213,79,30)" fg:x="199" fg:w="5"/><text x="5.4896%" y="799.50"></text></g><g><title>_mm_extract_epi16 (2 samples, 0.05%)</title><rect x="5.3712%" y="789" width="0.0527%" height="15" fill="rgb(246,177,23)" fg:x="204" fg:w="2"/><text x="5.6212%" y="799.50"></text></g><g><title>_mm_max_ps (2 samples, 0.05%)</title><rect x="5.4239%" y="789" width="0.0527%" height="15" fill="rgb(230,62,27)" fg:x="206" fg:w="2"/><text x="5.6739%" y="799.50"></text></g><g><title>_mm_min_ps (1 samples, 0.03%)</title><rect x="5.4766%" y="789" width="0.0263%" height="15" fill="rgb(216,154,8)" fg:x="208" fg:w="1"/><text x="5.7266%" y="799.50"></text></g><g><title>_mm_mul_ps (9 samples, 0.24%)</title><rect x="5.5029%" y="789" width="0.2370%" height="15" fill="rgb(244,35,45)" fg:x="209" fg:w="9"/><text x="5.7529%" y="799.50"></text></g><g><title>_mm_set1_ps (5 samples, 0.13%)</title><rect x="5.7399%" y="789" width="0.1316%" height="15" fill="rgb(251,115,12)" fg:x="218" fg:w="5"/><text x="5.9899%" y="799.50"></text></g><g><title>[unknown] (149 samples, 3.92%)</title><rect x="1.9747%" y="853" width="3.9231%" height="15" fill="rgb(240,54,50)" fg:x="75" fg:w="149"/><text x="2.2247%" y="863.50">[unk..</text></g><g><title>mp3dec_decode_frame (108 samples, 2.84%)</title><rect x="3.0542%" y="837" width="2.8436%" height="15" fill="rgb(233,84,52)" fg:x="116" fg:w="108"/><text x="3.3042%" y="847.50">mp..</text></g><g><title>mp3d_synth_granule (35 samples, 0.92%)</title><rect x="4.9763%" y="821" width="0.9215%" height="15" fill="rgb(207,117,47)" fg:x="189" fg:w="35"/><text x="5.2263%" y="831.50"></text></g><g><title>mp3d_synth (31 samples, 0.82%)</title><rect x="5.0816%" y="805" width="0.8162%" height="15" fill="rgb(249,43,39)" fg:x="193" fg:w="31"/><text x="5.3316%" y="815.50"></text></g><g><title>_mm_sub_ps (1 samples, 0.03%)</title><rect x="5.8715%" y="789" width="0.0263%" height="15" fill="rgb(209,38,44)" fg:x="223" fg:w="1"/><text x="6.1215%" y="799.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.03%)</title><rect x="5.9242%" y="453" width="0.0263%" height="15" fill="rgb(236,212,23)" fg:x="225" fg:w="1"/><text x="6.1742%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1 samples, 0.03%)</title><rect x="5.9242%" y="437" width="0.0263%" height="15" fill="rgb(242,79,21)" fg:x="225" fg:w="1"/><text x="6.1742%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (1 samples, 0.03%)</title><rect x="5.9242%" y="421" width="0.0263%" height="15" fill="rgb(211,96,35)" fg:x="225" fg:w="1"/><text x="6.1742%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.03%)</title><rect x="5.9242%" y="405" width="0.0263%" height="15" fill="rgb(253,215,40)" fg:x="225" fg:w="1"/><text x="6.1742%" y="415.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="5.9505%" y="453" width="0.0263%" height="15" fill="rgb(211,81,21)" fg:x="226" fg:w="1"/><text x="6.2005%" y="463.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="5.9505%" y="437" width="0.0263%" height="15" fill="rgb(208,190,38)" fg:x="226" fg:w="1"/><text x="6.2005%" y="447.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="5.9505%" y="421" width="0.0263%" height="15" fill="rgb(235,213,38)" fg:x="226" fg:w="1"/><text x="6.2005%" y="431.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="5.9505%" y="405" width="0.0263%" height="15" fill="rgb(237,122,38)" fg:x="226" fg:w="1"/><text x="6.2005%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.03%)</title><rect x="5.9505%" y="389" width="0.0263%" height="15" fill="rgb(244,218,35)" fg:x="226" fg:w="1"/><text x="6.2005%" y="399.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.03%)</title><rect x="5.9505%" y="373" width="0.0263%" height="15" fill="rgb(240,68,47)" fg:x="226" fg:w="1"/><text x="6.2005%" y="383.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.03%)</title><rect x="5.9505%" y="357" width="0.0263%" height="15" fill="rgb(210,16,53)" fg:x="226" fg:w="1"/><text x="6.2005%" y="367.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.03%)</title><rect x="5.9505%" y="341" width="0.0263%" height="15" fill="rgb(235,124,12)" fg:x="226" fg:w="1"/><text x="6.2005%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.03%)</title><rect x="5.9505%" y="325" width="0.0263%" height="15" fill="rgb(224,169,11)" fg:x="226" fg:w="1"/><text x="6.2005%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="5.9505%" y="309" width="0.0263%" height="15" fill="rgb(250,166,2)" fg:x="226" fg:w="1"/><text x="6.2005%" y="319.50"></text></g><g><title>tokio::runtime::builder::Builder::build (4 samples, 0.11%)</title><rect x="5.8978%" y="581" width="0.1053%" height="15" fill="rgb(242,216,29)" fg:x="224" fg:w="4"/><text x="6.1478%" y="591.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (4 samples, 0.11%)</title><rect x="5.8978%" y="565" width="0.1053%" height="15" fill="rgb(230,116,27)" fg:x="224" fg:w="4"/><text x="6.1478%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (4 samples, 0.11%)</title><rect x="5.8978%" y="549" width="0.1053%" height="15" fill="rgb(228,99,48)" fg:x="224" fg:w="4"/><text x="6.1478%" y="559.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (4 samples, 0.11%)</title><rect x="5.8978%" y="533" width="0.1053%" height="15" fill="rgb(253,11,6)" fg:x="224" fg:w="4"/><text x="6.1478%" y="543.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (4 samples, 0.11%)</title><rect x="5.8978%" y="517" width="0.1053%" height="15" fill="rgb(247,143,39)" fg:x="224" fg:w="4"/><text x="6.1478%" y="527.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (4 samples, 0.11%)</title><rect x="5.8978%" y="501" width="0.1053%" height="15" fill="rgb(236,97,10)" fg:x="224" fg:w="4"/><text x="6.1478%" y="511.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (4 samples, 0.11%)</title><rect x="5.8978%" y="485" width="0.1053%" height="15" fill="rgb(233,208,19)" fg:x="224" fg:w="4"/><text x="6.1478%" y="495.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 0.11%)</title><rect x="5.8978%" y="469" width="0.1053%" height="15" fill="rgb(216,164,2)" fg:x="224" fg:w="4"/><text x="6.1478%" y="479.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (1 samples, 0.03%)</title><rect x="5.9768%" y="453" width="0.0263%" height="15" fill="rgb(220,129,5)" fg:x="227" fg:w="1"/><text x="6.2268%" y="463.50"></text></g><g><title>std::thread::Builder::new (1 samples, 0.03%)</title><rect x="5.9768%" y="437" width="0.0263%" height="15" fill="rgb(242,17,10)" fg:x="227" fg:w="1"/><text x="6.2268%" y="447.50"></text></g><g><title>&lt;cpal::platform::platform_impl::Device as cpal::traits::DeviceTrait&gt;::default_output_config (1 samples, 0.03%)</title><rect x="6.0032%" y="453" width="0.0263%" height="15" fill="rgb(242,107,0)" fg:x="228" fg:w="1"/><text x="6.2532%" y="463.50"></text></g><g><title>&lt;cpal::host::alsa::Device as cpal::traits::DeviceTrait&gt;::default_output_config (1 samples, 0.03%)</title><rect x="6.0032%" y="437" width="0.0263%" height="15" fill="rgb(251,28,31)" fg:x="228" fg:w="1"/><text x="6.2532%" y="447.50"></text></g><g><title>cpal::host::alsa::Device::default_output_config (1 samples, 0.03%)</title><rect x="6.0032%" y="421" width="0.0263%" height="15" fill="rgb(233,223,10)" fg:x="228" fg:w="1"/><text x="6.2532%" y="431.50"></text></g><g><title>cpal::host::alsa::Device::default_config (1 samples, 0.03%)</title><rect x="6.0032%" y="405" width="0.0263%" height="15" fill="rgb(215,21,27)" fg:x="228" fg:w="1"/><text x="6.2532%" y="415.50"></text></g><g><title>cpal::host::alsa::Device::supported_configs (1 samples, 0.03%)</title><rect x="6.0032%" y="389" width="0.0263%" height="15" fill="rgb(232,23,21)" fg:x="228" fg:w="1"/><text x="6.2532%" y="399.50"></text></g><g><title>cpal::host::alsa::DeviceHandles::get_mut (1 samples, 0.03%)</title><rect x="6.0032%" y="373" width="0.0263%" height="15" fill="rgb(244,5,23)" fg:x="228" fg:w="1"/><text x="6.2532%" y="383.50"></text></g><g><title>cpal::host::alsa::DeviceHandles::try_open (1 samples, 0.03%)</title><rect x="6.0032%" y="357" width="0.0263%" height="15" fill="rgb(226,81,46)" fg:x="228" fg:w="1"/><text x="6.2532%" y="367.50"></text></g><g><title>alsa::pcm::PCM::new (1 samples, 0.03%)</title><rect x="6.0032%" y="341" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="228" fg:w="1"/><text x="6.2532%" y="351.50"></text></g><g><title>alsa::pcm::PCM::open (1 samples, 0.03%)</title><rect x="6.0032%" y="325" width="0.0263%" height="15" fill="rgb(212,68,19)" fg:x="228" fg:w="1"/><text x="6.2532%" y="335.50"></text></g><g><title>snd_pcm_open (1 samples, 0.03%)</title><rect x="6.0032%" y="309" width="0.0263%" height="15" fill="rgb(240,187,13)" fg:x="228" fg:w="1"/><text x="6.2532%" y="319.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="6.0032%" y="293" width="0.0263%" height="15" fill="rgb(223,113,26)" fg:x="228" fg:w="1"/><text x="6.2532%" y="303.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="6.0032%" y="277" width="0.0263%" height="15" fill="rgb(206,192,2)" fg:x="228" fg:w="1"/><text x="6.2532%" y="287.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="6.0032%" y="261" width="0.0263%" height="15" fill="rgb(241,108,4)" fg:x="228" fg:w="1"/><text x="6.2532%" y="271.50"></text></g><g><title>snd_dlopen (1 samples, 0.03%)</title><rect x="6.0032%" y="245" width="0.0263%" height="15" fill="rgb(247,173,49)" fg:x="228" fg:w="1"/><text x="6.2532%" y="255.50"></text></g><g><title>dlopen (1 samples, 0.03%)</title><rect x="6.0032%" y="229" width="0.0263%" height="15" fill="rgb(224,114,35)" fg:x="228" fg:w="1"/><text x="6.2532%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="6.0032%" y="213" width="0.0263%" height="15" fill="rgb(245,159,27)" fg:x="228" fg:w="1"/><text x="6.2532%" y="223.50"></text></g><g><title>_dl_catch_error (1 samples, 0.03%)</title><rect x="6.0032%" y="197" width="0.0263%" height="15" fill="rgb(245,172,44)" fg:x="228" fg:w="1"/><text x="6.2532%" y="207.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="6.0032%" y="181" width="0.0263%" height="15" fill="rgb(236,23,11)" fg:x="228" fg:w="1"/><text x="6.2532%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="6.0032%" y="165" width="0.0263%" height="15" fill="rgb(205,117,38)" fg:x="228" fg:w="1"/><text x="6.2532%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="149" width="0.0263%" height="15" fill="rgb(237,72,25)" fg:x="228" fg:w="1"/><text x="6.2532%" y="159.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="6.0032%" y="133" width="0.0263%" height="15" fill="rgb(244,70,9)" fg:x="228" fg:w="1"/><text x="6.2532%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="117" width="0.0263%" height="15" fill="rgb(217,125,39)" fg:x="228" fg:w="1"/><text x="6.2532%" y="127.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="6.0032%" y="101" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="228" fg:w="1"/><text x="6.2532%" y="111.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="85" width="0.0263%" height="15" fill="rgb(251,123,47)" fg:x="228" fg:w="1"/><text x="6.2532%" y="95.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="69" width="0.0263%" height="15" fill="rgb(221,13,13)" fg:x="228" fg:w="1"/><text x="6.2532%" y="79.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="53" width="0.0263%" height="15" fill="rgb(238,131,9)" fg:x="228" fg:w="1"/><text x="6.2532%" y="63.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="6.0032%" y="37" width="0.0263%" height="15" fill="rgb(211,50,8)" fg:x="228" fg:w="1"/><text x="6.2532%" y="47.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="6.0295%" y="261" width="0.0527%" height="15" fill="rgb(245,182,24)" fg:x="229" fg:w="2"/><text x="6.2795%" y="271.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="6.0295%" y="245" width="0.0527%" height="15" fill="rgb(242,14,37)" fg:x="229" fg:w="2"/><text x="6.2795%" y="255.50"></text></g><g><title>cli::utils::i16_array_to_f32 (6 samples, 0.16%)</title><rect x="6.0295%" y="421" width="0.1580%" height="15" fill="rgb(246,228,12)" fg:x="229" fg:w="6"/><text x="6.2795%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.16%)</title><rect x="6.0295%" y="405" width="0.1580%" height="15" fill="rgb(213,55,15)" fg:x="229" fg:w="6"/><text x="6.2795%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.16%)</title><rect x="6.0295%" y="389" width="0.1580%" height="15" fill="rgb(209,9,3)" fg:x="229" fg:w="6"/><text x="6.2795%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.16%)</title><rect x="6.0295%" y="373" width="0.1580%" height="15" fill="rgb(230,59,30)" fg:x="229" fg:w="6"/><text x="6.2795%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6 samples, 0.16%)</title><rect x="6.0295%" y="357" width="0.1580%" height="15" fill="rgb(209,121,21)" fg:x="229" fg:w="6"/><text x="6.2795%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.16%)</title><rect x="6.0295%" y="341" width="0.1580%" height="15" fill="rgb(220,109,13)" fg:x="229" fg:w="6"/><text x="6.2795%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 0.16%)</title><rect x="6.0295%" y="325" width="0.1580%" height="15" fill="rgb(232,18,1)" fg:x="229" fg:w="6"/><text x="6.2795%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.16%)</title><rect x="6.0295%" y="309" width="0.1580%" height="15" fill="rgb(215,41,42)" fg:x="229" fg:w="6"/><text x="6.2795%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.16%)</title><rect x="6.0295%" y="293" width="0.1580%" height="15" fill="rgb(224,123,36)" fg:x="229" fg:w="6"/><text x="6.2795%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.16%)</title><rect x="6.0295%" y="277" width="0.1580%" height="15" fill="rgb(240,125,3)" fg:x="229" fg:w="6"/><text x="6.2795%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.11%)</title><rect x="6.0821%" y="261" width="0.1053%" height="15" fill="rgb(205,98,50)" fg:x="231" fg:w="4"/><text x="6.3321%" y="271.50"></text></g><g><title>cli::utils::i16_array_to_f32::{{closure}} (4 samples, 0.11%)</title><rect x="6.0821%" y="245" width="0.1053%" height="15" fill="rgb(205,185,37)" fg:x="231" fg:w="4"/><text x="6.3321%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.11%)</title><rect x="6.3454%" y="325" width="0.1053%" height="15" fill="rgb(238,207,15)" fg:x="241" fg:w="4"/><text x="6.5954%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.13%)</title><rect x="6.4508%" y="325" width="0.1316%" height="15" fill="rgb(213,199,42)" fg:x="245" fg:w="5"/><text x="6.7008%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (5 samples, 0.13%)</title><rect x="6.4508%" y="309" width="0.1316%" height="15" fill="rgb(235,201,11)" fg:x="245" fg:w="5"/><text x="6.7008%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (2 samples, 0.05%)</title><rect x="6.5298%" y="293" width="0.0527%" height="15" fill="rgb(207,46,11)" fg:x="248" fg:w="2"/><text x="6.7798%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.05%)</title><rect x="6.5298%" y="277" width="0.0527%" height="15" fill="rgb(241,35,35)" fg:x="248" fg:w="2"/><text x="6.7798%" y="287.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (2 samples, 0.05%)</title><rect x="6.5298%" y="261" width="0.0527%" height="15" fill="rgb(243,32,47)" fg:x="248" fg:w="2"/><text x="6.7798%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.05%)</title><rect x="6.5298%" y="245" width="0.0527%" height="15" fill="rgb(247,202,23)" fg:x="248" fg:w="2"/><text x="6.7798%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (2 samples, 0.05%)</title><rect x="6.5298%" y="229" width="0.0527%" height="15" fill="rgb(219,102,11)" fg:x="248" fg:w="2"/><text x="6.7798%" y="239.50"></text></g><g><title>&lt;rodio::decoder::Decoder&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.42%)</title><rect x="6.5824%" y="325" width="0.4213%" height="15" fill="rgb(243,110,44)" fg:x="250" fg:w="16"/><text x="6.8324%" y="335.50"></text></g><g><title>&lt;rodio::decoder::mp3::Mp3Decoder&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.18%)</title><rect x="6.8194%" y="309" width="0.1843%" height="15" fill="rgb(222,74,54)" fg:x="259" fg:w="7"/><text x="7.0694%" y="319.50"></text></g><g><title>minimp3::Decoder&lt;R&gt;::next_frame (2 samples, 0.05%)</title><rect x="6.9510%" y="293" width="0.0527%" height="15" fill="rgb(216,99,12)" fg:x="264" fg:w="2"/><text x="7.2010%" y="303.50"></text></g><g><title>minimp3::Decoder&lt;R&gt;::refill (2 samples, 0.05%)</title><rect x="6.9510%" y="277" width="0.0527%" height="15" fill="rgb(226,22,26)" fg:x="264" fg:w="2"/><text x="7.2010%" y="287.50"></text></g><g><title>&lt;slice_deque::SliceDeque&lt;T&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (2 samples, 0.05%)</title><rect x="6.9510%" y="261" width="0.0527%" height="15" fill="rgb(217,163,10)" fg:x="264" fg:w="2"/><text x="7.2010%" y="271.50"></text></g><g><title>&lt;slice_deque::SliceDeque&lt;T&gt; as slice_deque::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (2 samples, 0.05%)</title><rect x="6.9510%" y="245" width="0.0527%" height="15" fill="rgb(213,25,53)" fg:x="264" fg:w="2"/><text x="7.2010%" y="255.50"></text></g><g><title>&lt;slice_deque::SliceDeque&lt;T&gt; as slice_deque::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.05%)</title><rect x="6.9510%" y="229" width="0.0527%" height="15" fill="rgb(252,105,26)" fg:x="264" fg:w="2"/><text x="7.2010%" y="239.50"></text></g><g><title>slice_deque::SliceDeque&lt;T&gt;::extend_desugared (2 samples, 0.05%)</title><rect x="6.9510%" y="213" width="0.0527%" height="15" fill="rgb(220,39,43)" fg:x="264" fg:w="2"/><text x="7.2010%" y="223.50"></text></g><g><title>slice_deque::SliceDeque&lt;T&gt;::move_tail_unchecked (1 samples, 0.03%)</title><rect x="6.9774%" y="197" width="0.0263%" height="15" fill="rgb(229,68,48)" fg:x="265" fg:w="1"/><text x="7.2274%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (4 samples, 0.11%)</title><rect x="7.0037%" y="325" width="0.1053%" height="15" fill="rgb(252,8,32)" fg:x="266" fg:w="4"/><text x="7.2537%" y="335.50"></text></g><g><title>cli (274 samples, 7.21%)</title><rect x="0.0000%" y="869" width="7.2143%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="274"/><text x="0.2500%" y="879.50">cli</text></g><g><title>_start (50 samples, 1.32%)</title><rect x="5.8978%" y="853" width="1.3165%" height="15" fill="rgb(229,81,49)" fg:x="224" fg:w="50"/><text x="6.1478%" y="863.50"></text></g><g><title>__libc_start_main (50 samples, 1.32%)</title><rect x="5.8978%" y="837" width="1.3165%" height="15" fill="rgb(236,28,36)" fg:x="224" fg:w="50"/><text x="6.1478%" y="847.50"></text></g><g><title>[libc.so.6] (50 samples, 1.32%)</title><rect x="5.8978%" y="821" width="1.3165%" height="15" fill="rgb(249,185,26)" fg:x="224" fg:w="50"/><text x="6.1478%" y="831.50"></text></g><g><title>main (50 samples, 1.32%)</title><rect x="5.8978%" y="805" width="1.3165%" height="15" fill="rgb(249,174,33)" fg:x="224" fg:w="50"/><text x="6.1478%" y="815.50"></text></g><g><title>std::rt::lang_start_internal (50 samples, 1.32%)</title><rect x="5.8978%" y="789" width="1.3165%" height="15" fill="rgb(233,201,37)" fg:x="224" fg:w="50"/><text x="6.1478%" y="799.50"></text></g><g><title>std::panic::catch_unwind (50 samples, 1.32%)</title><rect x="5.8978%" y="773" width="1.3165%" height="15" fill="rgb(221,78,26)" fg:x="224" fg:w="50"/><text x="6.1478%" y="783.50"></text></g><g><title>std::panicking::try (50 samples, 1.32%)</title><rect x="5.8978%" y="757" width="1.3165%" height="15" fill="rgb(250,127,30)" fg:x="224" fg:w="50"/><text x="6.1478%" y="767.50"></text></g><g><title>std::panicking::try::do_call (50 samples, 1.32%)</title><rect x="5.8978%" y="741" width="1.3165%" height="15" fill="rgb(230,49,44)" fg:x="224" fg:w="50"/><text x="6.1478%" y="751.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (50 samples, 1.32%)</title><rect x="5.8978%" y="725" width="1.3165%" height="15" fill="rgb(229,67,23)" fg:x="224" fg:w="50"/><text x="6.1478%" y="735.50"></text></g><g><title>std::panic::catch_unwind (50 samples, 1.32%)</title><rect x="5.8978%" y="709" width="1.3165%" height="15" fill="rgb(249,83,47)" fg:x="224" fg:w="50"/><text x="6.1478%" y="719.50"></text></g><g><title>std::panicking::try (50 samples, 1.32%)</title><rect x="5.8978%" y="693" width="1.3165%" height="15" fill="rgb(215,43,3)" fg:x="224" fg:w="50"/><text x="6.1478%" y="703.50"></text></g><g><title>std::panicking::try::do_call (50 samples, 1.32%)</title><rect x="5.8978%" y="677" width="1.3165%" height="15" fill="rgb(238,154,13)" fg:x="224" fg:w="50"/><text x="6.1478%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (50 samples, 1.32%)</title><rect x="5.8978%" y="661" width="1.3165%" height="15" fill="rgb(219,56,2)" fg:x="224" fg:w="50"/><text x="6.1478%" y="671.50"></text></g><g><title>std::rt::lang_start::{{closure}} (50 samples, 1.32%)</title><rect x="5.8978%" y="645" width="1.3165%" height="15" fill="rgb(233,0,4)" fg:x="224" fg:w="50"/><text x="6.1478%" y="655.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (50 samples, 1.32%)</title><rect x="5.8978%" y="629" width="1.3165%" height="15" fill="rgb(235,30,7)" fg:x="224" fg:w="50"/><text x="6.1478%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (50 samples, 1.32%)</title><rect x="5.8978%" y="613" width="1.3165%" height="15" fill="rgb(250,79,13)" fg:x="224" fg:w="50"/><text x="6.1478%" y="623.50"></text></g><g><title>cli::main (50 samples, 1.32%)</title><rect x="5.8978%" y="597" width="1.3165%" height="15" fill="rgb(211,146,34)" fg:x="224" fg:w="50"/><text x="6.1478%" y="607.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (46 samples, 1.21%)</title><rect x="6.0032%" y="581" width="1.2112%" height="15" fill="rgb(228,22,38)" fg:x="228" fg:w="46"/><text x="6.2532%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (46 samples, 1.21%)</title><rect x="6.0032%" y="565" width="1.2112%" height="15" fill="rgb(235,168,5)" fg:x="228" fg:w="46"/><text x="6.2532%" y="575.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (46 samples, 1.21%)</title><rect x="6.0032%" y="549" width="1.2112%" height="15" fill="rgb(221,155,16)" fg:x="228" fg:w="46"/><text x="6.2532%" y="559.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (46 samples, 1.21%)</title><rect x="6.0032%" y="533" width="1.2112%" height="15" fill="rgb(215,215,53)" fg:x="228" fg:w="46"/><text x="6.2532%" y="543.50"></text></g><g><title>tokio::runtime::coop::budget (46 samples, 1.21%)</title><rect x="6.0032%" y="517" width="1.2112%" height="15" fill="rgb(223,4,10)" fg:x="228" fg:w="46"/><text x="6.2532%" y="527.50"></text></g><g><title>tokio::runtime::coop::with_budget (46 samples, 1.21%)</title><rect x="6.0032%" y="501" width="1.2112%" height="15" fill="rgb(234,103,6)" fg:x="228" fg:w="46"/><text x="6.2532%" y="511.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (46 samples, 1.21%)</title><rect x="6.0032%" y="485" width="1.2112%" height="15" fill="rgb(227,97,0)" fg:x="228" fg:w="46"/><text x="6.2532%" y="495.50"></text></g><g><title>cli::main::{{closure}} (46 samples, 1.21%)</title><rect x="6.0032%" y="469" width="1.2112%" height="15" fill="rgb(234,150,53)" fg:x="228" fg:w="46"/><text x="6.2532%" y="479.50"></text></g><g><title>cli::run::{{closure}} (45 samples, 1.18%)</title><rect x="6.0295%" y="453" width="1.1848%" height="15" fill="rgb(228,201,54)" fg:x="229" fg:w="45"/><text x="6.2795%" y="463.50"></text></g><g><title>cli::load_default_buffer (45 samples, 1.18%)</title><rect x="6.0295%" y="437" width="1.1848%" height="15" fill="rgb(222,22,37)" fg:x="229" fg:w="45"/><text x="6.2795%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (39 samples, 1.03%)</title><rect x="6.1875%" y="421" width="1.0269%" height="15" fill="rgb(237,53,32)" fg:x="235" fg:w="39"/><text x="6.4375%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (39 samples, 1.03%)</title><rect x="6.1875%" y="405" width="1.0269%" height="15" fill="rgb(233,25,53)" fg:x="235" fg:w="39"/><text x="6.4375%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 1.03%)</title><rect x="6.1875%" y="389" width="1.0269%" height="15" fill="rgb(210,40,34)" fg:x="235" fg:w="39"/><text x="6.4375%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (39 samples, 1.03%)</title><rect x="6.1875%" y="373" width="1.0269%" height="15" fill="rgb(241,220,44)" fg:x="235" fg:w="39"/><text x="6.4375%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39 samples, 1.03%)</title><rect x="6.1875%" y="357" width="1.0269%" height="15" fill="rgb(235,28,35)" fg:x="235" fg:w="39"/><text x="6.4375%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (39 samples, 1.03%)</title><rect x="6.1875%" y="341" width="1.0269%" height="15" fill="rgb(210,56,17)" fg:x="235" fg:w="39"/><text x="6.4375%" y="351.50"></text></g><g><title>core::ptr::write (4 samples, 0.11%)</title><rect x="7.1090%" y="325" width="0.1053%" height="15" fill="rgb(224,130,29)" fg:x="270" fg:w="4"/><text x="7.3590%" y="335.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::fill (1 samples, 0.03%)</title><rect x="7.2143%" y="853" width="0.0263%" height="15" fill="rgb(235,212,8)" fg:x="274" fg:w="1"/><text x="7.4643%" y="863.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (1 samples, 0.03%)</title><rect x="7.2407%" y="853" width="0.0263%" height="15" fill="rgb(223,33,50)" fg:x="275" fg:w="1"/><text x="7.4907%" y="863.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="7.2670%" y="837" width="0.0263%" height="15" fill="rgb(219,149,13)" fg:x="276" fg:w="1"/><text x="7.5170%" y="847.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="7.2933%" y="837" width="0.0263%" height="15" fill="rgb(250,156,29)" fg:x="277" fg:w="1"/><text x="7.5433%" y="847.50"></text></g><g><title>__rdl_alloc_zeroed (3 samples, 0.08%)</title><rect x="7.3196%" y="837" width="0.0790%" height="15" fill="rgb(216,193,19)" fg:x="278" fg:w="3"/><text x="7.5696%" y="847.50"></text></g><g><title>[[heap]] (6 samples, 0.16%)</title><rect x="7.2670%" y="853" width="0.1580%" height="15" fill="rgb(216,135,14)" fg:x="276" fg:w="6"/><text x="7.5170%" y="863.50"></text></g><g><title>snd_pcm_status (1 samples, 0.03%)</title><rect x="7.3986%" y="837" width="0.0263%" height="15" fill="rgb(241,47,5)" fg:x="281" fg:w="1"/><text x="7.6486%" y="847.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (3 samples, 0.08%)</title><rect x="7.4250%" y="837" width="0.0790%" height="15" fill="rgb(233,42,35)" fg:x="282" fg:w="3"/><text x="7.6750%" y="847.50"></text></g><g><title>[libc.so.6] (17 samples, 0.45%)</title><rect x="7.5039%" y="837" width="0.4476%" height="15" fill="rgb(231,13,6)" fg:x="285" fg:w="17"/><text x="7.7539%" y="847.50"></text></g><g><title>audio::downmix::downmix (4 samples, 0.11%)</title><rect x="7.9516%" y="837" width="0.1053%" height="15" fill="rgb(207,181,40)" fg:x="302" fg:w="4"/><text x="8.2016%" y="847.50"></text></g><g><title>cfree (8 samples, 0.21%)</title><rect x="8.0569%" y="837" width="0.2106%" height="15" fill="rgb(254,173,49)" fg:x="306" fg:w="8"/><text x="8.3069%" y="847.50"></text></g><g><title>cli::run::{{closure}}::{{closure}} (4 samples, 0.11%)</title><rect x="8.2675%" y="837" width="0.1053%" height="15" fill="rgb(221,1,38)" fg:x="314" fg:w="4"/><text x="8.5175%" y="847.50"></text></g><g><title>[anon] (37 samples, 0.97%)</title><rect x="7.4250%" y="853" width="0.9742%" height="15" fill="rgb(206,124,46)" fg:x="282" fg:w="37"/><text x="7.6750%" y="863.50"></text></g><g><title>pa_sample_spec_valid (1 samples, 0.03%)</title><rect x="8.3728%" y="837" width="0.0263%" height="15" fill="rgb(249,21,11)" fg:x="318" fg:w="1"/><text x="8.6228%" y="847.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="8.3992%" y="837" width="0.0790%" height="15" fill="rgb(222,201,40)" fg:x="319" fg:w="3"/><text x="8.6492%" y="847.50"></text></g><g><title>cli::run::{{closure}}::{{closure}} (7 samples, 0.18%)</title><rect x="8.4781%" y="837" width="0.1843%" height="15" fill="rgb(235,61,29)" fg:x="322" fg:w="7"/><text x="8.7281%" y="847.50"></text></g><g><title>[cli] (11 samples, 0.29%)</title><rect x="8.3992%" y="853" width="0.2896%" height="15" fill="rgb(219,207,3)" fg:x="319" fg:w="11"/><text x="8.6492%" y="863.50"></text></g><g><title>cpal::traits::DeviceTrait::build_output_stream::{{closure}} (1 samples, 0.03%)</title><rect x="8.6625%" y="837" width="0.0263%" height="15" fill="rgb(222,56,46)" fg:x="329" fg:w="1"/><text x="8.9125%" y="847.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::fill (1 samples, 0.03%)</title><rect x="8.7151%" y="597" width="0.0263%" height="15" fill="rgb(239,76,54)" fg:x="331" fg:w="1"/><text x="8.9651%" y="607.50"></text></g><g><title>snd_pcm_poll_descriptors (1 samples, 0.03%)</title><rect x="8.7151%" y="581" width="0.0263%" height="15" fill="rgb(231,124,27)" fg:x="331" fg:w="1"/><text x="8.9651%" y="591.50"></text></g><g><title>pa_stream_writable_size (1 samples, 0.03%)</title><rect x="8.8468%" y="517" width="0.0263%" height="15" fill="rgb(249,195,6)" fg:x="336" fg:w="1"/><text x="9.0968%" y="527.50"></text></g><g><title>pa_detect_fork (1 samples, 0.03%)</title><rect x="8.8468%" y="501" width="0.0263%" height="15" fill="rgb(237,174,47)" fg:x="336" fg:w="1"/><text x="9.0968%" y="511.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (2 samples, 0.05%)</title><rect x="8.8468%" y="533" width="0.0527%" height="15" fill="rgb(206,201,31)" fg:x="336" fg:w="2"/><text x="9.0968%" y="543.50"></text></g><g><title>pulse_check_connection (1 samples, 0.03%)</title><rect x="8.8731%" y="517" width="0.0263%" height="15" fill="rgb(231,57,52)" fg:x="337" fg:w="1"/><text x="9.1231%" y="527.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="8.8731%" y="501" width="0.0263%" height="15" fill="rgb(248,177,22)" fg:x="337" fg:w="1"/><text x="9.1231%" y="511.50"></text></g><g><title>pa_mutex_lock (1 samples, 0.03%)</title><rect x="8.8994%" y="533" width="0.0263%" height="15" fill="rgb(215,211,37)" fg:x="338" fg:w="1"/><text x="9.1494%" y="543.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="8.8994%" y="517" width="0.0263%" height="15" fill="rgb(241,128,51)" fg:x="338" fg:w="1"/><text x="9.1494%" y="527.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="8.9258%" y="517" width="0.0263%" height="15" fill="rgb(227,165,31)" fg:x="339" fg:w="1"/><text x="9.1758%" y="527.50"></text></g><g><title>[libasound.so.2.0.0] (8 samples, 0.21%)</title><rect x="8.7678%" y="565" width="0.2106%" height="15" fill="rgb(228,167,24)" fg:x="333" fg:w="8"/><text x="9.0178%" y="575.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (5 samples, 0.13%)</title><rect x="8.8468%" y="549" width="0.1316%" height="15" fill="rgb(228,143,12)" fg:x="336" fg:w="5"/><text x="9.0968%" y="559.50"></text></g><g><title>pa_threaded_mainloop_lock (2 samples, 0.05%)</title><rect x="8.9258%" y="533" width="0.0527%" height="15" fill="rgb(249,149,8)" fg:x="339" fg:w="2"/><text x="9.1758%" y="543.50"></text></g><g><title>pa_thread_self (1 samples, 0.03%)</title><rect x="8.9521%" y="517" width="0.0263%" height="15" fill="rgb(243,35,44)" fg:x="340" fg:w="1"/><text x="9.2021%" y="527.50"></text></g><g><title>pa_run_once (1 samples, 0.03%)</title><rect x="8.9521%" y="501" width="0.0263%" height="15" fill="rgb(246,89,9)" fg:x="340" fg:w="1"/><text x="9.2021%" y="511.50"></text></g><g><title>pa_once_begin (1 samples, 0.03%)</title><rect x="8.9521%" y="485" width="0.0263%" height="15" fill="rgb(233,213,13)" fg:x="340" fg:w="1"/><text x="9.2021%" y="495.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (10 samples, 0.26%)</title><rect x="8.7414%" y="597" width="0.2633%" height="15" fill="rgb(233,141,41)" fg:x="332" fg:w="10"/><text x="8.9914%" y="607.50"></text></g><g><title>snd_pcm_poll_descriptors_revents (9 samples, 0.24%)</title><rect x="8.7678%" y="581" width="0.2370%" height="15" fill="rgb(239,167,4)" fg:x="333" fg:w="9"/><text x="9.0178%" y="591.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="8.9784%" y="565" width="0.0263%" height="15" fill="rgb(209,217,16)" fg:x="341" fg:w="1"/><text x="9.2284%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.13%)</title><rect x="9.0047%" y="597" width="0.1316%" height="15" fill="rgb(219,88,35)" fg:x="342" fg:w="5"/><text x="9.2547%" y="607.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="9.1364%" y="597" width="0.0527%" height="15" fill="rgb(220,193,23)" fg:x="347" fg:w="2"/><text x="9.3864%" y="607.50"></text></g><g><title>alsa::pcm::PCM::avail (1 samples, 0.03%)</title><rect x="9.1890%" y="597" width="0.0263%" height="15" fill="rgb(230,90,52)" fg:x="349" fg:w="1"/><text x="9.4390%" y="607.50"></text></g><g><title>snd_pcm_avail (1 samples, 0.03%)</title><rect x="9.1890%" y="581" width="0.0263%" height="15" fill="rgb(252,106,19)" fg:x="349" fg:w="1"/><text x="9.4390%" y="591.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="9.1890%" y="565" width="0.0263%" height="15" fill="rgb(206,74,20)" fg:x="349" fg:w="1"/><text x="9.4390%" y="575.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="9.1890%" y="549" width="0.0263%" height="15" fill="rgb(230,138,44)" fg:x="349" fg:w="1"/><text x="9.4390%" y="559.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="9.1890%" y="533" width="0.0263%" height="15" fill="rgb(235,182,43)" fg:x="349" fg:w="1"/><text x="9.4390%" y="543.50"></text></g><g><title>pa_mutex_unlock (1 samples, 0.03%)</title><rect x="9.1890%" y="517" width="0.0263%" height="15" fill="rgb(242,16,51)" fg:x="349" fg:w="1"/><text x="9.4390%" y="527.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="9.1890%" y="501" width="0.0263%" height="15" fill="rgb(248,9,4)" fg:x="349" fg:w="1"/><text x="9.4390%" y="511.50"></text></g><g><title>pa_bytes_to_usec (4 samples, 0.11%)</title><rect x="9.2680%" y="501" width="0.1053%" height="15" fill="rgb(210,31,22)" fg:x="352" fg:w="4"/><text x="9.5180%" y="511.50"></text></g><g><title>pa_sample_spec_valid (2 samples, 0.05%)</title><rect x="9.3207%" y="485" width="0.0527%" height="15" fill="rgb(239,54,39)" fg:x="354" fg:w="2"/><text x="9.5707%" y="495.50"></text></g><g><title>pa_sample_format_valid (1 samples, 0.03%)</title><rect x="9.3470%" y="469" width="0.0263%" height="15" fill="rgb(230,99,41)" fg:x="355" fg:w="1"/><text x="9.5970%" y="479.50"></text></g><g><title>pa_stream_get_latency (5 samples, 0.13%)</title><rect x="9.2680%" y="517" width="0.1316%" height="15" fill="rgb(253,106,12)" fg:x="352" fg:w="5"/><text x="9.5180%" y="527.50"></text></g><g><title>pa_stream_get_time (1 samples, 0.03%)</title><rect x="9.3734%" y="501" width="0.0263%" height="15" fill="rgb(213,46,41)" fg:x="356" fg:w="1"/><text x="9.6234%" y="511.50"></text></g><g><title>pa_rtclock_now (1 samples, 0.03%)</title><rect x="9.3734%" y="485" width="0.0263%" height="15" fill="rgb(215,133,35)" fg:x="356" fg:w="1"/><text x="9.6234%" y="495.50"></text></g><g><title>pa_rtclock_get (1 samples, 0.03%)</title><rect x="9.3734%" y="469" width="0.0263%" height="15" fill="rgb(213,28,5)" fg:x="356" fg:w="1"/><text x="9.6234%" y="479.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="9.3734%" y="453" width="0.0263%" height="15" fill="rgb(215,77,49)" fg:x="356" fg:w="1"/><text x="9.6234%" y="463.50"></text></g><g><title>alsa::pcm::PCM::status (8 samples, 0.21%)</title><rect x="9.2154%" y="597" width="0.2106%" height="15" fill="rgb(248,100,22)" fg:x="350" fg:w="8"/><text x="9.4654%" y="607.50"></text></g><g><title>alsa::pcm::StatusBuilder::build (8 samples, 0.21%)</title><rect x="9.2154%" y="581" width="0.2106%" height="15" fill="rgb(208,67,9)" fg:x="350" fg:w="8"/><text x="9.4654%" y="591.50"></text></g><g><title>snd_pcm_status (8 samples, 0.21%)</title><rect x="9.2154%" y="565" width="0.2106%" height="15" fill="rgb(219,133,21)" fg:x="350" fg:w="8"/><text x="9.4654%" y="575.50"></text></g><g><title>[libasound.so.2.0.0] (6 samples, 0.16%)</title><rect x="9.2680%" y="549" width="0.1580%" height="15" fill="rgb(246,46,29)" fg:x="352" fg:w="6"/><text x="9.5180%" y="559.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (6 samples, 0.16%)</title><rect x="9.2680%" y="533" width="0.1580%" height="15" fill="rgb(246,185,52)" fg:x="352" fg:w="6"/><text x="9.5180%" y="543.50"></text></g><g><title>snd_pcm_bytes_to_frames (1 samples, 0.03%)</title><rect x="9.3997%" y="517" width="0.0263%" height="15" fill="rgb(252,136,11)" fg:x="357" fg:w="1"/><text x="9.6497%" y="527.50"></text></g><g><title>alsa::pcm::Status::get_delay (1 samples, 0.03%)</title><rect x="9.4260%" y="597" width="0.0263%" height="15" fill="rgb(219,138,53)" fg:x="358" fg:w="1"/><text x="9.6760%" y="607.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (49 samples, 1.29%)</title><rect x="8.6888%" y="613" width="1.2902%" height="15" fill="rgb(211,51,23)" fg:x="330" fg:w="49"/><text x="8.9388%" y="623.50"></text></g><g><title>alsa::poll::poll (20 samples, 0.53%)</title><rect x="9.4523%" y="597" width="0.5266%" height="15" fill="rgb(247,221,28)" fg:x="359" fg:w="20"/><text x="9.7023%" y="607.50"></text></g><g><title>__poll (14 samples, 0.37%)</title><rect x="9.6103%" y="581" width="0.3686%" height="15" fill="rgb(251,222,45)" fg:x="365" fg:w="14"/><text x="9.8603%" y="591.50"></text></g><g><title>[libc.so.6] (6 samples, 0.16%)</title><rect x="9.8210%" y="565" width="0.1580%" height="15" fill="rgb(217,162,53)" fg:x="373" fg:w="6"/><text x="10.0710%" y="575.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="9.9789%" y="533" width="0.0263%" height="15" fill="rgb(229,93,14)" fg:x="379" fg:w="1"/><text x="10.2289%" y="543.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="9.9789%" y="517" width="0.0263%" height="15" fill="rgb(209,67,49)" fg:x="379" fg:w="1"/><text x="10.2289%" y="527.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="9.9789%" y="501" width="0.0263%" height="15" fill="rgb(213,87,29)" fg:x="379" fg:w="1"/><text x="10.2289%" y="511.50"></text></g><g><title>pulse_check_connection (1 samples, 0.03%)</title><rect x="9.9789%" y="485" width="0.0263%" height="15" fill="rgb(205,151,52)" fg:x="379" fg:w="1"/><text x="10.2289%" y="495.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="9.9789%" y="469" width="0.0263%" height="15" fill="rgb(253,215,39)" fg:x="379" fg:w="1"/><text x="10.2289%" y="479.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="10.0053%" y="517" width="0.0263%" height="15" fill="rgb(221,220,41)" fg:x="380" fg:w="1"/><text x="10.2553%" y="527.50"></text></g><g><title>pulse_poll_deactivate (1 samples, 0.03%)</title><rect x="10.0053%" y="501" width="0.0263%" height="15" fill="rgb(218,133,21)" fg:x="380" fg:w="1"/><text x="10.2553%" y="511.50"></text></g><g><title>read (1 samples, 0.03%)</title><rect x="10.0053%" y="485" width="0.0263%" height="15" fill="rgb(221,193,43)" fg:x="380" fg:w="1"/><text x="10.2553%" y="495.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="10.0316%" y="485" width="0.1053%" height="15" fill="rgb(240,128,52)" fg:x="381" fg:w="4"/><text x="10.2816%" y="495.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="10.1369%" y="485" width="0.0263%" height="15" fill="rgb(253,114,12)" fg:x="385" fg:w="1"/><text x="10.3869%" y="495.50"></text></g><g><title>pa_frame_align (1 samples, 0.03%)</title><rect x="10.1632%" y="485" width="0.0263%" height="15" fill="rgb(215,223,47)" fg:x="386" fg:w="1"/><text x="10.4132%" y="495.50"></text></g><g><title>pa_frame_size (1 samples, 0.03%)</title><rect x="10.1632%" y="469" width="0.0263%" height="15" fill="rgb(248,225,23)" fg:x="386" fg:w="1"/><text x="10.4132%" y="479.50"></text></g><g><title>pa_memblock_new (1 samples, 0.03%)</title><rect x="10.1896%" y="485" width="0.0263%" height="15" fill="rgb(250,108,0)" fg:x="387" fg:w="1"/><text x="10.4396%" y="495.50"></text></g><g><title>pa_memblock_new_pool (1 samples, 0.03%)</title><rect x="10.1896%" y="469" width="0.0263%" height="15" fill="rgb(228,208,7)" fg:x="387" fg:w="1"/><text x="10.4396%" y="479.50"></text></g><g><title>pa_memblock_release (1 samples, 0.03%)</title><rect x="10.2159%" y="485" width="0.0263%" height="15" fill="rgb(244,45,10)" fg:x="388" fg:w="1"/><text x="10.4659%" y="495.50"></text></g><g><title>pa_mempool_block_size_max (3 samples, 0.08%)</title><rect x="10.2422%" y="485" width="0.0790%" height="15" fill="rgb(207,125,25)" fg:x="389" fg:w="3"/><text x="10.4922%" y="495.50"></text></g><g><title>[libasound.so.2.0.0] (14 samples, 0.37%)</title><rect x="9.9789%" y="581" width="0.3686%" height="15" fill="rgb(210,195,18)" fg:x="379" fg:w="14"/><text x="10.2289%" y="591.50"></text></g><g><title>[libasound.so.2.0.0] (14 samples, 0.37%)</title><rect x="9.9789%" y="565" width="0.3686%" height="15" fill="rgb(249,80,12)" fg:x="379" fg:w="14"/><text x="10.2289%" y="575.50"></text></g><g><title>[libasound.so.2.0.0] (14 samples, 0.37%)</title><rect x="9.9789%" y="549" width="0.3686%" height="15" fill="rgb(221,65,9)" fg:x="379" fg:w="14"/><text x="10.2289%" y="559.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (13 samples, 0.34%)</title><rect x="10.0053%" y="533" width="0.3423%" height="15" fill="rgb(235,49,36)" fg:x="380" fg:w="13"/><text x="10.2553%" y="543.50"></text></g><g><title>pa_stream_write (12 samples, 0.32%)</title><rect x="10.0316%" y="517" width="0.3160%" height="15" fill="rgb(225,32,20)" fg:x="381" fg:w="12"/><text x="10.2816%" y="527.50"></text></g><g><title>pa_stream_write_ext_free (12 samples, 0.32%)</title><rect x="10.0316%" y="501" width="0.3160%" height="15" fill="rgb(215,141,46)" fg:x="381" fg:w="12"/><text x="10.2816%" y="511.50"></text></g><g><title>pa_pstream_send_memblock (1 samples, 0.03%)</title><rect x="10.3212%" y="485" width="0.0263%" height="15" fill="rgb(250,160,47)" fg:x="392" fg:w="1"/><text x="10.5712%" y="495.50"></text></g><g><title>pa_queue_push (1 samples, 0.03%)</title><rect x="10.3212%" y="469" width="0.0263%" height="15" fill="rgb(216,222,40)" fg:x="392" fg:w="1"/><text x="10.5712%" y="479.50"></text></g><g><title>pa_flist_pop (1 samples, 0.03%)</title><rect x="10.3212%" y="453" width="0.0263%" height="15" fill="rgb(234,217,39)" fg:x="392" fg:w="1"/><text x="10.5712%" y="463.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="10.3212%" y="437" width="0.0263%" height="15" fill="rgb(207,178,40)" fg:x="392" fg:w="1"/><text x="10.5712%" y="447.50"></text></g><g><title>alsa::pcm::IO&lt;S&gt;::to_frames (1 samples, 0.03%)</title><rect x="10.3476%" y="581" width="0.0263%" height="15" fill="rgb(221,136,13)" fg:x="393" fg:w="1"/><text x="10.5976%" y="591.50"></text></g><g><title>alsa::pcm::PCM::bytes_to_frames (1 samples, 0.03%)</title><rect x="10.3476%" y="565" width="0.0263%" height="15" fill="rgb(249,199,10)" fg:x="393" fg:w="1"/><text x="10.5976%" y="575.50"></text></g><g><title>alsa::pcm::IO&lt;S&gt;::writei (16 samples, 0.42%)</title><rect x="9.9789%" y="597" width="0.4213%" height="15" fill="rgb(249,222,13)" fg:x="379" fg:w="16"/><text x="10.2289%" y="607.50"></text></g><g><title>snd_pcm_writei (1 samples, 0.03%)</title><rect x="10.3739%" y="581" width="0.0263%" height="15" fill="rgb(244,185,38)" fg:x="394" fg:w="1"/><text x="10.6239%" y="591.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="10.3739%" y="565" width="0.0263%" height="15" fill="rgb(236,202,9)" fg:x="394" fg:w="1"/><text x="10.6239%" y="575.50"></text></g><g><title>snd_pcm_state (1 samples, 0.03%)</title><rect x="10.3739%" y="549" width="0.0263%" height="15" fill="rgb(250,229,37)" fg:x="394" fg:w="1"/><text x="10.6239%" y="559.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="10.3739%" y="533" width="0.0263%" height="15" fill="rgb(206,174,23)" fg:x="394" fg:w="1"/><text x="10.6239%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="10.7425%" y="581" width="0.0527%" height="15" fill="rgb(211,33,43)" fg:x="408" fg:w="2"/><text x="10.9925%" y="591.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="10.7425%" y="565" width="0.0527%" height="15" fill="rgb(245,58,50)" fg:x="408" fg:w="2"/><text x="10.9925%" y="575.50"></text></g><g><title>core::cmp::min (4 samples, 0.11%)</title><rect x="10.7952%" y="565" width="0.1053%" height="15" fill="rgb(244,68,36)" fg:x="410" fg:w="4"/><text x="11.0452%" y="575.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.11%)</title><rect x="10.7952%" y="549" width="0.1053%" height="15" fill="rgb(232,229,15)" fg:x="410" fg:w="4"/><text x="11.0452%" y="559.50"></text></g><g><title>cli::write_data (4 samples, 0.11%)</title><rect x="10.7952%" y="533" width="0.1053%" height="15" fill="rgb(254,30,23)" fg:x="410" fg:w="4"/><text x="11.0452%" y="543.50"></text></g><g><title>&lt;core::slice::iter::ChunksMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.18%)</title><rect x="10.7952%" y="581" width="0.1843%" height="15" fill="rgb(235,160,14)" fg:x="410" fg:w="7"/><text x="11.0452%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::split_at_mut (3 samples, 0.08%)</title><rect x="10.9005%" y="565" width="0.0790%" height="15" fill="rgb(212,155,44)" fg:x="414" fg:w="3"/><text x="11.1505%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::split_at_mut_unchecked (3 samples, 0.08%)</title><rect x="10.9005%" y="549" width="0.0790%" height="15" fill="rgb(226,2,50)" fg:x="414" fg:w="3"/><text x="11.1505%" y="559.50"></text></g><g><title>cli::write_data (3 samples, 0.08%)</title><rect x="10.9005%" y="533" width="0.0790%" height="15" fill="rgb(234,177,6)" fg:x="414" fg:w="3"/><text x="11.1505%" y="543.50"></text></g><g><title>[cli] (1 samples, 0.03%)</title><rect x="10.9795%" y="581" width="0.0263%" height="15" fill="rgb(217,24,9)" fg:x="417" fg:w="1"/><text x="11.2295%" y="591.50"></text></g><g><title>cli::run::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="10.9795%" y="565" width="0.0263%" height="15" fill="rgb(220,13,46)" fg:x="417" fg:w="1"/><text x="11.2295%" y="575.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (5 samples, 0.13%)</title><rect x="11.1638%" y="549" width="0.1316%" height="15" fill="rgb(239,221,27)" fg:x="424" fg:w="5"/><text x="11.4138%" y="559.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::refresh_interval (2 samples, 0.05%)</title><rect x="11.2954%" y="549" width="0.0527%" height="15" fill="rgb(222,198,25)" fg:x="429" fg:w="2"/><text x="11.5454%" y="559.50"></text></g><g><title>audio::int_set::int_set_struct::IntSet&lt;V&gt;::iter_mut (2 samples, 0.05%)</title><rect x="11.3481%" y="533" width="0.0527%" height="15" fill="rgb(211,99,13)" fg:x="431" fg:w="2"/><text x="11.5981%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.05%)</title><rect x="11.3481%" y="517" width="0.0527%" height="15" fill="rgb(232,111,31)" fg:x="431" fg:w="2"/><text x="11.5981%" y="527.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="11.4007%" y="469" width="0.0790%" height="15" fill="rgb(245,82,37)" fg:x="433" fg:w="3"/><text x="11.6507%" y="479.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (155 samples, 4.08%)</title><rect x="12.9015%" y="421" width="4.0811%" height="15" fill="rgb(227,149,46)" fg:x="490" fg:w="155"/><text x="13.1515%" y="431.50">&lt;aud..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 1.29%)</title><rect x="22.3802%" y="405" width="1.2902%" height="15" fill="rgb(218,36,50)" fg:x="850" fg:w="49"/><text x="22.6302%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (49 samples, 1.29%)</title><rect x="22.3802%" y="389" width="1.2902%" height="15" fill="rgb(226,80,48)" fg:x="850" fg:w="49"/><text x="22.6302%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (49 samples, 1.29%)</title><rect x="22.3802%" y="373" width="1.2902%" height="15" fill="rgb(238,224,15)" fg:x="850" fg:w="49"/><text x="22.6302%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (44 samples, 1.16%)</title><rect x="23.6704%" y="405" width="1.1585%" height="15" fill="rgb(241,136,10)" fg:x="899" fg:w="44"/><text x="23.9204%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (44 samples, 1.16%)</title><rect x="23.6704%" y="389" width="1.1585%" height="15" fill="rgb(208,32,45)" fg:x="899" fg:w="44"/><text x="23.9204%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (44 samples, 1.16%)</title><rect x="23.6704%" y="373" width="1.1585%" height="15" fill="rgb(207,135,9)" fg:x="899" fg:w="44"/><text x="23.9204%" y="383.50"></text></g><g><title>audio::grain::Grain::next_frame (128 samples, 3.37%)</title><rect x="24.8289%" y="405" width="3.3702%" height="15" fill="rgb(206,86,44)" fg:x="943" fg:w="128"/><text x="25.0789%" y="415.50">aud..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (582 samples, 15.32%)</title><rect x="12.9015%" y="453" width="15.3239%" height="15" fill="rgb(245,177,15)" fg:x="490" fg:w="582"/><text x="13.1515%" y="463.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (582 samples, 15.32%)</title><rect x="12.9015%" y="437" width="15.3239%" height="15" fill="rgb(206,64,50)" fg:x="490" fg:w="582"/><text x="13.1515%" y="447.50">core::iter::traits::ite..</text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::fill_buffer_and_env_samples::{{closure}} (427 samples, 11.24%)</title><rect x="16.9826%" y="421" width="11.2428%" height="15" fill="rgb(234,36,40)" fg:x="645" fg:w="427"/><text x="17.2326%" y="431.50">audio::granular_s..</text></g><g><title>audio::utils::generate_triangle_envelope_value_from_percent (1 samples, 0.03%)</title><rect x="28.1991%" y="405" width="0.0263%" height="15" fill="rgb(213,64,8)" fg:x="1071" fg:w="1"/><text x="28.4491%" y="415.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (55 samples, 1.45%)</title><rect x="28.2254%" y="437" width="1.4481%" height="15" fill="rgb(210,75,36)" fg:x="1072" fg:w="55"/><text x="28.4754%" y="447.50"></text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::fill_buffer_and_env_samples (735 samples, 19.35%)</title><rect x="11.3481%" y="549" width="19.3523%" height="15" fill="rgb(229,88,21)" fg:x="431" fg:w="735"/><text x="11.5981%" y="559.50">audio::granular_synthesizer::G..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (733 samples, 19.30%)</title><rect x="11.4007%" y="533" width="19.2996%" height="15" fill="rgb(252,204,47)" fg:x="433" fg:w="733"/><text x="11.6507%" y="543.50">core::iter::traits::iterator::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (733 samples, 19.30%)</title><rect x="11.4007%" y="517" width="19.2996%" height="15" fill="rgb(208,77,27)" fg:x="433" fg:w="733"/><text x="11.6507%" y="527.50">&lt;core::iter::adapters::enumera..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (733 samples, 19.30%)</title><rect x="11.4007%" y="501" width="19.2996%" height="15" fill="rgb(221,76,26)" fg:x="433" fg:w="733"/><text x="11.6507%" y="511.50">&lt;core::iter::adapters::filter_..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (733 samples, 19.30%)</title><rect x="11.4007%" y="485" width="19.2996%" height="15" fill="rgb(225,139,18)" fg:x="433" fg:w="733"/><text x="11.6507%" y="495.50">core::iter::traits::iterator::..</text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (730 samples, 19.22%)</title><rect x="11.4797%" y="469" width="19.2206%" height="15" fill="rgb(230,137,11)" fg:x="436" fg:w="730"/><text x="11.7297%" y="479.50">core::iter::adapters::filter_m..</text></g><g><title>audio::int_set::int_set_struct::IntSet&lt;V&gt;::iter_mut::{{closure}} (94 samples, 2.47%)</title><rect x="28.2254%" y="453" width="2.4750%" height="15" fill="rgb(212,28,1)" fg:x="1072" fg:w="94"/><text x="28.4754%" y="463.50">au..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (39 samples, 1.03%)</title><rect x="29.6735%" y="437" width="1.0269%" height="15" fill="rgb(248,164,17)" fg:x="1127" fg:w="39"/><text x="29.9235%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1 samples, 0.03%)</title><rect x="30.7004%" y="453" width="0.0263%" height="15" fill="rgb(222,171,42)" fg:x="1166" fg:w="1"/><text x="30.9504%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (1 samples, 0.03%)</title><rect x="30.7004%" y="437" width="0.0263%" height="15" fill="rgb(243,84,45)" fg:x="1166" fg:w="1"/><text x="30.9504%" y="447.50"></text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::filter_one_long_grain::{{closure}} (1 samples, 0.03%)</title><rect x="30.7004%" y="421" width="0.0263%" height="15" fill="rgb(252,49,23)" fg:x="1166" fg:w="1"/><text x="30.9504%" y="431.50"></text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::filter_one_long_grain (2 samples, 0.05%)</title><rect x="30.7004%" y="549" width="0.0527%" height="15" fill="rgb(215,19,7)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.05%)</title><rect x="30.7004%" y="533" width="0.0527%" height="15" fill="rgb(238,81,41)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.05%)</title><rect x="30.7004%" y="517" width="0.0527%" height="15" fill="rgb(210,199,37)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.05%)</title><rect x="30.7004%" y="501" width="0.0527%" height="15" fill="rgb(244,192,49)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.05%)</title><rect x="30.7004%" y="485" width="0.0527%" height="15" fill="rgb(226,211,11)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="495.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (2 samples, 0.05%)</title><rect x="30.7004%" y="469" width="0.0527%" height="15" fill="rgb(236,162,54)" fg:x="1166" fg:w="2"/><text x="30.9504%" y="479.50"></text></g><g><title>audio::int_set::int_set_struct::IntSet&lt;V&gt;::iter::{{closure}} (1 samples, 0.03%)</title><rect x="30.7267%" y="453" width="0.0263%" height="15" fill="rgb(220,229,9)" fg:x="1167" fg:w="1"/><text x="30.9767%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="30.7267%" y="437" width="0.0263%" height="15" fill="rgb(250,87,22)" fg:x="1167" fg:w="1"/><text x="30.9767%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.71%)</title><rect x="31.4639%" y="533" width="0.7109%" height="15" fill="rgb(239,43,17)" fg:x="1195" fg:w="27"/><text x="31.7139%" y="543.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.11%)</title><rect x="32.0695%" y="517" width="0.1053%" height="15" fill="rgb(231,177,25)" fg:x="1218" fg:w="4"/><text x="32.3195%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3 samples, 0.08%)</title><rect x="32.1748%" y="533" width="0.0790%" height="15" fill="rgb(219,179,1)" fg:x="1222" fg:w="3"/><text x="32.4248%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="32.2275%" y="517" width="0.0263%" height="15" fill="rgb(238,219,53)" fg:x="1224" fg:w="1"/><text x="32.4775%" y="527.50"></text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::num_channels_for_frame (17 samples, 0.45%)</title><rect x="32.2538%" y="533" width="0.4476%" height="15" fill="rgb(232,167,36)" fg:x="1225" fg:w="17"/><text x="32.5038%" y="543.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (17 samples, 0.45%)</title><rect x="32.7014%" y="533" width="0.4476%" height="15" fill="rgb(244,19,51)" fg:x="1242" fg:w="17"/><text x="32.9514%" y="543.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (842 samples, 22.17%)</title><rect x="11.0321%" y="565" width="22.1696%" height="15" fill="rgb(224,6,22)" fg:x="419" fg:w="842"/><text x="11.2821%" y="575.50">&lt;audio::granular_synthesizer::Granu..</text></g><g><title>audio::granular_synthesizer::GranularSynthesizer::frame_data (93 samples, 2.45%)</title><rect x="30.7530%" y="549" width="2.4487%" height="15" fill="rgb(224,145,5)" fg:x="1168" fg:w="93"/><text x="31.0030%" y="559.50">au..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.05%)</title><rect x="33.1490%" y="533" width="0.0527%" height="15" fill="rgb(234,130,49)" fg:x="1259" fg:w="2"/><text x="33.3990%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.05%)</title><rect x="33.1490%" y="517" width="0.0527%" height="15" fill="rgb(254,6,2)" fg:x="1259" fg:w="2"/><text x="33.3990%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.13%)</title><rect x="33.2017%" y="565" width="0.1316%" height="15" fill="rgb(208,96,46)" fg:x="1261" fg:w="5"/><text x="33.4517%" y="575.50"></text></g><g><title>&lt;&amp;f32 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (1 samples, 0.03%)</title><rect x="60.2949%" y="549" width="0.0263%" height="15" fill="rgb(239,3,39)" fg:x="2290" fg:w="1"/><text x="60.5449%" y="559.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="60.2949%" y="533" width="0.0263%" height="15" fill="rgb(233,210,1)" fg:x="2290" fg:w="1"/><text x="60.5449%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="60.3212%" y="533" width="0.0263%" height="15" fill="rgb(244,137,37)" fg:x="2291" fg:w="1"/><text x="60.5712%" y="543.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (238 samples, 6.27%)</title><rect x="60.3476%" y="533" width="6.2665%" height="15" fill="rgb(240,136,2)" fg:x="2292" fg:w="238"/><text x="60.5976%" y="543.50">&lt;core::s..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (365 samples, 9.61%)</title><rect x="60.3212%" y="549" width="9.6103%" height="15" fill="rgb(239,18,37)" fg:x="2291" fg:w="365"/><text x="60.5712%" y="559.50">&lt;core::iter::a..</text></g><g><title>audio::downmix::downmix (126 samples, 3.32%)</title><rect x="66.6140%" y="533" width="3.3175%" height="15" fill="rgb(218,185,22)" fg:x="2530" fg:w="126"/><text x="66.8640%" y="543.50">aud..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.21%)</title><rect x="69.9315%" y="533" width="0.2106%" height="15" fill="rgb(225,218,4)" fg:x="2656" fg:w="8"/><text x="70.1815%" y="543.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (2 samples, 0.05%)</title><rect x="70.0895%" y="517" width="0.0527%" height="15" fill="rgb(230,182,32)" fg:x="2662" fg:w="2"/><text x="70.3395%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (2 samples, 0.05%)</title><rect x="70.0895%" y="501" width="0.0527%" height="15" fill="rgb(242,56,43)" fg:x="2662" fg:w="2"/><text x="70.3395%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="70.0895%" y="485" width="0.0527%" height="15" fill="rgb(233,99,24)" fg:x="2662" fg:w="2"/><text x="70.3395%" y="495.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (16 samples, 0.42%)</title><rect x="69.9315%" y="549" width="0.4213%" height="15" fill="rgb(234,209,42)" fg:x="2656" fg:w="16"/><text x="70.1815%" y="559.50"></text></g><g><title>audio::downmix::downmix::{{closure}} (8 samples, 0.21%)</title><rect x="70.1422%" y="533" width="0.2106%" height="15" fill="rgb(227,7,12)" fg:x="2664" fg:w="8"/><text x="70.3922%" y="543.50"></text></g><g><title>__libc_calloc (160 samples, 4.21%)</title><rect x="70.4318%" y="437" width="4.2127%" height="15" fill="rgb(245,203,43)" fg:x="2675" fg:w="160"/><text x="70.6818%" y="447.50">__lib..</text></g><g><title>[libc.so.6] (58 samples, 1.53%)</title><rect x="73.1174%" y="421" width="1.5271%" height="15" fill="rgb(238,205,33)" fg:x="2777" fg:w="58"/><text x="73.3674%" y="431.50"></text></g><g><title>alloc::vec::from_elem (170 samples, 4.48%)</title><rect x="70.3528%" y="549" width="4.4760%" height="15" fill="rgb(231,56,7)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="559.50">alloc..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (170 samples, 4.48%)</title><rect x="70.3528%" y="533" width="4.4760%" height="15" fill="rgb(244,186,29)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="543.50">&lt;T as..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (170 samples, 4.48%)</title><rect x="70.3528%" y="517" width="4.4760%" height="15" fill="rgb(234,111,31)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="527.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (170 samples, 4.48%)</title><rect x="70.3528%" y="501" width="4.4760%" height="15" fill="rgb(241,149,10)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="511.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (170 samples, 4.48%)</title><rect x="70.3528%" y="485" width="4.4760%" height="15" fill="rgb(249,206,44)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="495.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (170 samples, 4.48%)</title><rect x="70.3528%" y="469" width="4.4760%" height="15" fill="rgb(251,153,30)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="479.50">alloc..</text></g><g><title>alloc::alloc::alloc_zeroed (170 samples, 4.48%)</title><rect x="70.3528%" y="453" width="4.4760%" height="15" fill="rgb(239,152,38)" fg:x="2672" fg:w="170"/><text x="70.6028%" y="463.50">alloc..</text></g><g><title>__rdl_alloc_zeroed (7 samples, 0.18%)</title><rect x="74.6445%" y="437" width="0.1843%" height="15" fill="rgb(249,139,47)" fg:x="2835" fg:w="7"/><text x="74.8945%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (5 samples, 0.13%)</title><rect x="74.6972%" y="421" width="0.1316%" height="15" fill="rgb(244,64,35)" fg:x="2837" fg:w="5"/><text x="74.9472%" y="431.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::abs (254 samples, 6.69%)</title><rect x="74.8289%" y="549" width="6.6877%" height="15" fill="rgb(216,46,15)" fg:x="2842" fg:w="254"/><text x="75.0789%" y="559.50">std::f32:..</text></g><g><title>audio::downmix::downmix (2,053 samples, 54.05%)</title><rect x="33.3333%" y="565" width="54.0548%" height="15" fill="rgb(250,74,19)" fg:x="1266" fg:w="2053"/><text x="33.5833%" y="575.50">audio::downmix::downmix</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (223 samples, 5.87%)</title><rect x="81.5166%" y="549" width="5.8715%" height="15" fill="rgb(249,42,33)" fg:x="3096" fg:w="223"/><text x="81.7666%" y="559.50">std::f3..</text></g><g><title>cli::run::{{closure}}::{{closure}} (3 samples, 0.08%)</title><rect x="87.3881%" y="565" width="0.0790%" height="15" fill="rgb(242,149,17)" fg:x="3319" fg:w="3"/><text x="87.6381%" y="575.50"></text></g><g><title>std::sync::poison::Flag::done (2 samples, 0.05%)</title><rect x="87.4671%" y="533" width="0.0527%" height="15" fill="rgb(244,29,21)" fg:x="3322" fg:w="2"/><text x="87.7171%" y="543.50"></text></g><g><title>std::thread::panicking (1 samples, 0.03%)</title><rect x="87.4934%" y="517" width="0.0263%" height="15" fill="rgb(220,130,37)" fg:x="3323" fg:w="1"/><text x="87.7434%" y="527.50"></text></g><g><title>std::panicking::panicking (1 samples, 0.03%)</title><rect x="87.4934%" y="501" width="0.0263%" height="15" fill="rgb(211,67,2)" fg:x="3323" fg:w="1"/><text x="87.7434%" y="511.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (1 samples, 0.03%)</title><rect x="87.4934%" y="485" width="0.0263%" height="15" fill="rgb(235,68,52)" fg:x="3323" fg:w="1"/><text x="87.7434%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;audio::granular_synthesizer::GranularSynthesizer&gt;&gt; (58 samples, 1.53%)</title><rect x="87.4671%" y="565" width="1.5271%" height="15" fill="rgb(246,142,3)" fg:x="3322" fg:w="58"/><text x="87.7171%" y="575.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 1.53%)</title><rect x="87.4671%" y="549" width="1.5271%" height="15" fill="rgb(241,25,7)" fg:x="3322" fg:w="58"/><text x="87.7171%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (56 samples, 1.47%)</title><rect x="87.5197%" y="533" width="1.4745%" height="15" fill="rgb(242,119,39)" fg:x="3324" fg:w="56"/><text x="87.7697%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (53 samples, 1.40%)</title><rect x="87.5987%" y="517" width="1.3955%" height="15" fill="rgb(241,98,45)" fg:x="3327" fg:w="53"/><text x="87.8487%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 1.40%)</title><rect x="87.5987%" y="501" width="1.3955%" height="15" fill="rgb(254,28,30)" fg:x="3327" fg:w="53"/><text x="87.8487%" y="511.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (3 samples, 0.08%)</title><rect x="88.9942%" y="549" width="0.0790%" height="15" fill="rgb(241,142,54)" fg:x="3380" fg:w="3"/><text x="89.2442%" y="559.50"></text></g><g><title>std::sync::poison::Flag::guard (3 samples, 0.08%)</title><rect x="88.9942%" y="533" width="0.0790%" height="15" fill="rgb(222,85,15)" fg:x="3380" fg:w="3"/><text x="89.2442%" y="543.50"></text></g><g><title>std::thread::panicking (3 samples, 0.08%)</title><rect x="88.9942%" y="517" width="0.0790%" height="15" fill="rgb(210,85,47)" fg:x="3380" fg:w="3"/><text x="89.2442%" y="527.50"></text></g><g><title>std::panicking::panicking (3 samples, 0.08%)</title><rect x="88.9942%" y="501" width="0.0790%" height="15" fill="rgb(224,206,25)" fg:x="3380" fg:w="3"/><text x="89.2442%" y="511.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (3 samples, 0.08%)</title><rect x="88.9942%" y="485" width="0.0790%" height="15" fill="rgb(243,201,19)" fg:x="3380" fg:w="3"/><text x="89.2442%" y="495.50"></text></g><g><title>cli::run::{{closure}}::{{closure}} (3,012 samples, 79.30%)</title><rect x="11.0058%" y="581" width="79.3049%" height="15" fill="rgb(236,59,4)" fg:x="418" fg:w="3012"/><text x="11.2558%" y="591.50">cli::run::{{closure}}::{{closure}}</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 1.32%)</title><rect x="88.9942%" y="565" width="1.3165%" height="15" fill="rgb(254,179,45)" fg:x="3380" fg:w="50"/><text x="89.2442%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (47 samples, 1.24%)</title><rect x="89.0732%" y="549" width="1.2375%" height="15" fill="rgb(226,14,10)" fg:x="3383" fg:w="47"/><text x="89.3232%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 1.21%)</title><rect x="89.0995%" y="533" width="1.2112%" height="15" fill="rgb(244,27,41)" fg:x="3384" fg:w="46"/><text x="89.3495%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 1.21%)</title><rect x="89.0995%" y="517" width="1.2112%" height="15" fill="rgb(235,35,32)" fg:x="3384" fg:w="46"/><text x="89.3495%" y="527.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.08%)</title><rect x="90.3633%" y="501" width="0.0790%" height="15" fill="rgb(218,68,31)" fg:x="3432" fg:w="3"/><text x="90.6133%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.08%)</title><rect x="90.3633%" y="485" width="0.0790%" height="15" fill="rgb(207,120,37)" fg:x="3432" fg:w="3"/><text x="90.6133%" y="495.50"></text></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect x="90.4423%" y="501" width="0.0527%" height="15" fill="rgb(227,98,0)" fg:x="3435" fg:w="2"/><text x="90.6923%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (127 samples, 3.34%)</title><rect x="90.3633%" y="517" width="3.3439%" height="15" fill="rgb(207,7,3)" fg:x="3432" fg:w="127"/><text x="90.6133%" y="527.50">all..</text></g><g><title>cfree (122 samples, 3.21%)</title><rect x="90.4950%" y="501" width="3.2122%" height="15" fill="rgb(206,98,19)" fg:x="3437" fg:w="122"/><text x="90.7450%" y="511.50">cfr..</text></g><g><title>[libc.so.6] (104 samples, 2.74%)</title><rect x="90.9689%" y="485" width="2.7383%" height="15" fill="rgb(217,5,26)" fg:x="3455" fg:w="104"/><text x="91.2189%" y="495.50">[l..</text></g><g><title>cli::write_data (3,168 samples, 83.41%)</title><rect x="10.4002%" y="597" width="83.4123%" height="15" fill="rgb(235,190,38)" fg:x="395" fg:w="3168"/><text x="10.6502%" y="607.50">cli::write_data</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (133 samples, 3.50%)</title><rect x="90.3107%" y="581" width="3.5018%" height="15" fill="rgb(247,86,24)" fg:x="3430" fg:w="133"/><text x="90.5607%" y="591.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (133 samples, 3.50%)</title><rect x="90.3107%" y="565" width="3.5018%" height="15" fill="rgb(205,101,16)" fg:x="3430" fg:w="133"/><text x="90.5607%" y="575.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 3.50%)</title><rect x="90.3107%" y="549" width="3.5018%" height="15" fill="rgb(246,168,33)" fg:x="3430" fg:w="133"/><text x="90.5607%" y="559.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (131 samples, 3.45%)</title><rect x="90.3633%" y="533" width="3.4492%" height="15" fill="rgb(231,114,1)" fg:x="3432" fg:w="131"/><text x="90.6133%" y="543.50">&lt;al..</text></g><g><title>cli::write_data (4 samples, 0.11%)</title><rect x="93.7072%" y="517" width="0.1053%" height="15" fill="rgb(207,184,53)" fg:x="3559" fg:w="4"/><text x="93.9572%" y="527.50"></text></g><g><title>[libc.so.6] (3,234 samples, 85.15%)</title><rect x="8.6888%" y="853" width="85.1501%" height="15" fill="rgb(224,95,51)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="863.50">[libc.so.6]</text></g><g><title>[libc.so.6] (3,234 samples, 85.15%)</title><rect x="8.6888%" y="837" width="85.1501%" height="15" fill="rgb(212,188,45)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="847.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,234 samples, 85.15%)</title><rect x="8.6888%" y="821" width="85.1501%" height="15" fill="rgb(223,154,38)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="831.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,234 samples, 85.15%)</title><rect x="8.6888%" y="805" width="85.1501%" height="15" fill="rgb(251,22,52)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="815.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,234 samples, 85.15%)</title><rect x="8.6888%" y="789" width="85.1501%" height="15" fill="rgb(229,209,22)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="799.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,234 samples, 85.15%)</title><rect x="8.6888%" y="773" width="85.1501%" height="15" fill="rgb(234,138,34)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="783.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3,234 samples, 85.15%)</title><rect x="8.6888%" y="757" width="85.1501%" height="15" fill="rgb(212,95,11)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="767.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (3,234 samples, 85.15%)</title><rect x="8.6888%" y="741" width="85.1501%" height="15" fill="rgb(240,179,47)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,234 samples, 85.15%)</title><rect x="8.6888%" y="725" width="85.1501%" height="15" fill="rgb(240,163,11)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,234 samples, 85.15%)</title><rect x="8.6888%" y="709" width="85.1501%" height="15" fill="rgb(236,37,12)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="719.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,234 samples, 85.15%)</title><rect x="8.6888%" y="693" width="85.1501%" height="15" fill="rgb(232,164,16)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="703.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (3,234 samples, 85.15%)</title><rect x="8.6888%" y="677" width="85.1501%" height="15" fill="rgb(244,205,15)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="687.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,234 samples, 85.15%)</title><rect x="8.6888%" y="661" width="85.1501%" height="15" fill="rgb(223,117,47)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>cpal::host::alsa::Stream::new_output::{{closure}} (3,234 samples, 85.15%)</title><rect x="8.6888%" y="645" width="85.1501%" height="15" fill="rgb(244,107,35)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="655.50">cpal::host::alsa::Stream::new_output::{{closure}}</text></g><g><title>cpal::host::alsa::output_stream_worker (3,234 samples, 85.15%)</title><rect x="8.6888%" y="629" width="85.1501%" height="15" fill="rgb(205,140,8)" fg:x="330" fg:w="3234"/><text x="8.9388%" y="639.50">cpal::host::alsa::output_stream_worker</text></g><g><title>cpal::host::alsa::process_output (3,185 samples, 83.86%)</title><rect x="9.9789%" y="613" width="83.8599%" height="15" fill="rgb(228,84,46)" fg:x="379" fg:w="3185"/><text x="10.2289%" y="623.50">cpal::host::alsa::process_output</text></g><g><title>cpal::host::alsa::frames_to_duration (1 samples, 0.03%)</title><rect x="93.8125%" y="597" width="0.0263%" height="15" fill="rgb(254,188,9)" fg:x="3563" fg:w="1"/><text x="94.0625%" y="607.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (5 samples, 0.13%)</title><rect x="93.8652%" y="837" width="0.1316%" height="15" fill="rgb(206,112,54)" fg:x="3565" fg:w="5"/><text x="94.1152%" y="847.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::refresh_interval (5 samples, 0.13%)</title><rect x="93.8652%" y="821" width="0.1316%" height="15" fill="rgb(216,84,49)" fg:x="3565" fg:w="5"/><text x="94.1152%" y="831.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.03%)</title><rect x="93.9968%" y="837" width="0.0263%" height="15" fill="rgb(214,194,35)" fg:x="3570" fg:w="1"/><text x="94.2468%" y="847.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="94.0232%" y="837" width="0.0527%" height="15" fill="rgb(249,28,3)" fg:x="3571" fg:w="2"/><text x="94.2732%" y="847.50"></text></g><g><title>__libc_calloc (2 samples, 0.05%)</title><rect x="94.0758%" y="837" width="0.0527%" height="15" fill="rgb(222,56,52)" fg:x="3573" fg:w="2"/><text x="94.3258%" y="847.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.03%)</title><rect x="94.1285%" y="837" width="0.0263%" height="15" fill="rgb(245,217,50)" fg:x="3575" fg:w="1"/><text x="94.3785%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.03%)</title><rect x="94.1285%" y="821" width="0.0263%" height="15" fill="rgb(213,201,24)" fg:x="3575" fg:w="1"/><text x="94.3785%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::pop_first (1 samples, 0.03%)</title><rect x="94.1548%" y="837" width="0.0263%" height="15" fill="rgb(248,116,28)" fg:x="3576" fg:w="1"/><text x="94.4048%" y="847.50"></text></g><g><title>alsa::pcm::Status::get_htstamp (1 samples, 0.03%)</title><rect x="94.1811%" y="837" width="0.0263%" height="15" fill="rgb(219,72,43)" fg:x="3577" fg:w="1"/><text x="94.4311%" y="847.50"></text></g><g><title>alsa::pcm::Status::get_trigger_htstamp (1 samples, 0.03%)</title><rect x="94.2075%" y="837" width="0.0263%" height="15" fill="rgb(209,138,14)" fg:x="3578" fg:w="1"/><text x="94.4575%" y="847.50"></text></g><g><title>audio::downmix::downmix (8 samples, 0.21%)</title><rect x="94.2338%" y="837" width="0.2106%" height="15" fill="rgb(222,18,33)" fg:x="3579" fg:w="8"/><text x="94.4838%" y="847.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.08%)</title><rect x="94.3655%" y="821" width="0.0790%" height="15" fill="rgb(213,199,7)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="831.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.08%)</title><rect x="94.3655%" y="805" width="0.0790%" height="15" fill="rgb(250,110,10)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3 samples, 0.08%)</title><rect x="94.3655%" y="789" width="0.0790%" height="15" fill="rgb(248,123,6)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.08%)</title><rect x="94.3655%" y="773" width="0.0790%" height="15" fill="rgb(206,91,31)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3 samples, 0.08%)</title><rect x="94.3655%" y="757" width="0.0790%" height="15" fill="rgb(211,154,13)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.08%)</title><rect x="94.3655%" y="741" width="0.0790%" height="15" fill="rgb(225,148,7)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="751.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3 samples, 0.08%)</title><rect x="94.3655%" y="725" width="0.0790%" height="15" fill="rgb(220,160,43)" fg:x="3584" fg:w="3"/><text x="94.6155%" y="735.50"></text></g><g><title>cli::write_data (7 samples, 0.18%)</title><rect x="94.4444%" y="837" width="0.1843%" height="15" fill="rgb(213,52,39)" fg:x="3587" fg:w="7"/><text x="94.6944%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (3 samples, 0.08%)</title><rect x="94.5498%" y="821" width="0.0790%" height="15" fill="rgb(243,137,7)" fg:x="3591" fg:w="3"/><text x="94.7998%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (3 samples, 0.08%)</title><rect x="94.5498%" y="805" width="0.0790%" height="15" fill="rgb(230,79,13)" fg:x="3591" fg:w="3"/><text x="94.7998%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="94.5498%" y="789" width="0.0790%" height="15" fill="rgb(247,105,23)" fg:x="3591" fg:w="3"/><text x="94.7998%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.08%)</title><rect x="94.5498%" y="773" width="0.0790%" height="15" fill="rgb(223,179,41)" fg:x="3591" fg:w="3"/><text x="94.7998%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.08%)</title><rect x="94.5498%" y="757" width="0.0790%" height="15" fill="rgb(218,9,34)" fg:x="3591" fg:w="3"/><text x="94.7998%" y="767.50"></text></g><g><title>cpal_alsa_out (3,323 samples, 87.49%)</title><rect x="7.2143%" y="869" width="87.4934%" height="15" fill="rgb(222,106,8)" fg:x="274" fg:w="3323"/><text x="7.4643%" y="879.50">cpal_alsa_out</text></g><g><title>[unknown] (33 samples, 0.87%)</title><rect x="93.8389%" y="853" width="0.8689%" height="15" fill="rgb(211,220,0)" fg:x="3564" fg:w="33"/><text x="94.0889%" y="863.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (3 samples, 0.08%)</title><rect x="94.6288%" y="837" width="0.0790%" height="15" fill="rgb(229,52,16)" fg:x="3594" fg:w="3"/><text x="94.8788%" y="847.50"></text></g><g><title>[[stack]] (2 samples, 0.05%)</title><rect x="94.7077%" y="853" width="0.0527%" height="15" fill="rgb(212,155,18)" fg:x="3597" fg:w="2"/><text x="94.9577%" y="863.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="94.7077%" y="837" width="0.0527%" height="15" fill="rgb(242,21,14)" fg:x="3597" fg:w="2"/><text x="94.9577%" y="847.50"></text></g><g><title>__send (1 samples, 0.03%)</title><rect x="94.7604%" y="837" width="0.0263%" height="15" fill="rgb(222,19,48)" fg:x="3599" fg:w="1"/><text x="95.0104%" y="847.50"></text></g><g><title>pa_memblock_release (1 samples, 0.03%)</title><rect x="94.7867%" y="837" width="0.0263%" height="15" fill="rgb(232,45,27)" fg:x="3600" fg:w="1"/><text x="95.0367%" y="847.50"></text></g><g><title>[anon] (3 samples, 0.08%)</title><rect x="94.7604%" y="853" width="0.0790%" height="15" fill="rgb(249,103,42)" fg:x="3599" fg:w="3"/><text x="95.0104%" y="863.50"></text></g><g><title>pa_mutex_unlock (1 samples, 0.03%)</title><rect x="94.8131%" y="837" width="0.0263%" height="15" fill="rgb(246,81,33)" fg:x="3601" fg:w="1"/><text x="95.0631%" y="847.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="95.3397%" y="645" width="0.0263%" height="15" fill="rgb(252,33,42)" fg:x="3621" fg:w="1"/><text x="95.5897%" y="655.50"></text></g><g><title>pa_stream_writable_size (1 samples, 0.03%)</title><rect x="95.3397%" y="629" width="0.0263%" height="15" fill="rgb(209,212,41)" fg:x="3621" fg:w="1"/><text x="95.5897%" y="639.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (3 samples, 0.08%)</title><rect x="95.3133%" y="661" width="0.0790%" height="15" fill="rgb(207,154,6)" fg:x="3620" fg:w="3"/><text x="95.5633%" y="671.50"></text></g><g><title>write (1 samples, 0.03%)</title><rect x="95.3660%" y="645" width="0.0263%" height="15" fill="rgb(223,64,47)" fg:x="3622" fg:w="1"/><text x="95.6160%" y="655.50"></text></g><g><title>[libpulse.so.0.24.1] (7 samples, 0.18%)</title><rect x="95.2607%" y="677" width="0.1843%" height="15" fill="rgb(211,161,38)" fg:x="3618" fg:w="7"/><text x="95.5107%" y="687.50"></text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.05%)</title><rect x="95.3923%" y="661" width="0.0527%" height="15" fill="rgb(219,138,40)" fg:x="3623" fg:w="2"/><text x="95.6423%" y="671.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="95.4450%" y="677" width="0.0263%" height="15" fill="rgb(241,228,46)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="687.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="95.4450%" y="661" width="0.0263%" height="15" fill="rgb(223,209,38)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="671.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="95.4450%" y="645" width="0.0263%" height="15" fill="rgb(236,164,45)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="655.50"></text></g><g><title>pa_bytes_to_usec (1 samples, 0.03%)</title><rect x="95.4450%" y="629" width="0.0263%" height="15" fill="rgb(231,15,5)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="639.50"></text></g><g><title>pa_sample_spec_valid (1 samples, 0.03%)</title><rect x="95.4450%" y="613" width="0.0263%" height="15" fill="rgb(252,35,15)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="623.50"></text></g><g><title>pa_channels_valid (1 samples, 0.03%)</title><rect x="95.4450%" y="597" width="0.0263%" height="15" fill="rgb(248,181,18)" fg:x="3625" fg:w="1"/><text x="95.6950%" y="607.50"></text></g><g><title>[libpulse.so.0.24.1] (13 samples, 0.34%)</title><rect x="95.1553%" y="709" width="0.3423%" height="15" fill="rgb(233,39,42)" fg:x="3614" fg:w="13"/><text x="95.4053%" y="719.50"></text></g><g><title>pa_pdispatch_run (12 samples, 0.32%)</title><rect x="95.1817%" y="693" width="0.3160%" height="15" fill="rgb(238,110,33)" fg:x="3615" fg:w="12"/><text x="95.4317%" y="703.50"></text></g><g><title>pa_tagstruct_free (1 samples, 0.03%)</title><rect x="95.4713%" y="677" width="0.0263%" height="15" fill="rgb(233,195,10)" fg:x="3626" fg:w="1"/><text x="95.7213%" y="687.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="95.4713%" y="661" width="0.0263%" height="15" fill="rgb(254,105,3)" fg:x="3626" fg:w="1"/><text x="95.7213%" y="671.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.05%)</title><rect x="95.4976%" y="709" width="0.0527%" height="15" fill="rgb(221,225,9)" fg:x="3627" fg:w="2"/><text x="95.7476%" y="719.50"></text></g><g><title>pa_flist_push (2 samples, 0.05%)</title><rect x="95.4976%" y="693" width="0.0527%" height="15" fill="rgb(224,227,45)" fg:x="3627" fg:w="2"/><text x="95.7476%" y="703.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="95.5240%" y="677" width="0.0263%" height="15" fill="rgb(229,198,43)" fg:x="3628" fg:w="1"/><text x="95.7740%" y="687.50"></text></g><g><title>pa_context_unref (1 samples, 0.03%)</title><rect x="95.5503%" y="709" width="0.0263%" height="15" fill="rgb(206,209,35)" fg:x="3629" fg:w="1"/><text x="95.8003%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (7 samples, 0.18%)</title><rect x="95.6029%" y="693" width="0.1843%" height="15" fill="rgb(245,195,53)" fg:x="3631" fg:w="7"/><text x="95.8529%" y="703.50"></text></g><g><title>[libpulse.so.0.24.1] (6 samples, 0.16%)</title><rect x="95.6293%" y="677" width="0.1580%" height="15" fill="rgb(240,92,26)" fg:x="3632" fg:w="6"/><text x="95.8793%" y="687.50"></text></g><g><title>pa_xmalloc0 (6 samples, 0.16%)</title><rect x="95.6293%" y="661" width="0.1580%" height="15" fill="rgb(207,40,23)" fg:x="3632" fg:w="6"/><text x="95.8793%" y="671.50"></text></g><g><title>__libc_calloc (6 samples, 0.16%)</title><rect x="95.6293%" y="645" width="0.1580%" height="15" fill="rgb(223,111,35)" fg:x="3632" fg:w="6"/><text x="95.8793%" y="655.50"></text></g><g><title>pa_iochannel_read_with_ancil_data (9 samples, 0.24%)</title><rect x="95.5766%" y="709" width="0.2370%" height="15" fill="rgb(229,147,28)" fg:x="3630" fg:w="9"/><text x="95.8266%" y="719.50"></text></g><g><title>recvmsg (1 samples, 0.03%)</title><rect x="95.7873%" y="693" width="0.0263%" height="15" fill="rgb(211,29,28)" fg:x="3638" fg:w="1"/><text x="96.0373%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="95.7873%" y="677" width="0.0263%" height="15" fill="rgb(228,72,33)" fg:x="3638" fg:w="1"/><text x="96.0373%" y="687.50"></text></g><g><title>pa_iochannel_write (2 samples, 0.05%)</title><rect x="95.8136%" y="709" width="0.0527%" height="15" fill="rgb(205,214,31)" fg:x="3639" fg:w="2"/><text x="96.0636%" y="719.50"></text></g><g><title>pa_write (2 samples, 0.05%)</title><rect x="95.8136%" y="693" width="0.0527%" height="15" fill="rgb(224,111,15)" fg:x="3639" fg:w="2"/><text x="96.0636%" y="703.50"></text></g><g><title>__send (2 samples, 0.05%)</title><rect x="95.8136%" y="677" width="0.0527%" height="15" fill="rgb(253,21,26)" fg:x="3639" fg:w="2"/><text x="96.0636%" y="687.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="95.8136%" y="661" width="0.0527%" height="15" fill="rgb(245,139,43)" fg:x="3639" fg:w="2"/><text x="96.0636%" y="671.50"></text></g><g><title>pa_mainloop_wakeup (1 samples, 0.03%)</title><rect x="95.8662%" y="709" width="0.0263%" height="15" fill="rgb(252,170,7)" fg:x="3641" fg:w="1"/><text x="96.1162%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="95.8662%" y="693" width="0.0263%" height="15" fill="rgb(231,118,14)" fg:x="3641" fg:w="1"/><text x="96.1162%" y="703.50"></text></g><g><title>pa_memblock_acquire_chunk (2 samples, 0.05%)</title><rect x="95.8926%" y="709" width="0.0527%" height="15" fill="rgb(238,83,0)" fg:x="3642" fg:w="2"/><text x="96.1426%" y="719.50"></text></g><g><title>pa_memchunk_reset (1 samples, 0.03%)</title><rect x="95.9452%" y="709" width="0.0263%" height="15" fill="rgb(221,39,39)" fg:x="3644" fg:w="1"/><text x="96.1952%" y="719.50"></text></g><g><title>pa_flist_pop (2 samples, 0.05%)</title><rect x="95.9979%" y="693" width="0.0527%" height="15" fill="rgb(222,119,46)" fg:x="3646" fg:w="2"/><text x="96.2479%" y="703.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.05%)</title><rect x="95.9979%" y="677" width="0.0527%" height="15" fill="rgb(222,165,49)" fg:x="3646" fg:w="2"/><text x="96.2479%" y="687.50"></text></g><g><title>pa_packet_new (4 samples, 0.11%)</title><rect x="95.9716%" y="709" width="0.1053%" height="15" fill="rgb(219,113,52)" fg:x="3645" fg:w="4"/><text x="96.2216%" y="719.50"></text></g><g><title>pa_run_once (1 samples, 0.03%)</title><rect x="96.0506%" y="693" width="0.0263%" height="15" fill="rgb(214,7,15)" fg:x="3648" fg:w="1"/><text x="96.3006%" y="703.50"></text></g><g><title>pa_once_begin (1 samples, 0.03%)</title><rect x="96.0506%" y="677" width="0.0263%" height="15" fill="rgb(235,32,4)" fg:x="3648" fg:w="1"/><text x="96.3006%" y="687.50"></text></g><g><title>pa_packet_unref (1 samples, 0.03%)</title><rect x="96.0769%" y="709" width="0.0263%" height="15" fill="rgb(238,90,54)" fg:x="3649" fg:w="1"/><text x="96.3269%" y="719.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="96.0769%" y="693" width="0.0263%" height="15" fill="rgb(213,208,19)" fg:x="3649" fg:w="1"/><text x="96.3269%" y="703.50"></text></g><g><title>[libpulsecommon-15.99.so] (45 samples, 1.18%)</title><rect x="94.9974%" y="725" width="1.1848%" height="15" fill="rgb(233,156,4)" fg:x="3608" fg:w="45"/><text x="95.2474%" y="735.50"></text></g><g><title>pa_queue_pop (3 samples, 0.08%)</title><rect x="96.1032%" y="709" width="0.0790%" height="15" fill="rgb(207,194,5)" fg:x="3650" fg:w="3"/><text x="96.3532%" y="719.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="96.1559%" y="693" width="0.0263%" height="15" fill="rgb(206,111,30)" fg:x="3652" fg:w="1"/><text x="96.4059%" y="703.50"></text></g><g><title>[libpulsecommon-15.99.so] (49 samples, 1.29%)</title><rect x="94.9184%" y="741" width="1.2902%" height="15" fill="rgb(243,70,54)" fg:x="3605" fg:w="49"/><text x="95.1684%" y="751.50"></text></g><g><title>pa_pstream_ref (1 samples, 0.03%)</title><rect x="96.1822%" y="725" width="0.0263%" height="15" fill="rgb(242,28,8)" fg:x="3653" fg:w="1"/><text x="96.4322%" y="735.50"></text></g><g><title>pa_mainloop_dispatch (56 samples, 1.47%)</title><rect x="94.8394%" y="757" width="1.4745%" height="15" fill="rgb(219,106,18)" fg:x="3602" fg:w="56"/><text x="95.0894%" y="767.50"></text></g><g><title>pa_rtclock_now (4 samples, 0.11%)</title><rect x="96.2085%" y="741" width="0.1053%" height="15" fill="rgb(244,222,10)" fg:x="3654" fg:w="4"/><text x="96.4585%" y="751.50"></text></g><g><title>pa_rtclock_get (4 samples, 0.11%)</title><rect x="96.2085%" y="725" width="0.1053%" height="15" fill="rgb(236,179,52)" fg:x="3654" fg:w="4"/><text x="96.4585%" y="735.50"></text></g><g><title>clock_gettime (4 samples, 0.11%)</title><rect x="96.2085%" y="709" width="0.1053%" height="15" fill="rgb(213,23,39)" fg:x="3654" fg:w="4"/><text x="96.4585%" y="719.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="96.2612%" y="693" width="0.0527%" height="15" fill="rgb(238,48,10)" fg:x="3656" fg:w="2"/><text x="96.5112%" y="703.50"></text></g><g><title>[libpulse.so.0.24.1] (18 samples, 0.47%)</title><rect x="96.6035%" y="725" width="0.4739%" height="15" fill="rgb(251,196,23)" fg:x="3669" fg:w="18"/><text x="96.8535%" y="735.50"></text></g><g><title>__poll (20 samples, 0.53%)</title><rect x="97.0774%" y="725" width="0.5266%" height="15" fill="rgb(250,152,24)" fg:x="3687" fg:w="20"/><text x="97.3274%" y="735.50"></text></g><g><title>[libc.so.6] (7 samples, 0.18%)</title><rect x="97.4197%" y="709" width="0.1843%" height="15" fill="rgb(209,150,17)" fg:x="3700" fg:w="7"/><text x="97.6697%" y="719.50"></text></g><g><title>__poll_chk (1 samples, 0.03%)</title><rect x="97.6040%" y="725" width="0.0263%" height="15" fill="rgb(234,202,34)" fg:x="3707" fg:w="1"/><text x="97.8540%" y="735.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="97.6567%" y="709" width="0.1053%" height="15" fill="rgb(253,148,53)" fg:x="3709" fg:w="4"/><text x="97.9067%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (6 samples, 0.16%)</title><rect x="97.7620%" y="709" width="0.1580%" height="15" fill="rgb(218,129,16)" fg:x="3713" fg:w="6"/><text x="98.0120%" y="719.50"></text></g><g><title>pa_mutex_lock (14 samples, 0.37%)</title><rect x="97.6303%" y="725" width="0.3686%" height="15" fill="rgb(216,85,19)" fg:x="3708" fg:w="14"/><text x="97.8803%" y="735.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.08%)</title><rect x="97.9200%" y="709" width="0.0790%" height="15" fill="rgb(235,228,7)" fg:x="3719" fg:w="3"/><text x="98.1700%" y="719.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="97.9989%" y="709" width="0.1053%" height="15" fill="rgb(245,175,0)" fg:x="3722" fg:w="4"/><text x="98.2489%" y="719.50"></text></g><g><title>pa_mainloop_poll (69 samples, 1.82%)</title><rect x="96.3138%" y="757" width="1.8167%" height="15" fill="rgb(208,168,36)" fg:x="3658" fg:w="69"/><text x="96.5638%" y="767.50">p..</text></g><g><title>[libpulse.so.0.24.1] (69 samples, 1.82%)</title><rect x="96.3138%" y="741" width="1.8167%" height="15" fill="rgb(246,171,24)" fg:x="3658" fg:w="69"/><text x="96.5638%" y="751.50">[..</text></g><g><title>pa_mutex_unlock (5 samples, 0.13%)</title><rect x="97.9989%" y="725" width="0.1316%" height="15" fill="rgb(215,142,24)" fg:x="3722" fg:w="5"/><text x="98.2489%" y="735.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="98.1043%" y="709" width="0.0263%" height="15" fill="rgb(250,187,7)" fg:x="3726" fg:w="1"/><text x="98.3543%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="98.2359%" y="709" width="0.0263%" height="15" fill="rgb(228,66,33)" fg:x="3731" fg:w="1"/><text x="98.4859%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (7 samples, 0.18%)</title><rect x="98.1306%" y="741" width="0.1843%" height="15" fill="rgb(234,215,21)" fg:x="3727" fg:w="7"/><text x="98.3806%" y="751.50"></text></g><g><title>pa_xfree (3 samples, 0.08%)</title><rect x="98.2359%" y="725" width="0.0790%" height="15" fill="rgb(222,191,20)" fg:x="3731" fg:w="3"/><text x="98.4859%" y="735.50"></text></g><g><title>__errno_location (2 samples, 0.05%)</title><rect x="98.2622%" y="709" width="0.0527%" height="15" fill="rgb(245,79,54)" fg:x="3732" fg:w="2"/><text x="98.5122%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="98.3412%" y="725" width="0.0263%" height="15" fill="rgb(240,10,37)" fg:x="3735" fg:w="1"/><text x="98.5912%" y="735.50"></text></g><g><title>pa_read (5 samples, 0.13%)</title><rect x="98.3149%" y="741" width="0.1316%" height="15" fill="rgb(214,192,32)" fg:x="3734" fg:w="5"/><text x="98.5649%" y="751.50"></text></g><g><title>read (3 samples, 0.08%)</title><rect x="98.3676%" y="725" width="0.0790%" height="15" fill="rgb(209,36,54)" fg:x="3736" fg:w="3"/><text x="98.6176%" y="735.50"></text></g><g><title>pa_rtclock_get (4 samples, 0.11%)</title><rect x="98.4466%" y="725" width="0.1053%" height="15" fill="rgb(220,10,11)" fg:x="3739" fg:w="4"/><text x="98.6966%" y="735.50"></text></g><g><title>clock_gettime (3 samples, 0.08%)</title><rect x="98.4729%" y="709" width="0.0790%" height="15" fill="rgb(221,106,17)" fg:x="3740" fg:w="3"/><text x="98.7229%" y="719.50"></text></g><g><title>[[vdso]] (1 samples, 0.03%)</title><rect x="98.5255%" y="693" width="0.0263%" height="15" fill="rgb(251,142,44)" fg:x="3742" fg:w="1"/><text x="98.7755%" y="703.50"></text></g><g><title>[[vdso]] (1 samples, 0.03%)</title><rect x="98.5255%" y="677" width="0.0263%" height="15" fill="rgb(238,13,15)" fg:x="3742" fg:w="1"/><text x="98.7755%" y="687.50"></text></g><g><title>[libpulse.so.0.24.1] (142 samples, 3.74%)</title><rect x="94.8394%" y="805" width="3.7388%" height="15" fill="rgb(208,107,27)" fg:x="3602" fg:w="142"/><text x="95.0894%" y="815.50">[lib..</text></g><g><title>pa_mainloop_run (142 samples, 3.74%)</title><rect x="94.8394%" y="789" width="3.7388%" height="15" fill="rgb(205,136,37)" fg:x="3602" fg:w="142"/><text x="95.0894%" y="799.50">pa_m..</text></g><g><title>pa_mainloop_iterate (142 samples, 3.74%)</title><rect x="94.8394%" y="773" width="3.7388%" height="15" fill="rgb(250,205,27)" fg:x="3602" fg:w="142"/><text x="95.0894%" y="783.50">pa_m..</text></g><g><title>pa_mainloop_prepare (17 samples, 0.45%)</title><rect x="98.1306%" y="757" width="0.4476%" height="15" fill="rgb(210,80,43)" fg:x="3727" fg:w="17"/><text x="98.3806%" y="767.50"></text></g><g><title>pa_rtclock_now (5 samples, 0.13%)</title><rect x="98.4466%" y="741" width="0.1316%" height="15" fill="rgb(247,160,36)" fg:x="3739" fg:w="5"/><text x="98.6966%" y="751.50"></text></g><g><title>pa_timeval_load (1 samples, 0.03%)</title><rect x="98.5519%" y="725" width="0.0263%" height="15" fill="rgb(234,13,49)" fg:x="3743" fg:w="1"/><text x="98.8019%" y="735.50"></text></g><g><title>[libc.so.6] (143 samples, 3.77%)</title><rect x="94.8394%" y="853" width="3.7651%" height="15" fill="rgb(234,122,0)" fg:x="3602" fg:w="143"/><text x="95.0894%" y="863.50">[lib..</text></g><g><title>[libc.so.6] (143 samples, 3.77%)</title><rect x="94.8394%" y="837" width="3.7651%" height="15" fill="rgb(207,146,38)" fg:x="3602" fg:w="143"/><text x="95.0894%" y="847.50">[lib..</text></g><g><title>[libpulsecommon-15.99.so] (143 samples, 3.77%)</title><rect x="94.8394%" y="821" width="3.7651%" height="15" fill="rgb(207,177,25)" fg:x="3602" fg:w="143"/><text x="95.0894%" y="831.50">[lib..</text></g><g><title>pa_tls_set (1 samples, 0.03%)</title><rect x="98.5782%" y="805" width="0.0263%" height="15" fill="rgb(211,178,42)" fg:x="3744" fg:w="1"/><text x="98.8282%" y="815.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="98.5782%" y="789" width="0.0263%" height="15" fill="rgb(230,69,54)" fg:x="3744" fg:w="1"/><text x="98.8282%" y="799.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="98.6045%" y="853" width="0.0263%" height="15" fill="rgb(214,135,41)" fg:x="3745" fg:w="1"/><text x="98.8545%" y="863.50"></text></g><g><title>__libc_calloc (1 samples, 0.03%)</title><rect x="98.6045%" y="837" width="0.0263%" height="15" fill="rgb(237,67,25)" fg:x="3745" fg:w="1"/><text x="98.8545%" y="847.50"></text></g><g><title>threaded-ml (152 samples, 4.00%)</title><rect x="94.7077%" y="869" width="4.0021%" height="15" fill="rgb(222,189,50)" fg:x="3597" fg:w="152"/><text x="94.9577%" y="879.50">thre..</text></g><g><title>[unknown] (3 samples, 0.08%)</title><rect x="98.6309%" y="853" width="0.0790%" height="15" fill="rgb(245,148,34)" fg:x="3746" fg:w="3"/><text x="98.8809%" y="863.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="98.6835%" y="837" width="0.0263%" height="15" fill="rgb(222,29,6)" fg:x="3748" fg:w="1"/><text x="98.9335%" y="847.50"></text></g><g><title>std::io::stdio::set_output_capture (1 samples, 0.03%)</title><rect x="98.7098%" y="741" width="0.0263%" height="15" fill="rgb(221,189,43)" fg:x="3749" fg:w="1"/><text x="98.9598%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.03%)</title><rect x="98.7098%" y="725" width="0.0263%" height="15" fill="rgb(207,36,27)" fg:x="3749" fg:w="1"/><text x="98.9598%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="98.7098%" y="709" width="0.0263%" height="15" fill="rgb(217,90,24)" fg:x="3749" fg:w="1"/><text x="98.9598%" y="719.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (4 samples, 0.11%)</title><rect x="98.7625%" y="597" width="0.1053%" height="15" fill="rgb(224,66,35)" fg:x="3751" fg:w="4"/><text x="99.0125%" y="607.50"></text></g><g><title>core::ptr::read (4 samples, 0.11%)</title><rect x="98.7625%" y="581" width="0.1053%" height="15" fill="rgb(221,13,50)" fg:x="3751" fg:w="4"/><text x="99.0125%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (6 samples, 0.16%)</title><rect x="98.7625%" y="613" width="0.1580%" height="15" fill="rgb(236,68,49)" fg:x="3751" fg:w="6"/><text x="99.0125%" y="623.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (2 samples, 0.05%)</title><rect x="98.8678%" y="597" width="0.0527%" height="15" fill="rgb(229,146,28)" fg:x="3755" fg:w="2"/><text x="99.1178%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (2 samples, 0.05%)</title><rect x="98.9205%" y="533" width="0.0527%" height="15" fill="rgb(225,31,38)" fg:x="3757" fg:w="2"/><text x="99.1705%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.05%)</title><rect x="98.9205%" y="517" width="0.0527%" height="15" fill="rgb(250,208,3)" fg:x="3757" fg:w="2"/><text x="99.1705%" y="527.50"></text></g><g><title>core::mem::drop (3 samples, 0.08%)</title><rect x="98.9205%" y="613" width="0.0790%" height="15" fill="rgb(246,54,23)" fg:x="3757" fg:w="3"/><text x="99.1705%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 0.08%)</title><rect x="98.9205%" y="597" width="0.0790%" height="15" fill="rgb(243,76,11)" fg:x="3757" fg:w="3"/><text x="99.1705%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (3 samples, 0.08%)</title><rect x="98.9205%" y="581" width="0.0790%" height="15" fill="rgb(245,21,50)" fg:x="3757" fg:w="3"/><text x="99.1705%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="98.9205%" y="565" width="0.0790%" height="15" fill="rgb(228,9,43)" fg:x="3757" fg:w="3"/><text x="99.1705%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.08%)</title><rect x="98.9205%" y="549" width="0.0790%" height="15" fill="rgb(208,100,47)" fg:x="3757" fg:w="3"/><text x="99.1705%" y="559.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.03%)</title><rect x="98.9731%" y="533" width="0.0263%" height="15" fill="rgb(232,26,8)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (1 samples, 0.03%)</title><rect x="98.9731%" y="517" width="0.0263%" height="15" fill="rgb(216,166,38)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.03%)</title><rect x="98.9731%" y="501" width="0.0263%" height="15" fill="rgb(251,202,51)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="511.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.03%)</title><rect x="98.9731%" y="485" width="0.0263%" height="15" fill="rgb(254,216,34)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.03%)</title><rect x="98.9731%" y="469" width="0.0263%" height="15" fill="rgb(251,32,27)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.03%)</title><rect x="98.9731%" y="453" width="0.0263%" height="15" fill="rgb(208,127,28)" fg:x="3759" fg:w="1"/><text x="99.2231%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (2 samples, 0.05%)</title><rect x="99.1048%" y="549" width="0.0527%" height="15" fill="rgb(224,137,22)" fg:x="3764" fg:w="2"/><text x="99.3548%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.05%)</title><rect x="99.1048%" y="533" width="0.0527%" height="15" fill="rgb(254,70,32)" fg:x="3764" fg:w="2"/><text x="99.3548%" y="543.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="99.1838%" y="517" width="0.0263%" height="15" fill="rgb(229,75,37)" fg:x="3767" fg:w="1"/><text x="99.4338%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.03%)</title><rect x="99.2101%" y="485" width="0.0263%" height="15" fill="rgb(252,64,23)" fg:x="3768" fg:w="1"/><text x="99.4601%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="99.2101%" y="469" width="0.0263%" height="15" fill="rgb(232,162,48)" fg:x="3768" fg:w="1"/><text x="99.4601%" y="479.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.05%)</title><rect x="99.2101%" y="501" width="0.0527%" height="15" fill="rgb(246,160,12)" fg:x="3768" fg:w="2"/><text x="99.4601%" y="511.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1 samples, 0.03%)</title><rect x="99.2364%" y="485" width="0.0263%" height="15" fill="rgb(247,166,0)" fg:x="3769" fg:w="1"/><text x="99.4864%" y="495.50"></text></g><g><title>syscall (1 samples, 0.03%)</title><rect x="99.2364%" y="469" width="0.0263%" height="15" fill="rgb(249,219,21)" fg:x="3769" fg:w="1"/><text x="99.4864%" y="479.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (1 samples, 0.03%)</title><rect x="99.2628%" y="501" width="0.0263%" height="15" fill="rgb(205,209,3)" fg:x="3770" fg:w="1"/><text x="99.5128%" y="511.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (1 samples, 0.03%)</title><rect x="99.2628%" y="485" width="0.0263%" height="15" fill="rgb(243,44,1)" fg:x="3770" fg:w="1"/><text x="99.5128%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.03%)</title><rect x="99.2628%" y="469" width="0.0263%" height="15" fill="rgb(206,159,16)" fg:x="3770" fg:w="1"/><text x="99.5128%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.03%)</title><rect x="99.2628%" y="453" width="0.0263%" height="15" fill="rgb(244,77,30)" fg:x="3770" fg:w="1"/><text x="99.5128%" y="463.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (12 samples, 0.32%)</title><rect x="98.9995%" y="613" width="0.3160%" height="15" fill="rgb(218,69,12)" fg:x="3760" fg:w="12"/><text x="99.2495%" y="623.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (12 samples, 0.32%)</title><rect x="98.9995%" y="597" width="0.3160%" height="15" fill="rgb(212,87,7)" fg:x="3760" fg:w="12"/><text x="99.2495%" y="607.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (12 samples, 0.32%)</title><rect x="98.9995%" y="581" width="0.3160%" height="15" fill="rgb(245,114,25)" fg:x="3760" fg:w="12"/><text x="99.2495%" y="591.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (11 samples, 0.29%)</title><rect x="99.0258%" y="565" width="0.2896%" height="15" fill="rgb(210,61,42)" fg:x="3761" fg:w="11"/><text x="99.2758%" y="575.50"></text></g><g><title>parking_lot_core::parking_lot::park (6 samples, 0.16%)</title><rect x="99.1575%" y="549" width="0.1580%" height="15" fill="rgb(211,52,33)" fg:x="3766" fg:w="6"/><text x="99.4075%" y="559.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (6 samples, 0.16%)</title><rect x="99.1575%" y="533" width="0.1580%" height="15" fill="rgb(234,58,33)" fg:x="3766" fg:w="6"/><text x="99.4075%" y="543.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (4 samples, 0.11%)</title><rect x="99.2101%" y="517" width="0.1053%" height="15" fill="rgb(220,115,36)" fg:x="3768" fg:w="4"/><text x="99.4601%" y="527.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (1 samples, 0.03%)</title><rect x="99.2891%" y="501" width="0.0263%" height="15" fill="rgb(243,153,54)" fg:x="3771" fg:w="1"/><text x="99.5391%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.03%)</title><rect x="99.2891%" y="485" width="0.0263%" height="15" fill="rgb(251,47,18)" fg:x="3771" fg:w="1"/><text x="99.5391%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.03%)</title><rect x="99.2891%" y="469" width="0.0263%" height="15" fill="rgb(242,102,42)" fg:x="3771" fg:w="1"/><text x="99.5391%" y="479.50"></text></g><g><title>tokio::runtime::blocking::pool::SpawnerMetrics::dec_queue_depth (1 samples, 0.03%)</title><rect x="99.3154%" y="613" width="0.0263%" height="15" fill="rgb(234,31,38)" fg:x="3772" fg:w="1"/><text x="99.5654%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.03%)</title><rect x="99.3154%" y="597" width="0.0263%" height="15" fill="rgb(221,117,51)" fg:x="3772" fg:w="1"/><text x="99.5654%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.03%)</title><rect x="99.3154%" y="581" width="0.0263%" height="15" fill="rgb(212,20,18)" fg:x="3772" fg:w="1"/><text x="99.5654%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="99.3681%" y="373" width="0.0263%" height="15" fill="rgb(245,133,36)" fg:x="3774" fg:w="1"/><text x="99.6181%" y="383.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="99.3681%" y="357" width="0.0263%" height="15" fill="rgb(212,6,19)" fg:x="3774" fg:w="1"/><text x="99.6181%" y="367.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="99.3681%" y="341" width="0.0263%" height="15" fill="rgb(218,1,36)" fg:x="3774" fg:w="1"/><text x="99.6181%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.03%)</title><rect x="99.3944%" y="277" width="0.0263%" height="15" fill="rgb(246,84,54)" fg:x="3775" fg:w="1"/><text x="99.6444%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.03%)</title><rect x="99.3944%" y="261" width="0.0263%" height="15" fill="rgb(242,110,6)" fg:x="3775" fg:w="1"/><text x="99.6444%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (1 samples, 0.03%)</title><rect x="99.3944%" y="245" width="0.0263%" height="15" fill="rgb(214,47,5)" fg:x="3775" fg:w="1"/><text x="99.6444%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.03%)</title><rect x="99.3944%" y="229" width="0.0263%" height="15" fill="rgb(218,159,25)" fg:x="3775" fg:w="1"/><text x="99.6444%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.03%)</title><rect x="99.3944%" y="213" width="0.0263%" height="15" fill="rgb(215,211,28)" fg:x="3775" fg:w="1"/><text x="99.6444%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (2 samples, 0.05%)</title><rect x="99.3944%" y="293" width="0.0527%" height="15" fill="rgb(238,59,32)" fg:x="3775" fg:w="2"/><text x="99.6444%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (1 samples, 0.03%)</title><rect x="99.4207%" y="277" width="0.0263%" height="15" fill="rgb(226,82,3)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.03%)</title><rect x="99.4207%" y="261" width="0.0263%" height="15" fill="rgb(240,164,32)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.4207%" y="245" width="0.0263%" height="15" fill="rgb(232,46,7)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.4207%" y="229" width="0.0263%" height="15" fill="rgb(229,129,53)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="239.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.4207%" y="213" width="0.0263%" height="15" fill="rgb(234,188,29)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="223.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.03%)</title><rect x="99.4207%" y="197" width="0.0263%" height="15" fill="rgb(246,141,4)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.03%)</title><rect x="99.4207%" y="181" width="0.0263%" height="15" fill="rgb(229,23,39)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.03%)</title><rect x="99.4207%" y="165" width="0.0263%" height="15" fill="rgb(206,12,3)" fg:x="3776" fg:w="1"/><text x="99.6707%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.11%)</title><rect x="99.3681%" y="533" width="0.1053%" height="15" fill="rgb(252,226,20)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="543.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.11%)</title><rect x="99.3681%" y="517" width="0.1053%" height="15" fill="rgb(216,123,35)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="527.50"></text></g><g><title>std::panicking::try (4 samples, 0.11%)</title><rect x="99.3681%" y="501" width="0.1053%" height="15" fill="rgb(212,68,40)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="511.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.11%)</title><rect x="99.3681%" y="485" width="0.1053%" height="15" fill="rgb(254,125,32)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="495.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.11%)</title><rect x="99.3681%" y="469" width="0.1053%" height="15" fill="rgb(253,97,22)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (4 samples, 0.11%)</title><rect x="99.3681%" y="453" width="0.1053%" height="15" fill="rgb(241,101,14)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="463.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.11%)</title><rect x="99.3681%" y="437" width="0.1053%" height="15" fill="rgb(238,103,29)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="447.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.11%)</title><rect x="99.3681%" y="421" width="0.1053%" height="15" fill="rgb(233,195,47)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (4 samples, 0.11%)</title><rect x="99.3681%" y="405" width="0.1053%" height="15" fill="rgb(246,218,30)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="415.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.11%)</title><rect x="99.3681%" y="389" width="0.1053%" height="15" fill="rgb(219,145,47)" fg:x="3774" fg:w="4"/><text x="99.6181%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (3 samples, 0.08%)</title><rect x="99.3944%" y="373" width="0.0790%" height="15" fill="rgb(243,12,26)" fg:x="3775" fg:w="3"/><text x="99.6444%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3 samples, 0.08%)</title><rect x="99.3944%" y="357" width="0.0790%" height="15" fill="rgb(214,87,16)" fg:x="3775" fg:w="3"/><text x="99.6444%" y="367.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3 samples, 0.08%)</title><rect x="99.3944%" y="341" width="0.0790%" height="15" fill="rgb(208,99,42)" fg:x="3775" fg:w="3"/><text x="99.6444%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (3 samples, 0.08%)</title><rect x="99.3944%" y="325" width="0.0790%" height="15" fill="rgb(253,99,2)" fg:x="3775" fg:w="3"/><text x="99.6444%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3 samples, 0.08%)</title><rect x="99.3944%" y="309" width="0.0790%" height="15" fill="rgb(220,168,23)" fg:x="3775" fg:w="3"/><text x="99.6444%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (1 samples, 0.03%)</title><rect x="99.4471%" y="293" width="0.0263%" height="15" fill="rgb(242,38,24)" fg:x="3777" fg:w="1"/><text x="99.6971%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.03%)</title><rect x="99.4471%" y="277" width="0.0263%" height="15" fill="rgb(225,182,9)" fg:x="3777" fg:w="1"/><text x="99.6971%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="99.4471%" y="261" width="0.0263%" height="15" fill="rgb(243,178,37)" fg:x="3777" fg:w="1"/><text x="99.6971%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.03%)</title><rect x="99.4471%" y="245" width="0.0263%" height="15" fill="rgb(232,139,19)" fg:x="3777" fg:w="1"/><text x="99.6971%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="99.4471%" y="229" width="0.0263%" height="15" fill="rgb(225,201,24)" fg:x="3777" fg:w="1"/><text x="99.6971%" y="239.50"></text></g><g><title>std::panic::catch_unwind (29 samples, 0.76%)</title><rect x="98.7362%" y="741" width="0.7636%" height="15" fill="rgb(221,47,46)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="751.50"></text></g><g><title>std::panicking::try (29 samples, 0.76%)</title><rect x="98.7362%" y="725" width="0.7636%" height="15" fill="rgb(249,23,13)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="735.50"></text></g><g><title>std::panicking::try::do_call (29 samples, 0.76%)</title><rect x="98.7362%" y="709" width="0.7636%" height="15" fill="rgb(219,9,5)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (29 samples, 0.76%)</title><rect x="98.7362%" y="693" width="0.7636%" height="15" fill="rgb(254,171,16)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="703.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (29 samples, 0.76%)</title><rect x="98.7362%" y="677" width="0.7636%" height="15" fill="rgb(230,171,20)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29 samples, 0.76%)</title><rect x="98.7362%" y="661" width="0.7636%" height="15" fill="rgb(210,71,41)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="671.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (29 samples, 0.76%)</title><rect x="98.7362%" y="645" width="0.7636%" height="15" fill="rgb(206,173,20)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="655.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (29 samples, 0.76%)</title><rect x="98.7362%" y="629" width="0.7636%" height="15" fill="rgb(233,88,34)" fg:x="3750" fg:w="29"/><text x="98.9862%" y="639.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (6 samples, 0.16%)</title><rect x="99.3418%" y="613" width="0.1580%" height="15" fill="rgb(223,209,46)" fg:x="3773" fg:w="6"/><text x="99.5918%" y="623.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (6 samples, 0.16%)</title><rect x="99.3418%" y="597" width="0.1580%" height="15" fill="rgb(250,43,18)" fg:x="3773" fg:w="6"/><text x="99.5918%" y="607.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (6 samples, 0.16%)</title><rect x="99.3418%" y="581" width="0.1580%" height="15" fill="rgb(208,13,10)" fg:x="3773" fg:w="6"/><text x="99.5918%" y="591.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (5 samples, 0.13%)</title><rect x="99.3681%" y="565" width="0.1316%" height="15" fill="rgb(212,200,36)" fg:x="3774" fg:w="5"/><text x="99.6181%" y="575.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (5 samples, 0.13%)</title><rect x="99.3681%" y="549" width="0.1316%" height="15" fill="rgb(225,90,30)" fg:x="3774" fg:w="5"/><text x="99.6181%" y="559.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.03%)</title><rect x="99.4734%" y="533" width="0.0263%" height="15" fill="rgb(236,182,39)" fg:x="3778" fg:w="1"/><text x="99.7234%" y="543.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (1 samples, 0.03%)</title><rect x="99.4734%" y="517" width="0.0263%" height="15" fill="rgb(212,144,35)" fg:x="3778" fg:w="1"/><text x="99.7234%" y="527.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (1 samples, 0.03%)</title><rect x="99.4734%" y="501" width="0.0263%" height="15" fill="rgb(228,63,44)" fg:x="3778" fg:w="1"/><text x="99.7234%" y="511.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::unset_notified (1 samples, 0.03%)</title><rect x="99.4734%" y="485" width="0.0263%" height="15" fill="rgb(228,109,6)" fg:x="3778" fg:w="1"/><text x="99.7234%" y="495.50"></text></g><g><title>std::sys::unix::thread::guard::current (5 samples, 0.13%)</title><rect x="99.4997%" y="741" width="0.1316%" height="15" fill="rgb(238,117,24)" fg:x="3779" fg:w="5"/><text x="99.7497%" y="751.50"></text></g><g><title>pthread_getattr_np (5 samples, 0.13%)</title><rect x="99.4997%" y="725" width="0.1316%" height="15" fill="rgb(242,26,26)" fg:x="3779" fg:w="5"/><text x="99.7497%" y="735.50"></text></g><g><title>malloc (5 samples, 0.13%)</title><rect x="99.4997%" y="709" width="0.1316%" height="15" fill="rgb(221,92,48)" fg:x="3779" fg:w="5"/><text x="99.7497%" y="719.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="99.5261%" y="693" width="0.1053%" height="15" fill="rgb(209,209,32)" fg:x="3780" fg:w="4"/><text x="99.7761%" y="703.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="99.5261%" y="677" width="0.1053%" height="15" fill="rgb(221,70,22)" fg:x="3780" fg:w="4"/><text x="99.7761%" y="687.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="99.5524%" y="661" width="0.0790%" height="15" fill="rgb(248,145,5)" fg:x="3781" fg:w="3"/><text x="99.8024%" y="671.50"></text></g><g><title>__mprotect (1 samples, 0.03%)</title><rect x="99.6051%" y="645" width="0.0263%" height="15" fill="rgb(226,116,26)" fg:x="3783" fg:w="1"/><text x="99.8551%" y="655.50"></text></g><g><title>[libc.so.6] (36 samples, 0.95%)</title><rect x="98.7098%" y="853" width="0.9479%" height="15" fill="rgb(244,5,17)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="863.50"></text></g><g><title>[libc.so.6] (36 samples, 0.95%)</title><rect x="98.7098%" y="837" width="0.9479%" height="15" fill="rgb(252,159,33)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="847.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36 samples, 0.95%)</title><rect x="98.7098%" y="821" width="0.9479%" height="15" fill="rgb(206,71,0)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 0.95%)</title><rect x="98.7098%" y="805" width="0.9479%" height="15" fill="rgb(233,118,54)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="815.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 0.95%)</title><rect x="98.7098%" y="789" width="0.9479%" height="15" fill="rgb(234,83,48)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36 samples, 0.95%)</title><rect x="98.7098%" y="773" width="0.9479%" height="15" fill="rgb(228,3,54)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="783.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (36 samples, 0.95%)</title><rect x="98.7098%" y="757" width="0.9479%" height="15" fill="rgb(226,155,13)" fg:x="3749" fg:w="36"/><text x="98.9598%" y="767.50"></text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.03%)</title><rect x="99.6314%" y="741" width="0.0263%" height="15" fill="rgb(241,28,37)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="99.6314%" y="725" width="0.0263%" height="15" fill="rgb(233,93,10)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="99.6314%" y="709" width="0.0263%" height="15" fill="rgb(225,113,19)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="719.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.03%)</title><rect x="99.6314%" y="693" width="0.0263%" height="15" fill="rgb(241,2,18)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="703.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::register_dtor (1 samples, 0.03%)</title><rect x="99.6314%" y="677" width="0.0263%" height="15" fill="rgb(228,207,21)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="687.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.03%)</title><rect x="99.6314%" y="661" width="0.0263%" height="15" fill="rgb(213,211,35)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="671.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.03%)</title><rect x="99.6314%" y="645" width="0.0263%" height="15" fill="rgb(209,83,10)" fg:x="3784" fg:w="1"/><text x="99.8814%" y="655.50"></text></g><g><title>[unknown] (12 samples, 0.32%)</title><rect x="99.6577%" y="853" width="0.3160%" height="15" fill="rgb(209,164,1)" fg:x="3785" fg:w="12"/><text x="99.9077%" y="863.50"></text></g><g><title>syscall (8 samples, 0.21%)</title><rect x="99.7630%" y="837" width="0.2106%" height="15" fill="rgb(213,184,43)" fg:x="3789" fg:w="8"/><text x="100.0130%" y="847.50"></text></g><g><title>all (3,798 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,61,34)" fg:x="0" fg:w="3798"/><text x="0.2500%" y="895.50"></text></g><g><title>tokio-runtime-w (49 samples, 1.29%)</title><rect x="98.7098%" y="869" width="1.2902%" height="15" fill="rgb(235,75,3)" fg:x="3749" fg:w="49"/><text x="98.9598%" y="879.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="99.9737%" y="853" width="0.0263%" height="15" fill="rgb(220,106,47)" fg:x="3797" fg:w="1"/><text x="100.2237%" y="863.50"></text></g></svg></svg>