<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="756"><g><title>:260943 (1 samples, 0.13%)</title><rect x="0.0000%" y="501" width="0.1323%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.0000%" y="485" width="0.1323%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>:260947 (1 samples, 0.13%)</title><rect x="0.1323%" y="501" width="0.1323%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3823%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.1323%" y="485" width="0.1323%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3823%" y="495.50"></text></g><g><title>:260949 (1 samples, 0.13%)</title><rect x="0.2646%" y="501" width="0.1323%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.5146%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.2646%" y="485" width="0.1323%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.5146%" y="495.50"></text></g><g><title>:260951 (1 samples, 0.13%)</title><rect x="0.3968%" y="501" width="0.1323%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.6468%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.3968%" y="485" width="0.1323%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.6468%" y="495.50"></text></g><g><title>:260952 (1 samples, 0.13%)</title><rect x="0.5291%" y="501" width="0.1323%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.7791%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.5291%" y="485" width="0.1323%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.7791%" y="495.50"></text></g><g><title>:260953 (1 samples, 0.13%)</title><rect x="0.6614%" y="501" width="0.1323%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="0.9114%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.6614%" y="485" width="0.1323%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.9114%" y="495.50"></text></g><g><title>:260954 (1 samples, 0.13%)</title><rect x="0.7937%" y="501" width="0.1323%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="1.0437%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.7937%" y="485" width="0.1323%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.0437%" y="495.50"></text></g><g><title>:260955 (1 samples, 0.13%)</title><rect x="0.9259%" y="501" width="0.1323%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="1.1759%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="0.9259%" y="485" width="0.1323%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="1.1759%" y="495.50"></text></g><g><title>:260956 (1 samples, 0.13%)</title><rect x="1.0582%" y="501" width="0.1323%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="1.3082%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="1.0582%" y="485" width="0.1323%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="1.3082%" y="495.50"></text></g><g><title>:260957 (1 samples, 0.13%)</title><rect x="1.1905%" y="501" width="0.1323%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="1.4405%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="1.1905%" y="485" width="0.1323%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="1.4405%" y="495.50"></text></g><g><title>[anon] (1 samples, 0.13%)</title><rect x="1.3228%" y="485" width="0.1323%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="1"/><text x="1.5728%" y="495.50"></text></g><g><title>__poll (1 samples, 0.13%)</title><rect x="1.3228%" y="469" width="0.1323%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="1"/><text x="1.5728%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.4550%" y="485" width="0.1323%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.7050%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.4550%" y="469" width="0.1323%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="1"/><text x="1.7050%" y="479.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.13%)</title><rect x="1.4550%" y="453" width="0.1323%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="1.7050%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="1.4550%" y="437" width="0.1323%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="1.7050%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="1.4550%" y="421" width="0.1323%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="1.7050%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="1.4550%" y="405" width="0.1323%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="1.7050%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.13%)</title><rect x="1.4550%" y="389" width="0.1323%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="1.7050%" y="399.50"></text></g><g><title>cpal::host::alsa::output_stream_worker (1 samples, 0.13%)</title><rect x="1.4550%" y="373" width="0.1323%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="1.7050%" y="383.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.13%)</title><rect x="1.4550%" y="357" width="0.1323%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="1.7050%" y="367.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.13%)</title><rect x="1.4550%" y="341" width="0.1323%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="1.7050%" y="351.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.13%)</title><rect x="1.4550%" y="325" width="0.1323%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="1.7050%" y="335.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.13%)</title><rect x="1.4550%" y="309" width="0.1323%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="1.7050%" y="319.50"></text></g><g><title>pulse_wait_operation (1 samples, 0.13%)</title><rect x="1.4550%" y="293" width="0.1323%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="1.7050%" y="303.50"></text></g><g><title>pa_threaded_mainloop_wait (1 samples, 0.13%)</title><rect x="1.4550%" y="277" width="0.1323%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="1.7050%" y="287.50"></text></g><g><title>pthread_cond_wait (1 samples, 0.13%)</title><rect x="1.4550%" y="261" width="0.1323%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="1.7050%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.4550%" y="245" width="0.1323%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="1"/><text x="1.7050%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.4550%" y="229" width="0.1323%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1"/><text x="1.7050%" y="239.50"></text></g><g><title>:260960 (3 samples, 0.40%)</title><rect x="1.3228%" y="501" width="0.3968%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="3"/><text x="1.5728%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="1.5873%" y="485" width="0.1323%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="1"/><text x="1.8373%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.5873%" y="469" width="0.1323%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="1"/><text x="1.8373%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.13%)</title><rect x="1.7196%" y="469" width="0.1323%" height="15" fill="rgb(235,93,37)" fg:x="13" fg:w="1"/><text x="1.9696%" y="479.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (3 samples, 0.40%)</title><rect x="1.8519%" y="469" width="0.3968%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="3"/><text x="2.1019%" y="479.50"></text></g><g><title>[libc.so.6] (10 samples, 1.32%)</title><rect x="2.2487%" y="469" width="1.3228%" height="15" fill="rgb(222,207,29)" fg:x="17" fg:w="10"/><text x="2.4987%" y="479.50"></text></g><g><title>[[heap]] (15 samples, 1.98%)</title><rect x="1.7196%" y="485" width="1.9841%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="15"/><text x="1.9696%" y="495.50">[..</text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (1 samples, 0.13%)</title><rect x="3.5714%" y="469" width="0.1323%" height="15" fill="rgb(218,138,4)" fg:x="27" fg:w="1"/><text x="3.8214%" y="479.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (21 samples, 2.78%)</title><rect x="3.7037%" y="469" width="2.7778%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="21"/><text x="3.9537%" y="479.50">&lt;a..</text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.13%)</title><rect x="6.4815%" y="469" width="0.1323%" height="15" fill="rgb(239,60,40)" fg:x="49" fg:w="1"/><text x="6.7315%" y="479.50"></text></g><g><title>[libc.so.6] (10 samples, 1.32%)</title><rect x="6.6138%" y="469" width="1.3228%" height="15" fill="rgb(206,27,48)" fg:x="50" fg:w="10"/><text x="6.8638%" y="479.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="7.9365%" y="469" width="0.1323%" height="15" fill="rgb(225,35,8)" fg:x="60" fg:w="1"/><text x="8.1865%" y="479.50"></text></g><g><title>__libc_calloc (2 samples, 0.26%)</title><rect x="8.0688%" y="469" width="0.2646%" height="15" fill="rgb(250,213,24)" fg:x="61" fg:w="2"/><text x="8.3188%" y="479.50"></text></g><g><title>alsa::pcm::Status::get_trigger_htstamp (1 samples, 0.13%)</title><rect x="8.3333%" y="469" width="0.1323%" height="15" fill="rgb(247,123,22)" fg:x="63" fg:w="1"/><text x="8.5833%" y="479.50"></text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (5 samples, 0.66%)</title><rect x="8.4656%" y="469" width="0.6614%" height="15" fill="rgb(231,138,38)" fg:x="64" fg:w="5"/><text x="8.7156%" y="479.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="9.1270%" y="469" width="0.1323%" height="15" fill="rgb(231,145,46)" fg:x="69" fg:w="1"/><text x="9.3770%" y="479.50"></text></g><g><title>granular_synthesizer_cli::run::{{closure}}::{{closure}} (19 samples, 2.51%)</title><rect x="9.2593%" y="469" width="2.5132%" height="15" fill="rgb(251,118,11)" fg:x="70" fg:w="19"/><text x="9.5093%" y="479.50">gr..</text></g><g><title>pa_mainloop_wakeup (1 samples, 0.13%)</title><rect x="11.7725%" y="469" width="0.1323%" height="15" fill="rgb(217,147,25)" fg:x="89" fg:w="1"/><text x="12.0225%" y="479.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (1 samples, 0.13%)</title><rect x="11.7725%" y="453" width="0.1323%" height="15" fill="rgb(247,81,37)" fg:x="89" fg:w="1"/><text x="12.0225%" y="463.50"></text></g><g><title>pa_rtclock_get (1 samples, 0.13%)</title><rect x="11.9048%" y="469" width="0.1323%" height="15" fill="rgb(209,12,38)" fg:x="90" fg:w="1"/><text x="12.1548%" y="479.50"></text></g><g><title>pthread_cond_wait (1 samples, 0.13%)</title><rect x="12.0370%" y="469" width="0.1323%" height="15" fill="rgb(227,1,9)" fg:x="91" fg:w="1"/><text x="12.2870%" y="479.50"></text></g><g><title>[anon] (65 samples, 8.60%)</title><rect x="3.7037%" y="485" width="8.5979%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="65"/><text x="3.9537%" y="495.50">[anon]</text></g><g><title>snd_pcm_status (1 samples, 0.13%)</title><rect x="12.1693%" y="469" width="0.1323%" height="15" fill="rgb(221,10,30)" fg:x="92" fg:w="1"/><text x="12.4193%" y="479.50"></text></g><g><title>pa_stream_write (1 samples, 0.13%)</title><rect x="12.3016%" y="293" width="0.1323%" height="15" fill="rgb(210,229,1)" fg:x="93" fg:w="1"/><text x="12.5516%" y="303.50"></text></g><g><title>pa_stream_write_ext_free (1 samples, 0.13%)</title><rect x="12.3016%" y="277" width="0.1323%" height="15" fill="rgb(222,148,37)" fg:x="93" fg:w="1"/><text x="12.5516%" y="287.50"></text></g><g><title>pa_memblock_new (1 samples, 0.13%)</title><rect x="12.3016%" y="261" width="0.1323%" height="15" fill="rgb(234,67,33)" fg:x="93" fg:w="1"/><text x="12.5516%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="12.3016%" y="245" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="93" fg:w="1"/><text x="12.5516%" y="255.50"></text></g><g><title>[libasound.so.2.0.0] (2 samples, 0.26%)</title><rect x="12.3016%" y="357" width="0.2646%" height="15" fill="rgb(247,138,52)" fg:x="93" fg:w="2"/><text x="12.5516%" y="367.50"></text></g><g><title>[libasound.so.2.0.0] (2 samples, 0.26%)</title><rect x="12.3016%" y="341" width="0.2646%" height="15" fill="rgb(213,79,30)" fg:x="93" fg:w="2"/><text x="12.5516%" y="351.50"></text></g><g><title>[libasound.so.2.0.0] (2 samples, 0.26%)</title><rect x="12.3016%" y="325" width="0.2646%" height="15" fill="rgb(246,177,23)" fg:x="93" fg:w="2"/><text x="12.5516%" y="335.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (2 samples, 0.26%)</title><rect x="12.3016%" y="309" width="0.2646%" height="15" fill="rgb(230,62,27)" fg:x="93" fg:w="2"/><text x="12.5516%" y="319.50"></text></g><g><title>pulse_wait_operation (1 samples, 0.13%)</title><rect x="12.4339%" y="293" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="94" fg:w="1"/><text x="12.6839%" y="303.50"></text></g><g><title>pa_threaded_mainloop_wait (1 samples, 0.13%)</title><rect x="12.4339%" y="277" width="0.1323%" height="15" fill="rgb(244,35,45)" fg:x="94" fg:w="1"/><text x="12.6839%" y="287.50"></text></g><g><title>pthread_cond_wait (1 samples, 0.13%)</title><rect x="12.4339%" y="261" width="0.1323%" height="15" fill="rgb(251,115,12)" fg:x="94" fg:w="1"/><text x="12.6839%" y="271.50"></text></g><g><title>__poll (1 samples, 0.13%)</title><rect x="12.5661%" y="325" width="0.1323%" height="15" fill="rgb(240,54,50)" fg:x="95" fg:w="1"/><text x="12.8161%" y="335.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (2 samples, 0.26%)</title><rect x="12.5661%" y="357" width="0.2646%" height="15" fill="rgb(233,84,52)" fg:x="95" fg:w="2"/><text x="12.8161%" y="367.50"></text></g><g><title>alsa::poll::poll (2 samples, 0.26%)</title><rect x="12.5661%" y="341" width="0.2646%" height="15" fill="rgb(207,117,47)" fg:x="95" fg:w="2"/><text x="12.8161%" y="351.50"></text></g><g><title>pa_memblock_new_pool (1 samples, 0.13%)</title><rect x="12.6984%" y="325" width="0.1323%" height="15" fill="rgb(249,43,39)" fg:x="96" fg:w="1"/><text x="12.9484%" y="335.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (1 samples, 0.13%)</title><rect x="12.8307%" y="341" width="0.1323%" height="15" fill="rgb(209,38,44)" fg:x="97" fg:w="1"/><text x="13.0807%" y="351.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (107 samples, 14.15%)</title><rect x="13.2275%" y="325" width="14.1534%" height="15" fill="rgb(236,212,23)" fg:x="100" fg:w="107"/><text x="13.4775%" y="335.50">&lt;audio::granular_synt..</text></g><g><title>__libc_calloc (4 samples, 0.53%)</title><rect x="27.3810%" y="325" width="0.5291%" height="15" fill="rgb(242,79,21)" fg:x="207" fg:w="4"/><text x="27.6310%" y="335.50"></text></g><g><title>[libc.so.6] (6 samples, 0.79%)</title><rect x="29.3651%" y="309" width="0.7937%" height="15" fill="rgb(211,96,35)" fg:x="222" fg:w="6"/><text x="29.6151%" y="319.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (1 samples, 0.13%)</title><rect x="30.2910%" y="293" width="0.1323%" height="15" fill="rgb(253,215,40)" fg:x="229" fg:w="1"/><text x="30.5410%" y="303.50"></text></g><g><title>__libc_calloc (3 samples, 0.40%)</title><rect x="30.1587%" y="309" width="0.3968%" height="15" fill="rgb(211,81,21)" fg:x="228" fg:w="3"/><text x="30.4087%" y="319.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="30.4233%" y="293" width="0.1323%" height="15" fill="rgb(208,190,38)" fg:x="230" fg:w="1"/><text x="30.6733%" y="303.50"></text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (4 samples, 0.53%)</title><rect x="30.5556%" y="309" width="0.5291%" height="15" fill="rgb(235,213,38)" fg:x="231" fg:w="4"/><text x="30.8056%" y="319.50"></text></g><g><title>[libc.so.6] (148 samples, 19.58%)</title><rect x="12.3016%" y="485" width="19.5767%" height="15" fill="rgb(237,122,38)" fg:x="93" fg:w="148"/><text x="12.5516%" y="495.50">[libc.so.6]</text></g><g><title>[libc.so.6] (148 samples, 19.58%)</title><rect x="12.3016%" y="469" width="19.5767%" height="15" fill="rgb(244,218,35)" fg:x="93" fg:w="148"/><text x="12.5516%" y="479.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (148 samples, 19.58%)</title><rect x="12.3016%" y="453" width="19.5767%" height="15" fill="rgb(240,68,47)" fg:x="93" fg:w="148"/><text x="12.5516%" y="463.50">std::sys::unix::thread::Thread:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (148 samples, 19.58%)</title><rect x="12.3016%" y="437" width="19.5767%" height="15" fill="rgb(210,16,53)" fg:x="93" fg:w="148"/><text x="12.5516%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (148 samples, 19.58%)</title><rect x="12.3016%" y="421" width="19.5767%" height="15" fill="rgb(235,124,12)" fg:x="93" fg:w="148"/><text x="12.5516%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (148 samples, 19.58%)</title><rect x="12.3016%" y="405" width="19.5767%" height="15" fill="rgb(224,169,11)" fg:x="93" fg:w="148"/><text x="12.5516%" y="415.50">core::ops::function::FnOnce::ca..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (148 samples, 19.58%)</title><rect x="12.3016%" y="389" width="19.5767%" height="15" fill="rgb(250,166,2)" fg:x="93" fg:w="148"/><text x="12.5516%" y="399.50">std::sys_common::backtrace::__r..</text></g><g><title>cpal::host::alsa::output_stream_worker (148 samples, 19.58%)</title><rect x="12.3016%" y="373" width="19.5767%" height="15" fill="rgb(242,216,29)" fg:x="93" fg:w="148"/><text x="12.5516%" y="383.50">cpal::host::alsa::output_stream..</text></g><g><title>granular_synthesizer_cli::write_data (144 samples, 19.05%)</title><rect x="12.8307%" y="357" width="19.0476%" height="15" fill="rgb(230,116,27)" fg:x="97" fg:w="144"/><text x="13.0807%" y="367.50">granular_synthesizer_cli::writ..</text></g><g><title>granular_synthesizer_cli::run::{{closure}}::{{closure}} (143 samples, 18.92%)</title><rect x="12.9630%" y="341" width="18.9153%" height="15" fill="rgb(228,99,48)" fg:x="98" fg:w="143"/><text x="13.2130%" y="351.50">granular_synthesizer_cli::run:..</text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (30 samples, 3.97%)</title><rect x="27.9101%" y="325" width="3.9683%" height="15" fill="rgb(253,11,6)" fg:x="211" fg:w="30"/><text x="28.1601%" y="335.50">audi..</text></g><g><title>granular_synthesizer_cli::write_data (6 samples, 0.79%)</title><rect x="31.0847%" y="309" width="0.7937%" height="15" fill="rgb(247,143,39)" fg:x="235" fg:w="6"/><text x="31.3347%" y="319.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (48 samples, 6.35%)</title><rect x="31.8783%" y="469" width="6.3492%" height="15" fill="rgb(236,97,10)" fg:x="241" fg:w="48"/><text x="32.1283%" y="479.50">&lt;audio::..</text></g><g><title>[[vdso]] (1 samples, 0.13%)</title><rect x="38.2275%" y="469" width="0.1323%" height="15" fill="rgb(233,208,19)" fg:x="289" fg:w="1"/><text x="38.4775%" y="479.50"></text></g><g><title>[libc.so.6] (22 samples, 2.91%)</title><rect x="38.3598%" y="469" width="2.9101%" height="15" fill="rgb(216,164,2)" fg:x="290" fg:w="22"/><text x="38.6098%" y="479.50">[l..</text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="41.2698%" y="469" width="0.1323%" height="15" fill="rgb(220,129,5)" fg:x="312" fg:w="1"/><text x="41.5198%" y="479.50"></text></g><g><title>__libc_calloc (22 samples, 2.91%)</title><rect x="41.4021%" y="469" width="2.9101%" height="15" fill="rgb(242,17,10)" fg:x="313" fg:w="22"/><text x="41.6521%" y="479.50">__..</text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.26%)</title><rect x="44.3122%" y="469" width="0.2646%" height="15" fill="rgb(242,107,0)" fg:x="335" fg:w="2"/><text x="44.5622%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.13%)</title><rect x="44.4444%" y="453" width="0.1323%" height="15" fill="rgb(251,28,31)" fg:x="336" fg:w="1"/><text x="44.6944%" y="463.50"></text></g><g><title>alsa::pcm::Status::get_htstamp (1 samples, 0.13%)</title><rect x="44.5767%" y="469" width="0.1323%" height="15" fill="rgb(233,223,10)" fg:x="337" fg:w="1"/><text x="44.8267%" y="479.50"></text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (33 samples, 4.37%)</title><rect x="44.7090%" y="469" width="4.3651%" height="15" fill="rgb(215,21,27)" fg:x="338" fg:w="33"/><text x="44.9590%" y="479.50">audio..</text></g><g><title>cfree (2 samples, 0.26%)</title><rect x="49.0741%" y="469" width="0.2646%" height="15" fill="rgb(232,23,21)" fg:x="371" fg:w="2"/><text x="49.3241%" y="479.50"></text></g><g><title>cpal::host::alsa::output_stream_worker (1 samples, 0.13%)</title><rect x="49.3386%" y="469" width="0.1323%" height="15" fill="rgb(244,5,23)" fg:x="373" fg:w="1"/><text x="49.5886%" y="479.50"></text></g><g><title>granular_synthesizer_cli::run::{{closure}}::{{closure}} (9 samples, 1.19%)</title><rect x="49.4709%" y="469" width="1.1905%" height="15" fill="rgb(226,81,46)" fg:x="374" fg:w="9"/><text x="49.7209%" y="479.50"></text></g><g><title>pa_once_begin (1 samples, 0.13%)</title><rect x="50.6614%" y="469" width="0.1323%" height="15" fill="rgb(247,70,30)" fg:x="383" fg:w="1"/><text x="50.9114%" y="479.50"></text></g><g><title>pa_smoother_2_get (1 samples, 0.13%)</title><rect x="50.7937%" y="469" width="0.1323%" height="15" fill="rgb(212,68,19)" fg:x="384" fg:w="1"/><text x="51.0437%" y="479.50"></text></g><g><title>[unknown] (145 samples, 19.18%)</title><rect x="31.8783%" y="485" width="19.1799%" height="15" fill="rgb(240,187,13)" fg:x="241" fg:w="145"/><text x="32.1283%" y="495.50">[unknown]</text></g><g><title>std::panicking::HOOK (1 samples, 0.13%)</title><rect x="50.9259%" y="469" width="0.1323%" height="15" fill="rgb(223,113,26)" fg:x="385" fg:w="1"/><text x="51.1759%" y="479.50"></text></g><g><title>__libc_calloc (1 samples, 0.13%)</title><rect x="50.9259%" y="453" width="0.1323%" height="15" fill="rgb(206,192,2)" fg:x="385" fg:w="1"/><text x="51.1759%" y="463.50"></text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (2 samples, 0.26%)</title><rect x="51.0582%" y="485" width="0.2646%" height="15" fill="rgb(241,108,4)" fg:x="386" fg:w="2"/><text x="51.3082%" y="495.50"></text></g><g><title>granular_synthesizer_cli::run::{{closure}}::{{closure}} (1 samples, 0.13%)</title><rect x="51.3228%" y="485" width="0.1323%" height="15" fill="rgb(247,173,49)" fg:x="388" fg:w="1"/><text x="51.5728%" y="495.50"></text></g><g><title>cpal_alsa_out (377 samples, 49.87%)</title><rect x="1.7196%" y="501" width="49.8677%" height="15" fill="rgb(224,114,35)" fg:x="13" fg:w="377"/><text x="1.9696%" y="511.50">cpal_alsa_out</text></g><g><title>std::panicking::HOOK (1 samples, 0.13%)</title><rect x="51.4550%" y="485" width="0.1323%" height="15" fill="rgb(245,159,27)" fg:x="389" fg:w="1"/><text x="51.7050%" y="495.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="51.4550%" y="469" width="0.1323%" height="15" fill="rgb(245,172,44)" fg:x="389" fg:w="1"/><text x="51.7050%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="51.5873%" y="469" width="0.1323%" height="15" fill="rgb(236,23,11)" fg:x="390" fg:w="1"/><text x="51.8373%" y="479.50"></text></g><g><title>[[heap]] (2 samples, 0.26%)</title><rect x="51.5873%" y="485" width="0.2646%" height="15" fill="rgb(205,117,38)" fg:x="390" fg:w="2"/><text x="51.8373%" y="495.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.13%)</title><rect x="51.7196%" y="469" width="0.1323%" height="15" fill="rgb(237,72,25)" fg:x="391" fg:w="1"/><text x="51.9696%" y="479.50"></text></g><g><title>mp3d_synth (1 samples, 0.13%)</title><rect x="51.8519%" y="469" width="0.1323%" height="15" fill="rgb(244,70,9)" fg:x="392" fg:w="1"/><text x="52.1019%" y="479.50"></text></g><g><title>mp3d_synth_pair (1 samples, 0.13%)</title><rect x="51.9841%" y="469" width="0.1323%" height="15" fill="rgb(217,125,39)" fg:x="393" fg:w="1"/><text x="52.2341%" y="479.50"></text></g><g><title>[[stack]] (3 samples, 0.40%)</title><rect x="51.8519%" y="485" width="0.3968%" height="15" fill="rgb(235,36,10)" fg:x="392" fg:w="3"/><text x="52.1019%" y="495.50"></text></g><g><title>ogg::reading::UntilPageHeaderReader::check_arr (1 samples, 0.13%)</title><rect x="52.1164%" y="469" width="0.1323%" height="15" fill="rgb(251,123,47)" fg:x="394" fg:w="1"/><text x="52.3664%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.13%)</title><rect x="52.2487%" y="469" width="0.1323%" height="15" fill="rgb(221,13,13)" fg:x="395" fg:w="1"/><text x="52.4987%" y="479.50"></text></g><g><title>[anon] (2 samples, 0.26%)</title><rect x="52.2487%" y="485" width="0.2646%" height="15" fill="rgb(238,131,9)" fg:x="395" fg:w="2"/><text x="52.4987%" y="495.50"></text></g><g><title>mp3d_synth (1 samples, 0.13%)</title><rect x="52.3810%" y="469" width="0.1323%" height="15" fill="rgb(211,50,8)" fg:x="396" fg:w="1"/><text x="52.6310%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.13%)</title><rect x="52.5132%" y="485" width="0.1323%" height="15" fill="rgb(245,182,24)" fg:x="397" fg:w="1"/><text x="52.7632%" y="495.50"></text></g><g><title>[libc.so.6] (16 samples, 2.12%)</title><rect x="52.6455%" y="485" width="2.1164%" height="15" fill="rgb(242,14,37)" fg:x="398" fg:w="16"/><text x="52.8955%" y="495.50">[..</text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="54.4974%" y="469" width="0.2646%" height="15" fill="rgb(246,228,12)" fg:x="412" fg:w="2"/><text x="54.7474%" y="479.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.13%)</title><rect x="54.6296%" y="453" width="0.1323%" height="15" fill="rgb(213,55,15)" fg:x="413" fg:w="1"/><text x="54.8796%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="54.6296%" y="437" width="0.1323%" height="15" fill="rgb(209,9,3)" fg:x="413" fg:w="1"/><text x="54.8796%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.13%)</title><rect x="54.6296%" y="421" width="0.1323%" height="15" fill="rgb(230,59,30)" fg:x="413" fg:w="1"/><text x="54.8796%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="54.6296%" y="405" width="0.1323%" height="15" fill="rgb(209,121,21)" fg:x="413" fg:w="1"/><text x="54.8796%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.13%)</title><rect x="54.6296%" y="389" width="0.1323%" height="15" fill="rgb(220,109,13)" fg:x="413" fg:w="1"/><text x="54.8796%" y="399.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.13%)</title><rect x="54.6296%" y="373" width="0.1323%" height="15" fill="rgb(232,18,1)" fg:x="413" fg:w="1"/><text x="54.8796%" y="383.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.13%)</title><rect x="54.6296%" y="357" width="0.1323%" height="15" fill="rgb(215,41,42)" fg:x="413" fg:w="1"/><text x="54.8796%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="54.6296%" y="341" width="0.1323%" height="15" fill="rgb(224,123,36)" fg:x="413" fg:w="1"/><text x="54.8796%" y="351.50"></text></g><g><title>&lt;rodio::decoder::Decoder&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.93%)</title><rect x="55.0265%" y="469" width="0.9259%" height="15" fill="rgb(240,125,3)" fg:x="416" fg:w="7"/><text x="55.2765%" y="479.50"></text></g><g><title>&lt;slice_deque::SliceDeque&lt;T&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (1 samples, 0.13%)</title><rect x="55.9524%" y="469" width="0.1323%" height="15" fill="rgb(205,98,50)" fg:x="423" fg:w="1"/><text x="56.2024%" y="479.50"></text></g><g><title>L3_imdct36 (2 samples, 0.26%)</title><rect x="56.0847%" y="469" width="0.2646%" height="15" fill="rgb(205,185,37)" fg:x="424" fg:w="2"/><text x="56.3347%" y="479.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.13%)</title><rect x="56.3492%" y="469" width="0.1323%" height="15" fill="rgb(238,207,15)" fg:x="426" fg:w="1"/><text x="56.5992%" y="479.50"></text></g><g><title>[libc.so.6] (6 samples, 0.79%)</title><rect x="56.4815%" y="469" width="0.7937%" height="15" fill="rgb(213,199,42)" fg:x="427" fg:w="6"/><text x="56.7315%" y="479.50"></text></g><g><title>__ctype_init (6 samples, 0.79%)</title><rect x="57.2751%" y="469" width="0.7937%" height="15" fill="rgb(235,201,11)" fg:x="433" fg:w="6"/><text x="57.5251%" y="479.50"></text></g><g><title>mp3d_synth (4 samples, 0.53%)</title><rect x="58.0688%" y="469" width="0.5291%" height="15" fill="rgb(207,46,11)" fg:x="439" fg:w="4"/><text x="58.3188%" y="479.50"></text></g><g><title>mp3dec_decode_frame (14 samples, 1.85%)</title><rect x="58.5979%" y="469" width="1.8519%" height="15" fill="rgb(241,35,35)" fg:x="443" fg:w="14"/><text x="58.8479%" y="479.50">m..</text></g><g><title>mp3d_synth (1 samples, 0.13%)</title><rect x="60.3175%" y="453" width="0.1323%" height="15" fill="rgb(243,32,47)" fg:x="456" fg:w="1"/><text x="60.5675%" y="463.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.26%)</title><rect x="60.4497%" y="469" width="0.2646%" height="15" fill="rgb(247,202,23)" fg:x="457" fg:w="2"/><text x="60.6997%" y="479.50"></text></g><g><title>pthread_cond_wait (1 samples, 0.13%)</title><rect x="60.7143%" y="469" width="0.1323%" height="15" fill="rgb(219,102,11)" fg:x="459" fg:w="1"/><text x="60.9643%" y="479.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 0.13%)</title><rect x="60.8466%" y="469" width="0.1323%" height="15" fill="rgb(243,110,44)" fg:x="460" fg:w="1"/><text x="61.0966%" y="479.50"></text></g><g><title>[unknown] (48 samples, 6.35%)</title><rect x="54.7619%" y="485" width="6.3492%" height="15" fill="rgb(222,74,54)" fg:x="414" fg:w="48"/><text x="55.0119%" y="495.50">[unknown]</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.13%)</title><rect x="60.9788%" y="469" width="0.1323%" height="15" fill="rgb(216,99,12)" fg:x="461" fg:w="1"/><text x="61.2288%" y="479.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.13%)</title><rect x="61.1111%" y="165" width="0.1323%" height="15" fill="rgb(226,22,26)" fg:x="462" fg:w="1"/><text x="61.3611%" y="175.50"></text></g><g><title>tokio::runtime::builder::Builder::build (2 samples, 0.26%)</title><rect x="61.1111%" y="229" width="0.2646%" height="15" fill="rgb(217,163,10)" fg:x="462" fg:w="2"/><text x="61.3611%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (2 samples, 0.26%)</title><rect x="61.1111%" y="213" width="0.2646%" height="15" fill="rgb(213,25,53)" fg:x="462" fg:w="2"/><text x="61.3611%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.26%)</title><rect x="61.1111%" y="197" width="0.2646%" height="15" fill="rgb(252,105,26)" fg:x="462" fg:w="2"/><text x="61.3611%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.26%)</title><rect x="61.1111%" y="181" width="0.2646%" height="15" fill="rgb(220,39,43)" fg:x="462" fg:w="2"/><text x="61.3611%" y="191.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.13%)</title><rect x="61.2434%" y="165" width="0.1323%" height="15" fill="rgb(229,68,48)" fg:x="463" fg:w="1"/><text x="61.4934%" y="175.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.13%)</title><rect x="61.2434%" y="149" width="0.1323%" height="15" fill="rgb(252,8,32)" fg:x="463" fg:w="1"/><text x="61.4934%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.13%)</title><rect x="61.2434%" y="133" width="0.1323%" height="15" fill="rgb(223,20,43)" fg:x="463" fg:w="1"/><text x="61.4934%" y="143.50"></text></g><g><title>&lt;cpal::host::alsa::Device as cpal::traits::DeviceTrait&gt;::build_output_stream_raw (1 samples, 0.13%)</title><rect x="61.3757%" y="165" width="0.1323%" height="15" fill="rgb(229,81,49)" fg:x="464" fg:w="1"/><text x="61.6257%" y="175.50"></text></g><g><title>cpal::host::alsa::Device::build_stream_inner (1 samples, 0.13%)</title><rect x="61.3757%" y="149" width="0.1323%" height="15" fill="rgb(236,28,36)" fg:x="464" fg:w="1"/><text x="61.6257%" y="159.50"></text></g><g><title>alsa::pcm::PCM::prepare (1 samples, 0.13%)</title><rect x="61.3757%" y="133" width="0.1323%" height="15" fill="rgb(249,185,26)" fg:x="464" fg:w="1"/><text x="61.6257%" y="143.50"></text></g><g><title>snd_pcm_prepare (1 samples, 0.13%)</title><rect x="61.3757%" y="117" width="0.1323%" height="15" fill="rgb(249,174,33)" fg:x="464" fg:w="1"/><text x="61.6257%" y="127.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.13%)</title><rect x="61.3757%" y="101" width="0.1323%" height="15" fill="rgb(233,201,37)" fg:x="464" fg:w="1"/><text x="61.6257%" y="111.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.13%)</title><rect x="61.3757%" y="85" width="0.1323%" height="15" fill="rgb(221,78,26)" fg:x="464" fg:w="1"/><text x="61.6257%" y="95.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.13%)</title><rect x="61.3757%" y="69" width="0.1323%" height="15" fill="rgb(250,127,30)" fg:x="464" fg:w="1"/><text x="61.6257%" y="79.50"></text></g><g><title>pa_threaded_mainloop_wait (1 samples, 0.13%)</title><rect x="61.3757%" y="53" width="0.1323%" height="15" fill="rgb(230,49,44)" fg:x="464" fg:w="1"/><text x="61.6257%" y="63.50"></text></g><g><title>pthread_cond_wait (1 samples, 0.13%)</title><rect x="61.3757%" y="37" width="0.1323%" height="15" fill="rgb(229,67,23)" fg:x="464" fg:w="1"/><text x="61.6257%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.53%)</title><rect x="61.5079%" y="149" width="0.5291%" height="15" fill="rgb(249,83,47)" fg:x="465" fg:w="4"/><text x="61.7579%" y="159.50"></text></g><g><title>_start (11 samples, 1.46%)</title><rect x="61.1111%" y="485" width="1.4550%" height="15" fill="rgb(215,43,3)" fg:x="462" fg:w="11"/><text x="61.3611%" y="495.50"></text></g><g><title>__libc_start_main (11 samples, 1.46%)</title><rect x="61.1111%" y="469" width="1.4550%" height="15" fill="rgb(238,154,13)" fg:x="462" fg:w="11"/><text x="61.3611%" y="479.50"></text></g><g><title>[libc.so.6] (11 samples, 1.46%)</title><rect x="61.1111%" y="453" width="1.4550%" height="15" fill="rgb(219,56,2)" fg:x="462" fg:w="11"/><text x="61.3611%" y="463.50"></text></g><g><title>main (11 samples, 1.46%)</title><rect x="61.1111%" y="437" width="1.4550%" height="15" fill="rgb(233,0,4)" fg:x="462" fg:w="11"/><text x="61.3611%" y="447.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 1.46%)</title><rect x="61.1111%" y="421" width="1.4550%" height="15" fill="rgb(235,30,7)" fg:x="462" fg:w="11"/><text x="61.3611%" y="431.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 1.46%)</title><rect x="61.1111%" y="405" width="1.4550%" height="15" fill="rgb(250,79,13)" fg:x="462" fg:w="11"/><text x="61.3611%" y="415.50"></text></g><g><title>std::panicking::try (11 samples, 1.46%)</title><rect x="61.1111%" y="389" width="1.4550%" height="15" fill="rgb(211,146,34)" fg:x="462" fg:w="11"/><text x="61.3611%" y="399.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 1.46%)</title><rect x="61.1111%" y="373" width="1.4550%" height="15" fill="rgb(228,22,38)" fg:x="462" fg:w="11"/><text x="61.3611%" y="383.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (11 samples, 1.46%)</title><rect x="61.1111%" y="357" width="1.4550%" height="15" fill="rgb(235,168,5)" fg:x="462" fg:w="11"/><text x="61.3611%" y="367.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 1.46%)</title><rect x="61.1111%" y="341" width="1.4550%" height="15" fill="rgb(221,155,16)" fg:x="462" fg:w="11"/><text x="61.3611%" y="351.50"></text></g><g><title>std::panicking::try (11 samples, 1.46%)</title><rect x="61.1111%" y="325" width="1.4550%" height="15" fill="rgb(215,215,53)" fg:x="462" fg:w="11"/><text x="61.3611%" y="335.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 1.46%)</title><rect x="61.1111%" y="309" width="1.4550%" height="15" fill="rgb(223,4,10)" fg:x="462" fg:w="11"/><text x="61.3611%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 1.46%)</title><rect x="61.1111%" y="293" width="1.4550%" height="15" fill="rgb(234,103,6)" fg:x="462" fg:w="11"/><text x="61.3611%" y="303.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 1.46%)</title><rect x="61.1111%" y="277" width="1.4550%" height="15" fill="rgb(227,97,0)" fg:x="462" fg:w="11"/><text x="61.3611%" y="287.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 1.46%)</title><rect x="61.1111%" y="261" width="1.4550%" height="15" fill="rgb(234,150,53)" fg:x="462" fg:w="11"/><text x="61.3611%" y="271.50"></text></g><g><title>granular_synthesizer_cli::main (11 samples, 1.46%)</title><rect x="61.1111%" y="245" width="1.4550%" height="15" fill="rgb(228,201,54)" fg:x="462" fg:w="11"/><text x="61.3611%" y="255.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (9 samples, 1.19%)</title><rect x="61.3757%" y="229" width="1.1905%" height="15" fill="rgb(222,22,37)" fg:x="464" fg:w="9"/><text x="61.6257%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (9 samples, 1.19%)</title><rect x="61.3757%" y="213" width="1.1905%" height="15" fill="rgb(237,53,32)" fg:x="464" fg:w="9"/><text x="61.6257%" y="223.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (9 samples, 1.19%)</title><rect x="61.3757%" y="197" width="1.1905%" height="15" fill="rgb(233,25,53)" fg:x="464" fg:w="9"/><text x="61.6257%" y="207.50"></text></g><g><title>granular_synthesizer_cli::main::_{{closure}} (9 samples, 1.19%)</title><rect x="61.3757%" y="181" width="1.1905%" height="15" fill="rgb(210,40,34)" fg:x="464" fg:w="9"/><text x="61.6257%" y="191.50"></text></g><g><title>granular_synthesizer_cli::load_default_buffer (8 samples, 1.06%)</title><rect x="61.5079%" y="165" width="1.0582%" height="15" fill="rgb(241,220,44)" fg:x="465" fg:w="8"/><text x="61.7579%" y="175.50"></text></g><g><title>granular_synthesizer_cli::utils::i16_array_to_f32 (4 samples, 0.53%)</title><rect x="62.0370%" y="149" width="0.5291%" height="15" fill="rgb(235,28,35)" fg:x="469" fg:w="4"/><text x="62.2870%" y="159.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.53%)</title><rect x="62.0370%" y="133" width="0.5291%" height="15" fill="rgb(210,56,17)" fg:x="469" fg:w="4"/><text x="62.2870%" y="143.50"></text></g><g><title>granular_synthe (88 samples, 11.64%)</title><rect x="51.5873%" y="501" width="11.6402%" height="15" fill="rgb(224,130,29)" fg:x="390" fg:w="88"/><text x="51.8373%" y="511.50">granular_synthe</text></g><g><title>mp3dec_decode_frame (5 samples, 0.66%)</title><rect x="62.5661%" y="485" width="0.6614%" height="15" fill="rgb(235,212,8)" fg:x="473" fg:w="5"/><text x="62.8161%" y="495.50"></text></g><g><title>&lt;audio::granular_synthesizer::GranularSynthesizer as audio::granular_synthesizer_action::GranularSynthesizerAction&gt;::next_frame_into_buffer (2 samples, 0.26%)</title><rect x="63.2275%" y="469" width="0.2646%" height="15" fill="rgb(223,33,50)" fg:x="478" fg:w="2"/><text x="63.4775%" y="479.50"></text></g><g><title>[libc.so.6] (4 samples, 0.53%)</title><rect x="63.4921%" y="469" width="0.5291%" height="15" fill="rgb(219,149,13)" fg:x="480" fg:w="4"/><text x="63.7421%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="63.8889%" y="453" width="0.1323%" height="15" fill="rgb(250,156,29)" fg:x="483" fg:w="1"/><text x="64.1389%" y="463.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.26%)</title><rect x="64.0212%" y="469" width="0.2646%" height="15" fill="rgb(216,193,19)" fg:x="484" fg:w="2"/><text x="64.2712%" y="479.50"></text></g><g><title>__poll (1 samples, 0.13%)</title><rect x="64.2857%" y="469" width="0.1323%" height="15" fill="rgb(216,135,14)" fg:x="486" fg:w="1"/><text x="64.5357%" y="479.50"></text></g><g><title>pa_mainloop_dispatch (1 samples, 0.13%)</title><rect x="64.4180%" y="469" width="0.1323%" height="15" fill="rgb(241,47,5)" fg:x="487" fg:w="1"/><text x="64.6680%" y="479.50"></text></g><g><title>pa_smoother_2_put (1 samples, 0.13%)</title><rect x="64.5503%" y="469" width="0.1323%" height="15" fill="rgb(233,42,35)" fg:x="488" fg:w="1"/><text x="64.8003%" y="479.50"></text></g><g><title>pa_write (1 samples, 0.13%)</title><rect x="64.6825%" y="469" width="0.1323%" height="15" fill="rgb(231,13,6)" fg:x="489" fg:w="1"/><text x="64.9325%" y="479.50"></text></g><g><title>[[heap]] (14 samples, 1.85%)</title><rect x="63.2275%" y="485" width="1.8519%" height="15" fill="rgb(207,181,40)" fg:x="478" fg:w="14"/><text x="63.4775%" y="495.50">[..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.26%)</title><rect x="64.8148%" y="469" width="0.2646%" height="15" fill="rgb(254,173,49)" fg:x="490" fg:w="2"/><text x="65.0648%" y="479.50"></text></g><g><title>[libc.so.6] (89 samples, 11.77%)</title><rect x="65.0794%" y="469" width="11.7725%" height="15" fill="rgb(221,1,38)" fg:x="492" fg:w="89"/><text x="65.3294%" y="479.50">[libc.so.6]</text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.26%)</title><rect x="76.8519%" y="469" width="0.2646%" height="15" fill="rgb(206,124,46)" fg:x="581" fg:w="2"/><text x="77.1019%" y="479.50"></text></g><g><title>[libpulsecommon-15.99.so] (5 samples, 0.66%)</title><rect x="77.1164%" y="469" width="0.6614%" height="15" fill="rgb(249,21,11)" fg:x="583" fg:w="5"/><text x="77.3664%" y="479.50"></text></g><g><title>__libc_calloc (2 samples, 0.26%)</title><rect x="77.7778%" y="469" width="0.2646%" height="15" fill="rgb(222,201,40)" fg:x="588" fg:w="2"/><text x="78.0278%" y="479.50"></text></g><g><title>__poll (1 samples, 0.13%)</title><rect x="78.0423%" y="469" width="0.1323%" height="15" fill="rgb(235,61,29)" fg:x="590" fg:w="1"/><text x="78.2923%" y="479.50"></text></g><g><title>audio::downmixers::downmix_simple::downmix_simple (1 samples, 0.13%)</title><rect x="78.1746%" y="469" width="0.1323%" height="15" fill="rgb(219,207,3)" fg:x="591" fg:w="1"/><text x="78.4246%" y="479.50"></text></g><g><title>pa_hashmap_get (1 samples, 0.13%)</title><rect x="78.3069%" y="469" width="0.1323%" height="15" fill="rgb(222,56,46)" fg:x="592" fg:w="1"/><text x="78.5569%" y="479.50"></text></g><g><title>pa_idxset_trivial_hash_func (1 samples, 0.13%)</title><rect x="78.4392%" y="469" width="0.1323%" height="15" fill="rgb(239,76,54)" fg:x="593" fg:w="1"/><text x="78.6892%" y="479.50"></text></g><g><title>pa_mainloop_dispatch (1 samples, 0.13%)</title><rect x="78.5714%" y="469" width="0.1323%" height="15" fill="rgb(231,124,27)" fg:x="594" fg:w="1"/><text x="78.8214%" y="479.50"></text></g><g><title>pa_mainloop_poll (1 samples, 0.13%)</title><rect x="78.7037%" y="469" width="0.1323%" height="15" fill="rgb(249,195,6)" fg:x="595" fg:w="1"/><text x="78.9537%" y="479.50"></text></g><g><title>pa_memblock_ref (1 samples, 0.13%)</title><rect x="78.8360%" y="469" width="0.1323%" height="15" fill="rgb(237,174,47)" fg:x="596" fg:w="1"/><text x="79.0860%" y="479.50"></text></g><g><title>pa_mutex_lock (1 samples, 0.13%)</title><rect x="78.9683%" y="469" width="0.1323%" height="15" fill="rgb(206,201,31)" fg:x="597" fg:w="1"/><text x="79.2183%" y="479.50"></text></g><g><title>pa_pstream_unref (1 samples, 0.13%)</title><rect x="79.1005%" y="469" width="0.1323%" height="15" fill="rgb(231,57,52)" fg:x="598" fg:w="1"/><text x="79.3505%" y="479.50"></text></g><g><title>pa_stream_get_state (1 samples, 0.13%)</title><rect x="79.2328%" y="469" width="0.1323%" height="15" fill="rgb(248,177,22)" fg:x="599" fg:w="1"/><text x="79.4828%" y="479.50"></text></g><g><title>pa_timeval_load (1 samples, 0.13%)</title><rect x="79.3651%" y="469" width="0.1323%" height="15" fill="rgb(215,211,37)" fg:x="600" fg:w="1"/><text x="79.6151%" y="479.50"></text></g><g><title>[anon] (112 samples, 14.81%)</title><rect x="65.0794%" y="485" width="14.8148%" height="15" fill="rgb(241,128,51)" fg:x="492" fg:w="112"/><text x="65.3294%" y="495.50">[anon]</text></g><g><title>pthread_mutex_lock (3 samples, 0.40%)</title><rect x="79.4974%" y="469" width="0.3968%" height="15" fill="rgb(227,165,31)" fg:x="601" fg:w="3"/><text x="79.7474%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="79.8942%" y="341" width="0.1323%" height="15" fill="rgb(228,167,24)" fg:x="604" fg:w="1"/><text x="80.1442%" y="351.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.13%)</title><rect x="80.0265%" y="293" width="0.1323%" height="15" fill="rgb(228,143,12)" fg:x="605" fg:w="1"/><text x="80.2765%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="80.0265%" y="277" width="0.1323%" height="15" fill="rgb(249,149,8)" fg:x="605" fg:w="1"/><text x="80.2765%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="80.1587%" y="293" width="0.1323%" height="15" fill="rgb(243,35,44)" fg:x="606" fg:w="1"/><text x="80.4087%" y="303.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="80.2910%" y="293" width="0.1323%" height="15" fill="rgb(246,89,9)" fg:x="607" fg:w="1"/><text x="80.5410%" y="303.50"></text></g><g><title>[libpulse.so.0.24.1] (4 samples, 0.53%)</title><rect x="80.0265%" y="341" width="0.5291%" height="15" fill="rgb(233,213,13)" fg:x="605" fg:w="4"/><text x="80.2765%" y="351.50"></text></g><g><title>pa_pdispatch_run (4 samples, 0.53%)</title><rect x="80.0265%" y="325" width="0.5291%" height="15" fill="rgb(233,141,41)" fg:x="605" fg:w="4"/><text x="80.2765%" y="335.50"></text></g><g><title>[libpulse.so.0.24.1] (4 samples, 0.53%)</title><rect x="80.0265%" y="309" width="0.5291%" height="15" fill="rgb(239,167,4)" fg:x="605" fg:w="4"/><text x="80.2765%" y="319.50"></text></g><g><title>pa_hashmap_get (1 samples, 0.13%)</title><rect x="80.4233%" y="293" width="0.1323%" height="15" fill="rgb(209,217,16)" fg:x="608" fg:w="1"/><text x="80.6733%" y="303.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.13%)</title><rect x="80.4233%" y="277" width="0.1323%" height="15" fill="rgb(219,88,35)" fg:x="608" fg:w="1"/><text x="80.6733%" y="287.50"></text></g><g><title>pa_iochannel_read_with_ancil_data (1 samples, 0.13%)</title><rect x="80.5556%" y="341" width="0.1323%" height="15" fill="rgb(220,193,23)" fg:x="609" fg:w="1"/><text x="80.8056%" y="351.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="80.5556%" y="325" width="0.1323%" height="15" fill="rgb(230,90,52)" fg:x="609" fg:w="1"/><text x="80.8056%" y="335.50"></text></g><g><title>pa_mainloop_dispatch (1 samples, 0.13%)</title><rect x="80.5556%" y="309" width="0.1323%" height="15" fill="rgb(252,106,19)" fg:x="609" fg:w="1"/><text x="80.8056%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="80.6878%" y="309" width="0.1323%" height="15" fill="rgb(206,74,20)" fg:x="610" fg:w="1"/><text x="80.9378%" y="319.50"></text></g><g><title>pa_iochannel_write (2 samples, 0.26%)</title><rect x="80.6878%" y="341" width="0.2646%" height="15" fill="rgb(230,138,44)" fg:x="610" fg:w="2"/><text x="80.9378%" y="351.50"></text></g><g><title>pa_write (2 samples, 0.26%)</title><rect x="80.6878%" y="325" width="0.2646%" height="15" fill="rgb(235,182,43)" fg:x="610" fg:w="2"/><text x="80.9378%" y="335.50"></text></g><g><title>pa_once_begin (1 samples, 0.13%)</title><rect x="80.8201%" y="309" width="0.1323%" height="15" fill="rgb(242,16,51)" fg:x="611" fg:w="1"/><text x="81.0701%" y="319.50"></text></g><g><title>pa_once_begin (1 samples, 0.13%)</title><rect x="80.9524%" y="341" width="0.1323%" height="15" fill="rgb(248,9,4)" fg:x="612" fg:w="1"/><text x="81.2024%" y="351.50"></text></g><g><title>[libpulsecommon-15.99.so] (10 samples, 1.32%)</title><rect x="79.8942%" y="373" width="1.3228%" height="15" fill="rgb(210,31,22)" fg:x="604" fg:w="10"/><text x="80.1442%" y="383.50"></text></g><g><title>[libpulsecommon-15.99.so] (10 samples, 1.32%)</title><rect x="79.8942%" y="357" width="1.3228%" height="15" fill="rgb(239,54,39)" fg:x="604" fg:w="10"/><text x="80.1442%" y="367.50"></text></g><g><title>pa_tagstruct_get_timeval (1 samples, 0.13%)</title><rect x="81.0847%" y="341" width="0.1323%" height="15" fill="rgb(230,99,41)" fg:x="613" fg:w="1"/><text x="81.3347%" y="351.50"></text></g><g><title>pa_mainloop_dispatch (11 samples, 1.46%)</title><rect x="79.8942%" y="389" width="1.4550%" height="15" fill="rgb(253,106,12)" fg:x="604" fg:w="11"/><text x="80.1442%" y="399.50"></text></g><g><title>pa_pdispatch_unref (1 samples, 0.13%)</title><rect x="81.2169%" y="373" width="0.1323%" height="15" fill="rgb(213,46,41)" fg:x="614" fg:w="1"/><text x="81.4669%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="81.3492%" y="373" width="0.1323%" height="15" fill="rgb(215,133,35)" fg:x="615" fg:w="1"/><text x="81.5992%" y="383.50"></text></g><g><title>pa_loop_read (1 samples, 0.13%)</title><rect x="81.3492%" y="357" width="0.1323%" height="15" fill="rgb(213,28,5)" fg:x="615" fg:w="1"/><text x="81.5992%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="81.4815%" y="357" width="0.1323%" height="15" fill="rgb(215,77,49)" fg:x="616" fg:w="1"/><text x="81.7315%" y="367.50"></text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.26%)</title><rect x="81.6138%" y="357" width="0.2646%" height="15" fill="rgb(248,100,22)" fg:x="617" fg:w="2"/><text x="81.8638%" y="367.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="81.8783%" y="357" width="0.1323%" height="15" fill="rgb(208,67,9)" fg:x="619" fg:w="1"/><text x="82.1283%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="83.4656%" y="341" width="0.1323%" height="15" fill="rgb(219,133,21)" fg:x="631" fg:w="1"/><text x="83.7156%" y="351.50"></text></g><g><title>__poll (13 samples, 1.72%)</title><rect x="82.0106%" y="357" width="1.7196%" height="15" fill="rgb(246,46,29)" fg:x="620" fg:w="13"/><text x="82.2606%" y="367.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.13%)</title><rect x="83.5979%" y="341" width="0.1323%" height="15" fill="rgb(246,185,52)" fg:x="632" fg:w="1"/><text x="83.8479%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="83.7302%" y="341" width="0.2646%" height="15" fill="rgb(252,136,11)" fg:x="633" fg:w="2"/><text x="83.9802%" y="351.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="83.9947%" y="341" width="0.1323%" height="15" fill="rgb(219,138,53)" fg:x="635" fg:w="1"/><text x="84.2447%" y="351.50"></text></g><g><title>pa_mutex_lock (4 samples, 0.53%)</title><rect x="83.7302%" y="357" width="0.5291%" height="15" fill="rgb(211,51,23)" fg:x="633" fg:w="4"/><text x="83.9802%" y="367.50"></text></g><g><title>write (1 samples, 0.13%)</title><rect x="84.1270%" y="341" width="0.1323%" height="15" fill="rgb(247,221,28)" fg:x="636" fg:w="1"/><text x="84.3770%" y="351.50"></text></g><g><title>pa_mainloop_poll (23 samples, 3.04%)</title><rect x="81.3492%" y="389" width="3.0423%" height="15" fill="rgb(251,222,45)" fg:x="615" fg:w="23"/><text x="81.5992%" y="399.50">pa_..</text></g><g><title>[libpulse.so.0.24.1] (22 samples, 2.91%)</title><rect x="81.4815%" y="373" width="2.9101%" height="15" fill="rgb(217,162,53)" fg:x="616" fg:w="22"/><text x="81.7315%" y="383.50">[l..</text></g><g><title>pa_mutex_unlock (1 samples, 0.13%)</title><rect x="84.2593%" y="357" width="0.1323%" height="15" fill="rgb(229,93,14)" fg:x="637" fg:w="1"/><text x="84.5093%" y="367.50"></text></g><g><title>__errno_location (1 samples, 0.13%)</title><rect x="84.2593%" y="341" width="0.1323%" height="15" fill="rgb(209,67,49)" fg:x="637" fg:w="1"/><text x="84.5093%" y="351.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.13%)</title><rect x="84.3915%" y="373" width="0.1323%" height="15" fill="rgb(213,87,29)" fg:x="638" fg:w="1"/><text x="84.6415%" y="383.50"></text></g><g><title>pa_xfree (1 samples, 0.13%)</title><rect x="84.3915%" y="357" width="0.1323%" height="15" fill="rgb(205,151,52)" fg:x="638" fg:w="1"/><text x="84.6415%" y="367.50"></text></g><g><title>pa_memblock_acquire (1 samples, 0.13%)</title><rect x="84.3915%" y="341" width="0.1323%" height="15" fill="rgb(253,215,39)" fg:x="638" fg:w="1"/><text x="84.6415%" y="351.50"></text></g><g><title>pa_memblock_ref (1 samples, 0.13%)</title><rect x="84.5238%" y="373" width="0.1323%" height="15" fill="rgb(221,220,41)" fg:x="639" fg:w="1"/><text x="84.7738%" y="383.50"></text></g><g><title>pa_mutex_unlock (1 samples, 0.13%)</title><rect x="84.6561%" y="373" width="0.1323%" height="15" fill="rgb(218,133,21)" fg:x="640" fg:w="1"/><text x="84.9061%" y="383.50"></text></g><g><title>[libc.so.6] (39 samples, 5.16%)</title><rect x="79.8942%" y="485" width="5.1587%" height="15" fill="rgb(221,193,43)" fg:x="604" fg:w="39"/><text x="80.1442%" y="495.50">[libc...</text></g><g><title>[libc.so.6] (39 samples, 5.16%)</title><rect x="79.8942%" y="469" width="5.1587%" height="15" fill="rgb(240,128,52)" fg:x="604" fg:w="39"/><text x="80.1442%" y="479.50">[libc...</text></g><g><title>[libpulsecommon-15.99.so] (39 samples, 5.16%)</title><rect x="79.8942%" y="453" width="5.1587%" height="15" fill="rgb(253,114,12)" fg:x="604" fg:w="39"/><text x="80.1442%" y="463.50">[libpu..</text></g><g><title>[libpulse.so.0.24.1] (39 samples, 5.16%)</title><rect x="79.8942%" y="437" width="5.1587%" height="15" fill="rgb(215,223,47)" fg:x="604" fg:w="39"/><text x="80.1442%" y="447.50">[libpu..</text></g><g><title>pa_mainloop_run (39 samples, 5.16%)</title><rect x="79.8942%" y="421" width="5.1587%" height="15" fill="rgb(248,225,23)" fg:x="604" fg:w="39"/><text x="80.1442%" y="431.50">pa_mai..</text></g><g><title>pa_mainloop_iterate (39 samples, 5.16%)</title><rect x="79.8942%" y="405" width="5.1587%" height="15" fill="rgb(250,108,0)" fg:x="604" fg:w="39"/><text x="80.1442%" y="415.50">pa_mai..</text></g><g><title>pa_mainloop_prepare (5 samples, 0.66%)</title><rect x="84.3915%" y="389" width="0.6614%" height="15" fill="rgb(228,208,7)" fg:x="638" fg:w="5"/><text x="84.6415%" y="399.50"></text></g><g><title>pa_read (2 samples, 0.26%)</title><rect x="84.7884%" y="373" width="0.2646%" height="15" fill="rgb(244,45,10)" fg:x="641" fg:w="2"/><text x="85.0384%" y="383.50"></text></g><g><title>read (2 samples, 0.26%)</title><rect x="84.7884%" y="357" width="0.2646%" height="15" fill="rgb(207,125,25)" fg:x="641" fg:w="2"/><text x="85.0384%" y="367.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.26%)</title><rect x="84.7884%" y="341" width="0.2646%" height="15" fill="rgb(210,195,18)" fg:x="641" fg:w="2"/><text x="85.0384%" y="351.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.13%)</title><rect x="85.0529%" y="485" width="0.1323%" height="15" fill="rgb(249,80,12)" fg:x="643" fg:w="1"/><text x="85.3029%" y="495.50"></text></g><g><title>__libc_calloc (1 samples, 0.13%)</title><rect x="85.0529%" y="469" width="0.1323%" height="15" fill="rgb(221,65,9)" fg:x="643" fg:w="1"/><text x="85.3029%" y="479.50"></text></g><g><title>[[vdso]] (1 samples, 0.13%)</title><rect x="85.1852%" y="469" width="0.1323%" height="15" fill="rgb(235,49,36)" fg:x="644" fg:w="1"/><text x="85.4352%" y="479.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.13%)</title><rect x="85.1852%" y="453" width="0.1323%" height="15" fill="rgb(225,32,20)" fg:x="644" fg:w="1"/><text x="85.4352%" y="463.50"></text></g><g><title>[libc.so.6] (77 samples, 10.19%)</title><rect x="85.3175%" y="469" width="10.1852%" height="15" fill="rgb(215,141,46)" fg:x="645" fg:w="77"/><text x="85.5675%" y="479.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="95.3704%" y="453" width="0.1323%" height="15" fill="rgb(250,160,47)" fg:x="721" fg:w="1"/><text x="95.6204%" y="463.50"></text></g><g><title>[libpulse.so.0.24.1] (3 samples, 0.40%)</title><rect x="95.5026%" y="469" width="0.3968%" height="15" fill="rgb(216,222,40)" fg:x="722" fg:w="3"/><text x="95.7526%" y="479.50"></text></g><g><title>[libpulsecommon-15.99.so] (3 samples, 0.40%)</title><rect x="95.8995%" y="469" width="0.3968%" height="15" fill="rgb(234,217,39)" fg:x="725" fg:w="3"/><text x="96.1495%" y="479.50"></text></g><g><title>__libc_calloc (2 samples, 0.26%)</title><rect x="96.2963%" y="469" width="0.2646%" height="15" fill="rgb(207,178,40)" fg:x="728" fg:w="2"/><text x="96.5463%" y="479.50"></text></g><g><title>__poll (2 samples, 0.26%)</title><rect x="96.5608%" y="469" width="0.2646%" height="15" fill="rgb(221,136,13)" fg:x="730" fg:w="2"/><text x="96.8108%" y="479.50"></text></g><g><title>__send (1 samples, 0.13%)</title><rect x="96.8254%" y="469" width="0.1323%" height="15" fill="rgb(249,199,10)" fg:x="732" fg:w="1"/><text x="97.0754%" y="479.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="96.9577%" y="469" width="0.1323%" height="15" fill="rgb(249,222,13)" fg:x="733" fg:w="1"/><text x="97.2077%" y="479.50"></text></g><g><title>pa_mainloop_iterate (2 samples, 0.26%)</title><rect x="97.0899%" y="469" width="0.2646%" height="15" fill="rgb(244,185,38)" fg:x="734" fg:w="2"/><text x="97.3399%" y="479.50"></text></g><g><title>pa_mutex_lock (1 samples, 0.13%)</title><rect x="97.3545%" y="469" width="0.1323%" height="15" fill="rgb(236,202,9)" fg:x="736" fg:w="1"/><text x="97.6045%" y="479.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.13%)</title><rect x="97.4868%" y="469" width="0.1323%" height="15" fill="rgb(250,229,37)" fg:x="737" fg:w="1"/><text x="97.7368%" y="479.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.13%)</title><rect x="97.6190%" y="469" width="0.1323%" height="15" fill="rgb(206,174,23)" fg:x="738" fg:w="1"/><text x="97.8690%" y="479.50"></text></g><g><title>[unknown] (96 samples, 12.70%)</title><rect x="85.1852%" y="485" width="12.6984%" height="15" fill="rgb(211,33,43)" fg:x="644" fg:w="96"/><text x="85.4352%" y="495.50">[unknown]</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.13%)</title><rect x="97.7513%" y="469" width="0.1323%" height="15" fill="rgb(245,58,50)" fg:x="739" fg:w="1"/><text x="98.0013%" y="479.50"></text></g><g><title>threaded-ml (263 samples, 34.79%)</title><rect x="63.2275%" y="501" width="34.7884%" height="15" fill="rgb(244,68,36)" fg:x="478" fg:w="263"/><text x="63.4775%" y="511.50">threaded-ml</text></g><g><title>pa_pdispatch_run (1 samples, 0.13%)</title><rect x="97.8836%" y="485" width="0.1323%" height="15" fill="rgb(232,229,15)" fg:x="740" fg:w="1"/><text x="98.1336%" y="495.50"></text></g><g><title>[anon] (1 samples, 0.13%)</title><rect x="98.0159%" y="485" width="0.1323%" height="15" fill="rgb(254,30,23)" fg:x="741" fg:w="1"/><text x="98.2659%" y="495.50"></text></g><g><title>mp3d_synth (1 samples, 0.13%)</title><rect x="98.0159%" y="469" width="0.1323%" height="15" fill="rgb(235,160,14)" fg:x="741" fg:w="1"/><text x="98.2659%" y="479.50"></text></g><g><title>[libc.so.6] (7 samples, 0.93%)</title><rect x="98.1481%" y="485" width="0.9259%" height="15" fill="rgb(212,155,44)" fg:x="742" fg:w="7"/><text x="98.3981%" y="495.50"></text></g><g><title>[libc.so.6] (7 samples, 0.93%)</title><rect x="98.1481%" y="469" width="0.9259%" height="15" fill="rgb(226,2,50)" fg:x="742" fg:w="7"/><text x="98.3981%" y="479.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7 samples, 0.93%)</title><rect x="98.1481%" y="453" width="0.9259%" height="15" fill="rgb(234,177,6)" fg:x="742" fg:w="7"/><text x="98.3981%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 0.93%)</title><rect x="98.1481%" y="437" width="0.9259%" height="15" fill="rgb(217,24,9)" fg:x="742" fg:w="7"/><text x="98.3981%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 0.93%)</title><rect x="98.1481%" y="421" width="0.9259%" height="15" fill="rgb(220,13,46)" fg:x="742" fg:w="7"/><text x="98.3981%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (7 samples, 0.93%)</title><rect x="98.1481%" y="405" width="0.9259%" height="15" fill="rgb(239,221,27)" fg:x="742" fg:w="7"/><text x="98.3981%" y="415.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.93%)</title><rect x="98.1481%" y="389" width="0.9259%" height="15" fill="rgb(222,198,25)" fg:x="742" fg:w="7"/><text x="98.3981%" y="399.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (7 samples, 0.93%)</title><rect x="98.1481%" y="373" width="0.9259%" height="15" fill="rgb(211,99,13)" fg:x="742" fg:w="7"/><text x="98.3981%" y="383.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (7 samples, 0.93%)</title><rect x="98.1481%" y="357" width="0.9259%" height="15" fill="rgb(232,111,31)" fg:x="742" fg:w="7"/><text x="98.3981%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.53%)</title><rect x="99.0741%" y="469" width="0.5291%" height="15" fill="rgb(245,82,37)" fg:x="749" fg:w="4"/><text x="99.3241%" y="479.50"></text></g><g><title>__ctype_init (1 samples, 0.13%)</title><rect x="99.6032%" y="469" width="0.1323%" height="15" fill="rgb(227,149,46)" fg:x="753" fg:w="1"/><text x="99.8532%" y="479.50"></text></g><g><title>__libc_calloc (1 samples, 0.13%)</title><rect x="99.7354%" y="469" width="0.1323%" height="15" fill="rgb(218,36,50)" fg:x="754" fg:w="1"/><text x="99.9854%" y="479.50"></text></g><g><title>all (756 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="756"/><text x="0.2500%" y="527.50"></text></g><g><title>tokio-runtime-w (15 samples, 1.98%)</title><rect x="98.0159%" y="501" width="1.9841%" height="15" fill="rgb(238,224,15)" fg:x="741" fg:w="15"/><text x="98.2659%" y="511.50">t..</text></g><g><title>[unknown] (7 samples, 0.93%)</title><rect x="99.0741%" y="485" width="0.9259%" height="15" fill="rgb(241,136,10)" fg:x="749" fg:w="7"/><text x="99.3241%" y="495.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.13%)</title><rect x="99.8677%" y="469" width="0.1323%" height="15" fill="rgb(208,32,45)" fg:x="755" fg:w="1"/><text x="100.1177%" y="479.50"></text></g></svg></svg>