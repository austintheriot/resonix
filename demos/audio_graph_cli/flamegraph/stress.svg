<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="3024"><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.0000%" y="725" width="0.0331%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.0000%" y="709" width="0.0331%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.03%)</title><rect x="0.0000%" y="693" width="0.0331%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.0000%" y="677" width="0.0331%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.0000%" y="661" width="0.0331%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.03%)</title><rect x="0.0000%" y="645" width="0.0331%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="629" width="0.0331%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.03%)</title><rect x="0.0000%" y="613" width="0.0331%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>std::panicking::try (1 samples, 0.03%)</title><rect x="0.0000%" y="597" width="0.0331%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.03%)</title><rect x="0.0000%" y="581" width="0.0331%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.0000%" y="565" width="0.0331%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="549" width="0.0331%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.03%)</title><rect x="0.0000%" y="533" width="0.0331%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="517" width="0.0331%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.03%)</title><rect x="0.0000%" y="501" width="0.0331%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="0.0000%" y="485" width="0.0331%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="0.0000%" y="469" width="0.0331%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="0.0000%" y="453" width="0.0331%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="0.0000%" y="437" width="0.0331%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.03%)</title><rect x="0.0000%" y="421" width="0.0331%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0331%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0331%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0331%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0331%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="0.0000%" y="341" width="0.0331%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>:273292 (2 samples, 0.07%)</title><rect x="0.0000%" y="741" width="0.0661%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0331%" y="725" width="0.0331%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2831%" y="735.50"></text></g><g><title>:273293 (1 samples, 0.03%)</title><rect x="0.0661%" y="741" width="0.0331%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.3161%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0661%" y="725" width="0.0331%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.3161%" y="735.50"></text></g><g><title>:273294 (1 samples, 0.03%)</title><rect x="0.0992%" y="741" width="0.0331%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="1"/><text x="0.3492%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.0992%" y="725" width="0.0331%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="0.3492%" y="735.50"></text></g><g><title>:273295 (1 samples, 0.03%)</title><rect x="0.1323%" y="741" width="0.0331%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.3823%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1323%" y="725" width="0.0331%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.3823%" y="735.50"></text></g><g><title>:273296 (1 samples, 0.03%)</title><rect x="0.1653%" y="741" width="0.0331%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.4153%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1653%" y="725" width="0.0331%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.4153%" y="735.50"></text></g><g><title>:273297 (1 samples, 0.03%)</title><rect x="0.1984%" y="741" width="0.0331%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.4484%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1984%" y="725" width="0.0331%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.4484%" y="735.50"></text></g><g><title>:273298 (1 samples, 0.03%)</title><rect x="0.2315%" y="741" width="0.0331%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.4815%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2315%" y="725" width="0.0331%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.4815%" y="735.50"></text></g><g><title>:273299 (1 samples, 0.03%)</title><rect x="0.2646%" y="741" width="0.0331%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.5146%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2646%" y="725" width="0.0331%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.5146%" y="735.50"></text></g><g><title>:273300 (1 samples, 0.03%)</title><rect x="0.2976%" y="741" width="0.0331%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.5476%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2976%" y="725" width="0.0331%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.5476%" y="735.50"></text></g><g><title>:273301 (1 samples, 0.03%)</title><rect x="0.3307%" y="741" width="0.0331%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="0.5807%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3307%" y="725" width="0.0331%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="0.5807%" y="735.50"></text></g><g><title>:273302 (1 samples, 0.03%)</title><rect x="0.3638%" y="741" width="0.0331%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="1"/><text x="0.6138%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3638%" y="725" width="0.0331%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="0.6138%" y="735.50"></text></g><g><title>:273303 (1 samples, 0.03%)</title><rect x="0.3968%" y="741" width="0.0331%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="0.6468%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.3968%" y="725" width="0.0331%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="0.6468%" y="735.50"></text></g><g><title>:273304 (1 samples, 0.03%)</title><rect x="0.4299%" y="741" width="0.0331%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="1"/><text x="0.6799%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4299%" y="725" width="0.0331%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="1"/><text x="0.6799%" y="735.50"></text></g><g><title>:273305 (1 samples, 0.03%)</title><rect x="0.4630%" y="741" width="0.0331%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="0.7130%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4630%" y="725" width="0.0331%" height="15" fill="rgb(247,123,22)" fg:x="14" fg:w="1"/><text x="0.7130%" y="735.50"></text></g><g><title>:273306 (1 samples, 0.03%)</title><rect x="0.4960%" y="741" width="0.0331%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="1"/><text x="0.7460%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.4960%" y="725" width="0.0331%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="1"/><text x="0.7460%" y="735.50"></text></g><g><title>:273307 (1 samples, 0.03%)</title><rect x="0.5291%" y="741" width="0.0331%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="0.7791%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5291%" y="725" width="0.0331%" height="15" fill="rgb(217,147,25)" fg:x="16" fg:w="1"/><text x="0.7791%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.5622%" y="725" width="0.0331%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="1"/><text x="0.8122%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.5622%" y="709" width="0.0331%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="1"/><text x="0.8122%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.03%)</title><rect x="0.5622%" y="693" width="0.0331%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="1"/><text x="0.8122%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.5622%" y="677" width="0.0331%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="1"/><text x="0.8122%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.5622%" y="661" width="0.0331%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="1"/><text x="0.8122%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.03%)</title><rect x="0.5622%" y="645" width="0.0331%" height="15" fill="rgb(210,229,1)" fg:x="17" fg:w="1"/><text x="0.8122%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 0.03%)</title><rect x="0.5622%" y="629" width="0.0331%" height="15" fill="rgb(222,148,37)" fg:x="17" fg:w="1"/><text x="0.8122%" y="639.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.03%)</title><rect x="0.5622%" y="613" width="0.0331%" height="15" fill="rgb(234,67,33)" fg:x="17" fg:w="1"/><text x="0.8122%" y="623.50"></text></g><g><title>std::panicking::try (1 samples, 0.03%)</title><rect x="0.5622%" y="597" width="0.0331%" height="15" fill="rgb(247,98,35)" fg:x="17" fg:w="1"/><text x="0.8122%" y="607.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.03%)</title><rect x="0.5622%" y="581" width="0.0331%" height="15" fill="rgb(247,138,52)" fg:x="17" fg:w="1"/><text x="0.8122%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.03%)</title><rect x="0.5622%" y="565" width="0.0331%" height="15" fill="rgb(213,79,30)" fg:x="17" fg:w="1"/><text x="0.8122%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="0.5622%" y="549" width="0.0331%" height="15" fill="rgb(246,177,23)" fg:x="17" fg:w="1"/><text x="0.8122%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.03%)</title><rect x="0.5622%" y="533" width="0.0331%" height="15" fill="rgb(230,62,27)" fg:x="17" fg:w="1"/><text x="0.8122%" y="543.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (1 samples, 0.03%)</title><rect x="0.5622%" y="517" width="0.0331%" height="15" fill="rgb(216,154,8)" fg:x="17" fg:w="1"/><text x="0.8122%" y="527.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.03%)</title><rect x="0.5622%" y="501" width="0.0331%" height="15" fill="rgb(244,35,45)" fg:x="17" fg:w="1"/><text x="0.8122%" y="511.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="0.5622%" y="485" width="0.0331%" height="15" fill="rgb(251,115,12)" fg:x="17" fg:w="1"/><text x="0.8122%" y="495.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="0.5622%" y="469" width="0.0331%" height="15" fill="rgb(240,54,50)" fg:x="17" fg:w="1"/><text x="0.8122%" y="479.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="0.5622%" y="453" width="0.0331%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="1"/><text x="0.8122%" y="463.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="0.5622%" y="437" width="0.0331%" height="15" fill="rgb(207,117,47)" fg:x="17" fg:w="1"/><text x="0.8122%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.03%)</title><rect x="0.5622%" y="421" width="0.0331%" height="15" fill="rgb(249,43,39)" fg:x="17" fg:w="1"/><text x="0.8122%" y="431.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.03%)</title><rect x="0.5622%" y="405" width="0.0331%" height="15" fill="rgb(209,38,44)" fg:x="17" fg:w="1"/><text x="0.8122%" y="415.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="0.5622%" y="389" width="0.0331%" height="15" fill="rgb(236,212,23)" fg:x="17" fg:w="1"/><text x="0.8122%" y="399.50"></text></g><g><title>:273308 (2 samples, 0.07%)</title><rect x="0.5622%" y="741" width="0.0661%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="2"/><text x="0.8122%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5952%" y="725" width="0.0331%" height="15" fill="rgb(211,96,35)" fg:x="18" fg:w="1"/><text x="0.8452%" y="735.50"></text></g><g><title>:273309 (1 samples, 0.03%)</title><rect x="0.6283%" y="741" width="0.0331%" height="15" fill="rgb(253,215,40)" fg:x="19" fg:w="1"/><text x="0.8783%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.6283%" y="725" width="0.0331%" height="15" fill="rgb(211,81,21)" fg:x="19" fg:w="1"/><text x="0.8783%" y="735.50"></text></g><g><title>:273311 (1 samples, 0.03%)</title><rect x="0.6614%" y="741" width="0.0331%" height="15" fill="rgb(208,190,38)" fg:x="20" fg:w="1"/><text x="0.9114%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.6614%" y="725" width="0.0331%" height="15" fill="rgb(235,213,38)" fg:x="20" fg:w="1"/><text x="0.9114%" y="735.50"></text></g><g><title>[anon] (1 samples, 0.03%)</title><rect x="0.6944%" y="725" width="0.0331%" height="15" fill="rgb(237,122,38)" fg:x="21" fg:w="1"/><text x="0.9444%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.6944%" y="709" width="0.0331%" height="15" fill="rgb(244,218,35)" fg:x="21" fg:w="1"/><text x="0.9444%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.7275%" y="709" width="0.0331%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="1"/><text x="0.9775%" y="719.50"></text></g><g><title>:273312 (3 samples, 0.10%)</title><rect x="0.6944%" y="741" width="0.0992%" height="15" fill="rgb(210,16,53)" fg:x="21" fg:w="3"/><text x="0.9444%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.7275%" y="725" width="0.0661%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="2"/><text x="0.9775%" y="735.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="0.7606%" y="709" width="0.0331%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="1"/><text x="1.0106%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.03%)</title><rect x="0.7606%" y="693" width="0.0331%" height="15" fill="rgb(250,166,2)" fg:x="23" fg:w="1"/><text x="1.0106%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.03%)</title><rect x="0.7606%" y="677" width="0.0331%" height="15" fill="rgb(242,216,29)" fg:x="23" fg:w="1"/><text x="1.0106%" y="687.50"></text></g><g><title>[anon] (1 samples, 0.03%)</title><rect x="0.7937%" y="725" width="0.0331%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="1"/><text x="1.0437%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.7937%" y="709" width="0.0331%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="1"/><text x="1.0437%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.8267%" y="725" width="0.0331%" height="15" fill="rgb(253,11,6)" fg:x="25" fg:w="1"/><text x="1.0767%" y="735.50"></text></g><g><title>[libc.so.6] (5 samples, 0.17%)</title><rect x="0.8598%" y="725" width="0.1653%" height="15" fill="rgb(247,143,39)" fg:x="26" fg:w="5"/><text x="1.1098%" y="735.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="1.0251%" y="725" width="0.0331%" height="15" fill="rgb(236,97,10)" fg:x="31" fg:w="1"/><text x="1.2751%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="1.0251%" y="709" width="0.0331%" height="15" fill="rgb(233,208,19)" fg:x="31" fg:w="1"/><text x="1.2751%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="1.0582%" y="709" width="0.0331%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="1"/><text x="1.3082%" y="719.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="1.0913%" y="709" width="0.0661%" height="15" fill="rgb(220,129,5)" fg:x="33" fg:w="2"/><text x="1.3413%" y="719.50"></text></g><g><title>__ctype_init (1 samples, 0.03%)</title><rect x="1.1574%" y="709" width="0.0331%" height="15" fill="rgb(242,17,10)" fg:x="35" fg:w="1"/><text x="1.4074%" y="719.50"></text></g><g><title>_dl_allocate_tls (1 samples, 0.03%)</title><rect x="1.1905%" y="709" width="0.0331%" height="15" fill="rgb(242,107,0)" fg:x="36" fg:w="1"/><text x="1.4405%" y="719.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.03%)</title><rect x="1.2235%" y="709" width="0.0331%" height="15" fill="rgb(251,28,31)" fg:x="37" fg:w="1"/><text x="1.4735%" y="719.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.03%)</title><rect x="1.2235%" y="693" width="0.0331%" height="15" fill="rgb(233,223,10)" fg:x="37" fg:w="1"/><text x="1.4735%" y="703.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::register_fork_handler::{{closure}} (1 samples, 0.03%)</title><rect x="1.2235%" y="677" width="0.0331%" height="15" fill="rgb(215,21,27)" fg:x="37" fg:w="1"/><text x="1.4735%" y="687.50"></text></g><g><title>[unknown] (7 samples, 0.23%)</title><rect x="1.0582%" y="725" width="0.2315%" height="15" fill="rgb(232,23,21)" fg:x="32" fg:w="7"/><text x="1.3082%" y="735.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.03%)</title><rect x="1.2566%" y="709" width="0.0331%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="1"/><text x="1.5066%" y="719.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="1.2566%" y="693" width="0.0331%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="1"/><text x="1.5066%" y="703.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.03%)</title><rect x="1.2566%" y="677" width="0.0331%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="1"/><text x="1.5066%" y="687.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.03%)</title><rect x="1.2566%" y="661" width="0.0331%" height="15" fill="rgb(212,68,19)" fg:x="38" fg:w="1"/><text x="1.5066%" y="671.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="1.2897%" y="277" width="0.0331%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="1"/><text x="1.5397%" y="287.50"></text></g><g><title>tokio::runtime::builder::Builder::build (2 samples, 0.07%)</title><rect x="1.2897%" y="453" width="0.0661%" height="15" fill="rgb(223,113,26)" fg:x="39" fg:w="2"/><text x="1.5397%" y="463.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (2 samples, 0.07%)</title><rect x="1.2897%" y="437" width="0.0661%" height="15" fill="rgb(206,192,2)" fg:x="39" fg:w="2"/><text x="1.5397%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (2 samples, 0.07%)</title><rect x="1.2897%" y="421" width="0.0661%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="2"/><text x="1.5397%" y="431.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.07%)</title><rect x="1.2897%" y="405" width="0.0661%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="2"/><text x="1.5397%" y="415.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (2 samples, 0.07%)</title><rect x="1.2897%" y="389" width="0.0661%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="2"/><text x="1.5397%" y="399.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.07%)</title><rect x="1.2897%" y="373" width="0.0661%" height="15" fill="rgb(245,159,27)" fg:x="39" fg:w="2"/><text x="1.5397%" y="383.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (2 samples, 0.07%)</title><rect x="1.2897%" y="357" width="0.0661%" height="15" fill="rgb(245,172,44)" fg:x="39" fg:w="2"/><text x="1.5397%" y="367.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.07%)</title><rect x="1.2897%" y="341" width="0.0661%" height="15" fill="rgb(236,23,11)" fg:x="39" fg:w="2"/><text x="1.5397%" y="351.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.07%)</title><rect x="1.2897%" y="325" width="0.0661%" height="15" fill="rgb(205,117,38)" fg:x="39" fg:w="2"/><text x="1.5397%" y="335.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.07%)</title><rect x="1.2897%" y="309" width="0.0661%" height="15" fill="rgb(237,72,25)" fg:x="39" fg:w="2"/><text x="1.5397%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.07%)</title><rect x="1.2897%" y="293" width="0.0661%" height="15" fill="rgb(244,70,9)" fg:x="39" fg:w="2"/><text x="1.5397%" y="303.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.03%)</title><rect x="1.3228%" y="277" width="0.0331%" height="15" fill="rgb(217,125,39)" fg:x="40" fg:w="1"/><text x="1.5728%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.03%)</title><rect x="1.3228%" y="261" width="0.0331%" height="15" fill="rgb(235,36,10)" fg:x="40" fg:w="1"/><text x="1.5728%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.03%)</title><rect x="1.3228%" y="245" width="0.0331%" height="15" fill="rgb(251,123,47)" fg:x="40" fg:w="1"/><text x="1.5728%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="1.3228%" y="229" width="0.0331%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="1"/><text x="1.5728%" y="239.50"></text></g><g><title>audio_graph_cli (18 samples, 0.60%)</title><rect x="0.7937%" y="741" width="0.5952%" height="15" fill="rgb(238,131,9)" fg:x="24" fg:w="18"/><text x="1.0437%" y="751.50"></text></g><g><title>_start (3 samples, 0.10%)</title><rect x="1.2897%" y="725" width="0.0992%" height="15" fill="rgb(211,50,8)" fg:x="39" fg:w="3"/><text x="1.5397%" y="735.50"></text></g><g><title>__libc_start_main (3 samples, 0.10%)</title><rect x="1.2897%" y="709" width="0.0992%" height="15" fill="rgb(245,182,24)" fg:x="39" fg:w="3"/><text x="1.5397%" y="719.50"></text></g><g><title>[libc.so.6] (3 samples, 0.10%)</title><rect x="1.2897%" y="693" width="0.0992%" height="15" fill="rgb(242,14,37)" fg:x="39" fg:w="3"/><text x="1.5397%" y="703.50"></text></g><g><title>main (3 samples, 0.10%)</title><rect x="1.2897%" y="677" width="0.0992%" height="15" fill="rgb(246,228,12)" fg:x="39" fg:w="3"/><text x="1.5397%" y="687.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.10%)</title><rect x="1.2897%" y="661" width="0.0992%" height="15" fill="rgb(213,55,15)" fg:x="39" fg:w="3"/><text x="1.5397%" y="671.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.10%)</title><rect x="1.2897%" y="645" width="0.0992%" height="15" fill="rgb(209,9,3)" fg:x="39" fg:w="3"/><text x="1.5397%" y="655.50"></text></g><g><title>std::panicking::try (3 samples, 0.10%)</title><rect x="1.2897%" y="629" width="0.0992%" height="15" fill="rgb(230,59,30)" fg:x="39" fg:w="3"/><text x="1.5397%" y="639.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.10%)</title><rect x="1.2897%" y="613" width="0.0992%" height="15" fill="rgb(209,121,21)" fg:x="39" fg:w="3"/><text x="1.5397%" y="623.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (3 samples, 0.10%)</title><rect x="1.2897%" y="597" width="0.0992%" height="15" fill="rgb(220,109,13)" fg:x="39" fg:w="3"/><text x="1.5397%" y="607.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.10%)</title><rect x="1.2897%" y="581" width="0.0992%" height="15" fill="rgb(232,18,1)" fg:x="39" fg:w="3"/><text x="1.5397%" y="591.50"></text></g><g><title>std::panicking::try (3 samples, 0.10%)</title><rect x="1.2897%" y="565" width="0.0992%" height="15" fill="rgb(215,41,42)" fg:x="39" fg:w="3"/><text x="1.5397%" y="575.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.10%)</title><rect x="1.2897%" y="549" width="0.0992%" height="15" fill="rgb(224,123,36)" fg:x="39" fg:w="3"/><text x="1.5397%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.10%)</title><rect x="1.2897%" y="533" width="0.0992%" height="15" fill="rgb(240,125,3)" fg:x="39" fg:w="3"/><text x="1.5397%" y="543.50"></text></g><g><title>std::rt::lang_start::{{closure}} (3 samples, 0.10%)</title><rect x="1.2897%" y="517" width="0.0992%" height="15" fill="rgb(205,98,50)" fg:x="39" fg:w="3"/><text x="1.5397%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.10%)</title><rect x="1.2897%" y="501" width="0.0992%" height="15" fill="rgb(205,185,37)" fg:x="39" fg:w="3"/><text x="1.5397%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.10%)</title><rect x="1.2897%" y="485" width="0.0992%" height="15" fill="rgb(238,207,15)" fg:x="39" fg:w="3"/><text x="1.5397%" y="495.50"></text></g><g><title>audio_graph_cli::main (3 samples, 0.10%)</title><rect x="1.2897%" y="469" width="0.0992%" height="15" fill="rgb(213,199,42)" fg:x="39" fg:w="3"/><text x="1.5397%" y="479.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 0.03%)</title><rect x="1.3558%" y="453" width="0.0331%" height="15" fill="rgb(235,201,11)" fg:x="41" fg:w="1"/><text x="1.6058%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1 samples, 0.03%)</title><rect x="1.3558%" y="437" width="0.0331%" height="15" fill="rgb(207,46,11)" fg:x="41" fg:w="1"/><text x="1.6058%" y="447.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (1 samples, 0.03%)</title><rect x="1.3558%" y="421" width="0.0331%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="1"/><text x="1.6058%" y="431.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.03%)</title><rect x="1.3558%" y="405" width="0.0331%" height="15" fill="rgb(243,32,47)" fg:x="41" fg:w="1"/><text x="1.6058%" y="415.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.03%)</title><rect x="1.3558%" y="389" width="0.0331%" height="15" fill="rgb(247,202,23)" fg:x="41" fg:w="1"/><text x="1.6058%" y="399.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.03%)</title><rect x="1.3558%" y="373" width="0.0331%" height="15" fill="rgb(219,102,11)" fg:x="41" fg:w="1"/><text x="1.6058%" y="383.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (1 samples, 0.03%)</title><rect x="1.3558%" y="357" width="0.0331%" height="15" fill="rgb(243,110,44)" fg:x="41" fg:w="1"/><text x="1.6058%" y="367.50"></text></g><g><title>audio_graph_cli::main::{{closure}} (1 samples, 0.03%)</title><rect x="1.3558%" y="341" width="0.0331%" height="15" fill="rgb(222,74,54)" fg:x="41" fg:w="1"/><text x="1.6058%" y="351.50"></text></g><g><title>resonix_graph::audio_context::AudioContext::new (1 samples, 0.03%)</title><rect x="1.3558%" y="325" width="0.0331%" height="15" fill="rgb(216,99,12)" fg:x="41" fg:w="1"/><text x="1.6058%" y="335.50"></text></g><g><title>&lt;resonix_graph::audio_context::AudioContext as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="1.3558%" y="309" width="0.0331%" height="15" fill="rgb(226,22,26)" fg:x="41" fg:w="1"/><text x="1.6058%" y="319.50"></text></g><g><title>uuid::v4::&lt;impl uuid::Uuid&gt;::new_v4 (1 samples, 0.03%)</title><rect x="1.3558%" y="293" width="0.0331%" height="15" fill="rgb(217,163,10)" fg:x="41" fg:w="1"/><text x="1.6058%" y="303.50"></text></g><g><title>uuid::rng::bytes (1 samples, 0.03%)</title><rect x="1.3558%" y="277" width="0.0331%" height="15" fill="rgb(213,25,53)" fg:x="41" fg:w="1"/><text x="1.6058%" y="287.50"></text></g><g><title>rand::random (1 samples, 0.03%)</title><rect x="1.3558%" y="261" width="0.0331%" height="15" fill="rgb(252,105,26)" fg:x="41" fg:w="1"/><text x="1.6058%" y="271.50"></text></g><g><title>rand::rngs::thread::thread_rng (1 samples, 0.03%)</title><rect x="1.3558%" y="245" width="0.0331%" height="15" fill="rgb(220,39,43)" fg:x="41" fg:w="1"/><text x="1.6058%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="1.3558%" y="229" width="0.0331%" height="15" fill="rgb(229,68,48)" fg:x="41" fg:w="1"/><text x="1.6058%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="1.3558%" y="213" width="0.0331%" height="15" fill="rgb(252,8,32)" fg:x="41" fg:w="1"/><text x="1.6058%" y="223.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (1 samples, 0.03%)</title><rect x="1.3558%" y="197" width="0.0331%" height="15" fill="rgb(223,20,43)" fg:x="41" fg:w="1"/><text x="1.6058%" y="207.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.03%)</title><rect x="1.3558%" y="181" width="0.0331%" height="15" fill="rgb(229,81,49)" fg:x="41" fg:w="1"/><text x="1.6058%" y="191.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.03%)</title><rect x="1.3558%" y="165" width="0.0331%" height="15" fill="rgb(236,28,36)" fg:x="41" fg:w="1"/><text x="1.6058%" y="175.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.03%)</title><rect x="1.3558%" y="149" width="0.0331%" height="15" fill="rgb(249,185,26)" fg:x="41" fg:w="1"/><text x="1.6058%" y="159.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit::{{closure}} (1 samples, 0.03%)</title><rect x="1.3558%" y="133" width="0.0331%" height="15" fill="rgb(249,174,33)" fg:x="41" fg:w="1"/><text x="1.6058%" y="143.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__init (1 samples, 0.03%)</title><rect x="1.3558%" y="117" width="0.0331%" height="15" fill="rgb(233,201,37)" fg:x="41" fg:w="1"/><text x="1.6058%" y="127.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt;::new (1 samples, 0.03%)</title><rect x="1.3558%" y="101" width="0.0331%" height="15" fill="rgb(221,78,26)" fg:x="41" fg:w="1"/><text x="1.6058%" y="111.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::new (1 samples, 0.03%)</title><rect x="1.3558%" y="85" width="0.0331%" height="15" fill="rgb(250,127,30)" fg:x="41" fg:w="1"/><text x="1.6058%" y="95.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::register_fork_handler (1 samples, 0.03%)</title><rect x="1.3558%" y="69" width="0.0331%" height="15" fill="rgb(230,49,44)" fg:x="41" fg:w="1"/><text x="1.6058%" y="79.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.03%)</title><rect x="1.3558%" y="53" width="0.0331%" height="15" fill="rgb(229,67,23)" fg:x="41" fg:w="1"/><text x="1.6058%" y="63.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1 samples, 0.03%)</title><rect x="1.3558%" y="37" width="0.0331%" height="15" fill="rgb(249,83,47)" fg:x="41" fg:w="1"/><text x="1.6058%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.13%)</title><rect x="1.8188%" y="661" width="0.1323%" height="15" fill="rgb(215,43,3)" fg:x="55" fg:w="4"/><text x="2.0688%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.86%)</title><rect x="1.8188%" y="677" width="0.8598%" height="15" fill="rgb(238,154,13)" fg:x="55" fg:w="26"/><text x="2.0688%" y="687.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.73%)</title><rect x="1.9511%" y="661" width="0.7275%" height="15" fill="rgb(219,56,2)" fg:x="59" fg:w="22"/><text x="2.2011%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 1.82%)</title><rect x="1.3889%" y="693" width="1.8188%" height="15" fill="rgb(233,0,4)" fg:x="42" fg:w="55"/><text x="1.6389%" y="703.50">&lt;..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.53%)</title><rect x="2.6786%" y="677" width="0.5291%" height="15" fill="rgb(235,30,7)" fg:x="81" fg:w="16"/><text x="2.9286%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8 samples, 0.26%)</title><rect x="2.9431%" y="661" width="0.2646%" height="15" fill="rgb(250,79,13)" fg:x="89" fg:w="8"/><text x="3.1931%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8 samples, 0.26%)</title><rect x="2.9431%" y="645" width="0.2646%" height="15" fill="rgb(211,146,34)" fg:x="89" fg:w="8"/><text x="3.1931%" y="655.50"></text></g><g><title>[[heap]] (60 samples, 1.98%)</title><rect x="1.3889%" y="725" width="1.9841%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="60"/><text x="1.6389%" y="735.50">[..</text></g><g><title>anon.693c22983ed6b4fd9d6c84d4109e303a.4.llvm.13281337907696462133 (60 samples, 1.98%)</title><rect x="1.3889%" y="709" width="1.9841%" height="15" fill="rgb(235,168,5)" fg:x="42" fg:w="60"/><text x="1.6389%" y="719.50">a..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (5 samples, 0.17%)</title><rect x="3.2077%" y="693" width="0.1653%" height="15" fill="rgb(221,155,16)" fg:x="97" fg:w="5"/><text x="3.4577%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.09%)</title><rect x="6.9775%" y="677" width="1.0913%" height="15" fill="rgb(215,215,53)" fg:x="211" fg:w="33"/><text x="7.2275%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 4.50%)</title><rect x="6.9775%" y="693" width="4.4974%" height="15" fill="rgb(223,4,10)" fg:x="211" fg:w="136"/><text x="7.2275%" y="703.50">&lt;core..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 3.41%)</title><rect x="8.0688%" y="677" width="3.4061%" height="15" fill="rgb(234,103,6)" fg:x="244" fg:w="103"/><text x="8.3188%" y="687.50">&lt;pe..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="11.4418%" y="661" width="0.0331%" height="15" fill="rgb(227,97,0)" fg:x="346" fg:w="1"/><text x="11.6918%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="11.4418%" y="645" width="0.0331%" height="15" fill="rgb(234,150,53)" fg:x="346" fg:w="1"/><text x="11.6918%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (317 samples, 10.48%)</title><rect x="3.3730%" y="709" width="10.4828%" height="15" fill="rgb(228,201,54)" fg:x="102" fg:w="317"/><text x="3.6230%" y="719.50">&lt;core::iter::ad..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 2.38%)</title><rect x="11.4749%" y="693" width="2.3810%" height="15" fill="rgb(222,22,37)" fg:x="347" fg:w="72"/><text x="11.7249%" y="703.50">&lt;p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (25 samples, 0.83%)</title><rect x="13.0291%" y="677" width="0.8267%" height="15" fill="rgb(237,53,32)" fg:x="394" fg:w="25"/><text x="13.2791%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (25 samples, 0.83%)</title><rect x="13.0291%" y="661" width="0.8267%" height="15" fill="rgb(233,25,53)" fg:x="394" fg:w="25"/><text x="13.2791%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 2.88%)</title><rect x="19.9405%" y="693" width="2.8770%" height="15" fill="rgb(210,40,34)" fg:x="603" fg:w="87"/><text x="20.1905%" y="703.50">&lt;&amp;..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (45 samples, 1.49%)</title><rect x="22.8175%" y="645" width="1.4881%" height="15" fill="rgb(241,220,44)" fg:x="690" fg:w="45"/><text x="23.0675%" y="655.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (420 samples, 13.89%)</title><rect x="13.8558%" y="709" width="13.8889%" height="15" fill="rgb(235,28,35)" fg:x="419" fg:w="420"/><text x="14.1058%" y="719.50">&lt;resonix_graph::nodes..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (149 samples, 4.93%)</title><rect x="22.8175%" y="693" width="4.9272%" height="15" fill="rgb(210,56,17)" fg:x="690" fg:w="149"/><text x="23.0675%" y="703.50">core::..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (149 samples, 4.93%)</title><rect x="22.8175%" y="677" width="4.9272%" height="15" fill="rgb(224,130,29)" fg:x="690" fg:w="149"/><text x="23.0675%" y="687.50">&lt;f32 a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (149 samples, 4.93%)</title><rect x="22.8175%" y="661" width="4.9272%" height="15" fill="rgb(235,212,8)" fg:x="690" fg:w="149"/><text x="23.0675%" y="671.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (104 samples, 3.44%)</title><rect x="24.3056%" y="645" width="3.4392%" height="15" fill="rgb(223,33,50)" fg:x="735" fg:w="104"/><text x="24.5556%" y="655.50">cor..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 3.44%)</title><rect x="24.3056%" y="629" width="3.4392%" height="15" fill="rgb(219,149,13)" fg:x="735" fg:w="104"/><text x="24.5556%" y="639.50">&lt;&amp;m..</text></g><g><title>[libm.so.6] (1 samples, 0.03%)</title><rect x="27.7447%" y="709" width="0.0331%" height="15" fill="rgb(250,156,29)" fg:x="839" fg:w="1"/><text x="27.9947%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="27.7778%" y="709" width="0.0331%" height="15" fill="rgb(216,193,19)" fg:x="840" fg:w="1"/><text x="28.0278%" y="719.50"></text></g><g><title>resonix_graph::processor::Processor::dac_nodes_sum (1 samples, 0.03%)</title><rect x="27.8108%" y="709" width="0.0331%" height="15" fill="rgb(216,135,14)" fg:x="841" fg:w="1"/><text x="28.0608%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.89%)</title><rect x="29.7619%" y="693" width="0.8929%" height="15" fill="rgb(241,47,5)" fg:x="900" fg:w="27"/><text x="30.0119%" y="703.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;&gt;::index_mut (16 samples, 0.53%)</title><rect x="30.6548%" y="693" width="0.5291%" height="15" fill="rgb(233,42,35)" fg:x="927" fg:w="16"/><text x="30.9048%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (16 samples, 0.53%)</title><rect x="30.6548%" y="677" width="0.5291%" height="15" fill="rgb(231,13,6)" fg:x="927" fg:w="16"/><text x="30.9048%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (16 samples, 0.53%)</title><rect x="30.6548%" y="661" width="0.5291%" height="15" fill="rgb(207,181,40)" fg:x="927" fg:w="16"/><text x="30.9048%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.53%)</title><rect x="30.6548%" y="645" width="0.5291%" height="15" fill="rgb(254,173,49)" fg:x="927" fg:w="16"/><text x="30.9048%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (35 samples, 1.16%)</title><rect x="31.1839%" y="693" width="1.1574%" height="15" fill="rgb(221,1,38)" fg:x="943" fg:w="35"/><text x="31.4339%" y="703.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (35 samples, 1.16%)</title><rect x="31.1839%" y="677" width="1.1574%" height="15" fill="rgb(206,124,46)" fg:x="943" fg:w="35"/><text x="31.4339%" y="687.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (46 samples, 1.52%)</title><rect x="32.3413%" y="693" width="1.5212%" height="15" fill="rgb(249,21,11)" fg:x="978" fg:w="46"/><text x="32.5913%" y="703.50"></text></g><g><title>[anon] (938 samples, 31.02%)</title><rect x="3.3730%" y="725" width="31.0185%" height="15" fill="rgb(222,201,40)" fg:x="102" fg:w="938"/><text x="3.6230%" y="735.50">[anon]</text></g><g><title>resonix_graph::processor::Processor::run (198 samples, 6.55%)</title><rect x="27.8439%" y="709" width="6.5476%" height="15" fill="rgb(235,61,29)" fg:x="842" fg:w="198"/><text x="28.0939%" y="719.50">resonix_g..</text></g><g><title>resonix_graph::processor::Processor::run (16 samples, 0.53%)</title><rect x="33.8624%" y="693" width="0.5291%" height="15" fill="rgb(219,207,3)" fg:x="1024" fg:w="16"/><text x="34.1124%" y="703.50"></text></g><g><title>resonix_graph::processor::Processor::dac_nodes_sum (1 samples, 0.03%)</title><rect x="34.3915%" y="405" width="0.0331%" height="15" fill="rgb(222,56,46)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.03%)</title><rect x="34.3915%" y="389" width="0.0331%" height="15" fill="rgb(239,76,54)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="399.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.03%)</title><rect x="34.3915%" y="373" width="0.0331%" height="15" fill="rgb(231,124,27)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="34.3915%" y="357" width="0.0331%" height="15" fill="rgb(249,195,6)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="34.3915%" y="341" width="0.0331%" height="15" fill="rgb(237,174,47)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.03%)</title><rect x="34.3915%" y="325" width="0.0331%" height="15" fill="rgb(206,201,31)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="335.50"></text></g><g><title>resonix_graph::processor::Processor::dac_nodes_sum::{{closure}} (1 samples, 0.03%)</title><rect x="34.3915%" y="309" width="0.0331%" height="15" fill="rgb(231,57,52)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="34.3915%" y="293" width="0.0331%" height="15" fill="rgb(248,177,22)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="34.3915%" y="277" width="0.0331%" height="15" fill="rgb(215,211,37)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="34.3915%" y="261" width="0.0331%" height="15" fill="rgb(241,128,51)" fg:x="1040" fg:w="1"/><text x="34.6415%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="36.7063%" y="373" width="0.1653%" height="15" fill="rgb(227,165,31)" fg:x="1110" fg:w="5"/><text x="36.9563%" y="383.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="36.7063%" y="357" width="0.1653%" height="15" fill="rgb(228,167,24)" fg:x="1110" fg:w="5"/><text x="36.9563%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.50%)</title><rect x="36.4418%" y="389" width="0.4960%" height="15" fill="rgb(228,143,12)" fg:x="1102" fg:w="15"/><text x="36.6918%" y="399.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="36.8717%" y="373" width="0.0661%" height="15" fill="rgb(249,149,8)" fg:x="1115" fg:w="2"/><text x="37.1217%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="36.9048%" y="357" width="0.0331%" height="15" fill="rgb(243,35,44)" fg:x="1116" fg:w="1"/><text x="37.1548%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="36.9048%" y="341" width="0.0331%" height="15" fill="rgb(246,89,9)" fg:x="1116" fg:w="1"/><text x="37.1548%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.76%)</title><rect x="36.9378%" y="389" width="0.7606%" height="15" fill="rgb(233,213,13)" fg:x="1117" fg:w="23"/><text x="37.1878%" y="399.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;&gt;::index_mut (18 samples, 0.60%)</title><rect x="37.6984%" y="389" width="0.5952%" height="15" fill="rgb(233,141,41)" fg:x="1140" fg:w="18"/><text x="37.9484%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (18 samples, 0.60%)</title><rect x="37.6984%" y="373" width="0.5952%" height="15" fill="rgb(239,167,4)" fg:x="1140" fg:w="18"/><text x="37.9484%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (18 samples, 0.60%)</title><rect x="37.6984%" y="357" width="0.5952%" height="15" fill="rgb(209,217,16)" fg:x="1140" fg:w="18"/><text x="37.9484%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (18 samples, 0.60%)</title><rect x="37.6984%" y="341" width="0.5952%" height="15" fill="rgb(219,88,35)" fg:x="1140" fg:w="18"/><text x="37.9484%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.56%)</title><rect x="44.4775%" y="325" width="0.5622%" height="15" fill="rgb(220,193,23)" fg:x="1345" fg:w="17"/><text x="44.7275%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 3.21%)</title><rect x="44.4775%" y="341" width="3.2077%" height="15" fill="rgb(230,90,52)" fg:x="1345" fg:w="97"/><text x="44.7275%" y="351.50">&lt;co..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 2.65%)</title><rect x="45.0397%" y="325" width="2.6455%" height="15" fill="rgb(252,106,19)" fg:x="1362" fg:w="80"/><text x="45.2897%" y="335.50">&lt;p..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (226 samples, 7.47%)</title><rect x="41.7989%" y="357" width="7.4735%" height="15" fill="rgb(206,74,20)" fg:x="1264" fg:w="226"/><text x="42.0489%" y="367.50">&lt;core::ite..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 1.59%)</title><rect x="47.6852%" y="341" width="1.5873%" height="15" fill="rgb(230,138,44)" fg:x="1442" fg:w="48"/><text x="47.9352%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (19 samples, 0.63%)</title><rect x="48.6442%" y="325" width="0.6283%" height="15" fill="rgb(235,182,43)" fg:x="1471" fg:w="19"/><text x="48.8942%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (19 samples, 0.63%)</title><rect x="48.6442%" y="309" width="0.6283%" height="15" fill="rgb(242,16,51)" fg:x="1471" fg:w="19"/><text x="48.8942%" y="319.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (16 samples, 0.53%)</title><rect x="49.2725%" y="357" width="0.5291%" height="15" fill="rgb(248,9,4)" fg:x="1490" fg:w="16"/><text x="49.5225%" y="367.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (289 samples, 9.56%)</title><rect x="40.2778%" y="373" width="9.5569%" height="15" fill="rgb(210,31,22)" fg:x="1218" fg:w="289"/><text x="40.5278%" y="383.50">&lt;&amp;mut I as cor..</text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="49.8016%" y="357" width="0.0331%" height="15" fill="rgb(239,54,39)" fg:x="1506" fg:w="1"/><text x="50.0516%" y="367.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (22 samples, 0.73%)</title><rect x="49.8347%" y="325" width="0.7275%" height="15" fill="rgb(230,99,41)" fg:x="1507" fg:w="22"/><text x="50.0847%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.26%)</title><rect x="54.1997%" y="261" width="0.2646%" height="15" fill="rgb(253,106,12)" fg:x="1639" fg:w="8"/><text x="54.4497%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 1.42%)</title><rect x="54.1997%" y="277" width="1.4220%" height="15" fill="rgb(213,46,41)" fg:x="1639" fg:w="43"/><text x="54.4497%" y="287.50"></text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 1.16%)</title><rect x="54.4643%" y="261" width="1.1574%" height="15" fill="rgb(215,133,35)" fg:x="1647" fg:w="35"/><text x="54.7143%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 3.94%)</title><rect x="52.7116%" y="293" width="3.9352%" height="15" fill="rgb(213,28,5)" fg:x="1594" fg:w="119"/><text x="52.9616%" y="303.50">&lt;cor..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 1.03%)</title><rect x="55.6217%" y="277" width="1.0251%" height="15" fill="rgb(215,77,49)" fg:x="1682" fg:w="31"/><text x="55.8717%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.36%)</title><rect x="56.2831%" y="261" width="0.3638%" height="15" fill="rgb(248,100,22)" fg:x="1702" fg:w="11"/><text x="56.5331%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.36%)</title><rect x="56.2831%" y="245" width="0.3638%" height="15" fill="rgb(208,67,9)" fg:x="1702" fg:w="11"/><text x="56.5331%" y="255.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (569 samples, 18.82%)</title><rect x="38.2937%" y="389" width="18.8161%" height="15" fill="rgb(219,133,21)" fg:x="1158" fg:w="569"/><text x="38.5437%" y="399.50">&lt;resonix_graph::nodes::pass_t..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (220 samples, 7.28%)</title><rect x="49.8347%" y="373" width="7.2751%" height="15" fill="rgb(246,46,29)" fg:x="1507" fg:w="220"/><text x="50.0847%" y="383.50">core::iter..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (220 samples, 7.28%)</title><rect x="49.8347%" y="357" width="7.2751%" height="15" fill="rgb(246,185,52)" fg:x="1507" fg:w="220"/><text x="50.0847%" y="367.50">&lt;f32 as co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (220 samples, 7.28%)</title><rect x="49.8347%" y="341" width="7.2751%" height="15" fill="rgb(252,136,11)" fg:x="1507" fg:w="220"/><text x="50.0847%" y="351.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (198 samples, 6.55%)</title><rect x="50.5622%" y="325" width="6.5476%" height="15" fill="rgb(219,138,53)" fg:x="1529" fg:w="198"/><text x="50.8122%" y="335.50">core::ite..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 6.55%)</title><rect x="50.5622%" y="309" width="6.5476%" height="15" fill="rgb(211,51,23)" fg:x="1529" fg:w="198"/><text x="50.8122%" y="319.50">&lt;&amp;mut I a..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (14 samples, 0.46%)</title><rect x="56.6468%" y="293" width="0.4630%" height="15" fill="rgb(247,221,28)" fg:x="1713" fg:w="14"/><text x="56.8968%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (44 samples, 1.46%)</title><rect x="57.1098%" y="389" width="1.4550%" height="15" fill="rgb(251,222,45)" fg:x="1727" fg:w="44"/><text x="57.3598%" y="399.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (44 samples, 1.46%)</title><rect x="57.1098%" y="373" width="1.4550%" height="15" fill="rgb(217,162,53)" fg:x="1727" fg:w="44"/><text x="57.3598%" y="383.50"></text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (56 samples, 1.85%)</title><rect x="58.5648%" y="389" width="1.8519%" height="15" fill="rgb(229,93,14)" fg:x="1771" fg:w="56"/><text x="58.8148%" y="399.50">p..</text></g><g><title>[libc.so.6] (813 samples, 26.88%)</title><rect x="34.3915%" y="725" width="26.8849%" height="15" fill="rgb(209,67,49)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="735.50">[libc.so.6]</text></g><g><title>[libc.so.6] (813 samples, 26.88%)</title><rect x="34.3915%" y="709" width="26.8849%" height="15" fill="rgb(213,87,29)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="719.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (813 samples, 26.88%)</title><rect x="34.3915%" y="693" width="26.8849%" height="15" fill="rgb(205,151,52)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="703.50">std::sys::unix::thread::Thread::new::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (813 samples, 26.88%)</title><rect x="34.3915%" y="677" width="26.8849%" height="15" fill="rgb(253,215,39)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (813 samples, 26.88%)</title><rect x="34.3915%" y="661" width="26.8849%" height="15" fill="rgb(221,220,41)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::funct..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (813 samples, 26.88%)</title><rect x="34.3915%" y="645" width="26.8849%" height="15" fill="rgb(218,133,21)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="655.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="629" width="26.8849%" height="15" fill="rgb(221,193,43)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="639.50">std::thread::Builder::spawn_unchecked_::{{c..</text></g><g><title>std::panic::catch_unwind (813 samples, 26.88%)</title><rect x="34.3915%" y="613" width="26.8849%" height="15" fill="rgb(240,128,52)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (813 samples, 26.88%)</title><rect x="34.3915%" y="597" width="26.8849%" height="15" fill="rgb(253,114,12)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (813 samples, 26.88%)</title><rect x="34.3915%" y="581" width="26.8849%" height="15" fill="rgb(215,223,47)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (813 samples, 26.88%)</title><rect x="34.3915%" y="565" width="26.8849%" height="15" fill="rgb(248,225,23)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="575.50">&lt;core::panic::unwind_safe::AssertUnwindSafe..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="549" width="26.8849%" height="15" fill="rgb(250,108,0)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="559.50">std::thread::Builder::spawn_unchecked_::{{c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (813 samples, 26.88%)</title><rect x="34.3915%" y="533" width="26.8849%" height="15" fill="rgb(228,208,7)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="543.50">std::sys_common::backtrace::__rust_begin_sh..</text></g><g><title>cpal::host::alsa::Stream::new_output::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="517" width="26.8849%" height="15" fill="rgb(244,45,10)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="527.50">cpal::host::alsa::Stream::new_output::{{clo..</text></g><g><title>cpal::host::alsa::output_stream_worker (813 samples, 26.88%)</title><rect x="34.3915%" y="501" width="26.8849%" height="15" fill="rgb(207,125,25)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="511.50">cpal::host::alsa::output_stream_worker</text></g><g><title>cpal::host::alsa::process_output (813 samples, 26.88%)</title><rect x="34.3915%" y="485" width="26.8849%" height="15" fill="rgb(210,195,18)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="495.50">cpal::host::alsa::process_output</text></g><g><title>cpal::traits::DeviceTrait::build_output_stream::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="469" width="26.8849%" height="15" fill="rgb(249,80,12)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="479.50">cpal::traits::DeviceTrait::build_output_str..</text></g><g><title>resonix_dac::dac_struct::DAC::create_stream::{{closure}}::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="453" width="26.8849%" height="15" fill="rgb(221,65,9)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="463.50">resonix_dac::dac_struct::DAC::create_stream..</text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (813 samples, 26.88%)</title><rect x="34.3915%" y="437" width="26.8849%" height="15" fill="rgb(235,49,36)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="447.50">&lt;Callback as resonix_dac::write_frame_to_bu..</text></g><g><title>resonix_graph::audio_context::AudioContext::initialize_dac_from_config::{{closure}}::{{closure}} (813 samples, 26.88%)</title><rect x="34.3915%" y="421" width="26.8849%" height="15" fill="rgb(225,32,20)" fg:x="1040" fg:w="813"/><text x="34.6415%" y="431.50">resonix_graph::audio_context::AudioContext:..</text></g><g><title>resonix_graph::processor::Processor::run (812 samples, 26.85%)</title><rect x="34.4246%" y="405" width="26.8519%" height="15" fill="rgb(215,141,46)" fg:x="1041" fg:w="812"/><text x="34.6746%" y="415.50">resonix_graph::processor::Processor::run</text></g><g><title>resonix_graph::processor::Processor::run (26 samples, 0.86%)</title><rect x="60.4167%" y="389" width="0.8598%" height="15" fill="rgb(250,160,47)" fg:x="1827" fg:w="26"/><text x="60.6667%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.69%)</title><rect x="63.4259%" y="677" width="0.6944%" height="15" fill="rgb(216,222,40)" fg:x="1918" fg:w="21"/><text x="63.6759%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 2.91%)</title><rect x="63.4259%" y="693" width="2.9101%" height="15" fill="rgb(234,217,39)" fg:x="1918" fg:w="88"/><text x="63.6759%" y="703.50">&lt;c..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 2.22%)</title><rect x="64.1204%" y="677" width="2.2156%" height="15" fill="rgb(207,178,40)" fg:x="1939" fg:w="67"/><text x="64.3704%" y="687.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 6.91%)</title><rect x="61.2765%" y="709" width="6.9114%" height="15" fill="rgb(221,136,13)" fg:x="1853" fg:w="209"/><text x="61.5265%" y="719.50">&lt;core::it..</text></g><g><title>&lt;petgraph::graph_impl::Edges&lt;E,Ty,Ix&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 1.85%)</title><rect x="66.3360%" y="693" width="1.8519%" height="15" fill="rgb(249,199,10)" fg:x="2006" fg:w="56"/><text x="66.5860%" y="703.50">&lt;..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (24 samples, 0.79%)</title><rect x="67.3942%" y="677" width="0.7937%" height="15" fill="rgb(249,222,13)" fg:x="2038" fg:w="24"/><text x="67.6442%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (24 samples, 0.79%)</title><rect x="67.3942%" y="661" width="0.7937%" height="15" fill="rgb(244,185,38)" fg:x="2038" fg:w="24"/><text x="67.6442%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 2.38%)</title><rect x="72.6521%" y="693" width="2.3810%" height="15" fill="rgb(236,202,9)" fg:x="2197" fg:w="72"/><text x="72.9021%" y="703.50">&lt;&amp;..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (26 samples, 0.86%)</title><rect x="75.0331%" y="645" width="0.8598%" height="15" fill="rgb(250,229,37)" fg:x="2269" fg:w="26"/><text x="75.2831%" y="655.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (317 samples, 10.48%)</title><rect x="68.1878%" y="709" width="10.4828%" height="15" fill="rgb(206,174,23)" fg:x="2062" fg:w="317"/><text x="68.4378%" y="719.50">&lt;resonix_graph:..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (110 samples, 3.64%)</title><rect x="75.0331%" y="693" width="3.6376%" height="15" fill="rgb(211,33,43)" fg:x="2269" fg:w="110"/><text x="75.2831%" y="703.50">core..</text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (110 samples, 3.64%)</title><rect x="75.0331%" y="677" width="3.6376%" height="15" fill="rgb(245,58,50)" fg:x="2269" fg:w="110"/><text x="75.2831%" y="687.50">&lt;f32..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110 samples, 3.64%)</title><rect x="75.0331%" y="661" width="3.6376%" height="15" fill="rgb(244,68,36)" fg:x="2269" fg:w="110"/><text x="75.2831%" y="671.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (84 samples, 2.78%)</title><rect x="75.8929%" y="645" width="2.7778%" height="15" fill="rgb(232,229,15)" fg:x="2295" fg:w="84"/><text x="76.1429%" y="655.50">co..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 2.78%)</title><rect x="75.8929%" y="629" width="2.7778%" height="15" fill="rgb(254,30,23)" fg:x="2295" fg:w="84"/><text x="76.1429%" y="639.50">&lt;&amp;..</text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="78.6706%" y="709" width="0.0331%" height="15" fill="rgb(235,160,14)" fg:x="2379" fg:w="1"/><text x="78.9206%" y="719.50"></text></g><g><title>[libm.so.6] (1 samples, 0.03%)</title><rect x="78.7037%" y="709" width="0.0331%" height="15" fill="rgb(212,155,44)" fg:x="2380" fg:w="1"/><text x="78.9537%" y="719.50"></text></g><g><title>pa_signal_init (38 samples, 1.26%)</title><rect x="78.7368%" y="709" width="1.2566%" height="15" fill="rgb(226,2,50)" fg:x="2381" fg:w="38"/><text x="78.9868%" y="719.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (38 samples, 1.26%)</title><rect x="78.7368%" y="693" width="1.2566%" height="15" fill="rgb(234,177,6)" fg:x="2381" fg:w="38"/><text x="78.9868%" y="703.50"></text></g><g><title>resonix_graph::processor::Processor::dac_nodes_sum (1 samples, 0.03%)</title><rect x="79.9934%" y="709" width="0.0331%" height="15" fill="rgb(217,24,9)" fg:x="2419" fg:w="1"/><text x="80.2434%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.03%)</title><rect x="79.9934%" y="693" width="0.0331%" height="15" fill="rgb(220,13,46)" fg:x="2419" fg:w="1"/><text x="80.2434%" y="703.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.03%)</title><rect x="79.9934%" y="677" width="0.0331%" height="15" fill="rgb(239,221,27)" fg:x="2419" fg:w="1"/><text x="80.2434%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="79.9934%" y="661" width="0.0331%" height="15" fill="rgb(222,198,25)" fg:x="2419" fg:w="1"/><text x="80.2434%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="79.9934%" y="645" width="0.0331%" height="15" fill="rgb(211,99,13)" fg:x="2419" fg:w="1"/><text x="80.2434%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 1.12%)</title><rect x="83.8624%" y="693" width="1.1243%" height="15" fill="rgb(232,111,31)" fg:x="2536" fg:w="34"/><text x="84.1124%" y="703.50"></text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::IndexMut&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;&gt;::index_mut (28 samples, 0.93%)</title><rect x="84.9868%" y="693" width="0.9259%" height="15" fill="rgb(245,82,37)" fg:x="2570" fg:w="28"/><text x="85.2368%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (28 samples, 0.93%)</title><rect x="84.9868%" y="677" width="0.9259%" height="15" fill="rgb(227,149,46)" fg:x="2570" fg:w="28"/><text x="85.2368%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (28 samples, 0.93%)</title><rect x="84.9868%" y="661" width="0.9259%" height="15" fill="rgb(218,36,50)" fg:x="2570" fg:w="28"/><text x="85.2368%" y="671.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (28 samples, 0.93%)</title><rect x="84.9868%" y="645" width="0.9259%" height="15" fill="rgb(226,80,48)" fg:x="2570" fg:w="28"/><text x="85.2368%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (73 samples, 2.41%)</title><rect x="85.9127%" y="693" width="2.4140%" height="15" fill="rgb(238,224,15)" fg:x="2598" fg:w="73"/><text x="86.1627%" y="703.50">co..</text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (73 samples, 2.41%)</title><rect x="85.9127%" y="677" width="2.4140%" height="15" fill="rgb(241,136,10)" fg:x="2598" fg:w="73"/><text x="86.1627%" y="687.50">co..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edges_directed (57 samples, 1.88%)</title><rect x="88.3267%" y="693" width="1.8849%" height="15" fill="rgb(208,32,45)" fg:x="2671" fg:w="57"/><text x="88.5767%" y="703.50">p..</text></g><g><title>cpal_alsa_out (2,730 samples, 90.28%)</title><rect x="1.3889%" y="741" width="90.2778%" height="15" fill="rgb(207,135,9)" fg:x="42" fg:w="2730"/><text x="1.6389%" y="751.50">cpal_alsa_out</text></g><g><title>[unknown] (919 samples, 30.39%)</title><rect x="61.2765%" y="725" width="30.3902%" height="15" fill="rgb(206,86,44)" fg:x="1853" fg:w="919"/><text x="61.5265%" y="735.50">[unknown]</text></g><g><title>resonix_graph::processor::Processor::run (352 samples, 11.64%)</title><rect x="80.0265%" y="709" width="11.6402%" height="15" fill="rgb(245,177,15)" fg:x="2420" fg:w="352"/><text x="80.2765%" y="719.50">resonix_graph::pr..</text></g><g><title>resonix_graph::processor::Processor::run (44 samples, 1.46%)</title><rect x="90.2116%" y="693" width="1.4550%" height="15" fill="rgb(206,64,50)" fg:x="2728" fg:w="44"/><text x="90.4616%" y="703.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="91.6667%" y="709" width="0.0331%" height="15" fill="rgb(234,36,40)" fg:x="2772" fg:w="1"/><text x="91.9167%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="91.6667%" y="693" width="0.0331%" height="15" fill="rgb(213,64,8)" fg:x="2772" fg:w="1"/><text x="91.9167%" y="703.50"></text></g><g><title>[libc.so.6] (3 samples, 0.10%)</title><rect x="91.6997%" y="709" width="0.0992%" height="15" fill="rgb(210,75,36)" fg:x="2773" fg:w="3"/><text x="91.9497%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.07%)</title><rect x="91.7989%" y="709" width="0.0661%" height="15" fill="rgb(229,88,21)" fg:x="2776" fg:w="2"/><text x="92.0489%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (3 samples, 0.10%)</title><rect x="91.8651%" y="709" width="0.0992%" height="15" fill="rgb(252,204,47)" fg:x="2778" fg:w="3"/><text x="92.1151%" y="719.50"></text></g><g><title>__libc_calloc (1 samples, 0.03%)</title><rect x="91.9643%" y="709" width="0.0331%" height="15" fill="rgb(208,77,27)" fg:x="2781" fg:w="1"/><text x="92.2143%" y="719.50"></text></g><g><title>pa_iochannel_is_readable (1 samples, 0.03%)</title><rect x="91.9974%" y="709" width="0.0331%" height="15" fill="rgb(221,76,26)" fg:x="2782" fg:w="1"/><text x="92.2474%" y="719.50"></text></g><g><title>pa_mainloop_dispatch (2 samples, 0.07%)</title><rect x="92.0304%" y="709" width="0.0661%" height="15" fill="rgb(225,139,18)" fg:x="2783" fg:w="2"/><text x="92.2804%" y="719.50"></text></g><g><title>[[heap]] (14 samples, 0.46%)</title><rect x="91.6667%" y="725" width="0.4630%" height="15" fill="rgb(230,137,11)" fg:x="2772" fg:w="14"/><text x="91.9167%" y="735.50"></text></g><g><title>recvmsg (1 samples, 0.03%)</title><rect x="92.0966%" y="709" width="0.0331%" height="15" fill="rgb(212,28,1)" fg:x="2785" fg:w="1"/><text x="92.3466%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="92.1296%" y="709" width="0.0331%" height="15" fill="rgb(248,164,17)" fg:x="2786" fg:w="1"/><text x="92.3796%" y="719.50"></text></g><g><title>[[stack]] (2 samples, 0.07%)</title><rect x="92.1296%" y="725" width="0.0661%" height="15" fill="rgb(222,171,42)" fg:x="2786" fg:w="2"/><text x="92.3796%" y="735.50"></text></g><g><title>pa_context_ref (1 samples, 0.03%)</title><rect x="92.1627%" y="709" width="0.0331%" height="15" fill="rgb(243,84,45)" fg:x="2787" fg:w="1"/><text x="92.4127%" y="719.50"></text></g><g><title>[libc.so.6] (74 samples, 2.45%)</title><rect x="92.1958%" y="709" width="2.4471%" height="15" fill="rgb(252,49,23)" fg:x="2788" fg:w="74"/><text x="92.4458%" y="719.50">[l..</text></g><g><title>[libpulse.so.0.24.1] (3 samples, 0.10%)</title><rect x="94.6429%" y="709" width="0.0992%" height="15" fill="rgb(215,19,7)" fg:x="2862" fg:w="3"/><text x="94.8929%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="94.7421%" y="709" width="0.0331%" height="15" fill="rgb(238,81,41)" fg:x="2865" fg:w="1"/><text x="94.9921%" y="719.50"></text></g><g><title>__errno_location (1 samples, 0.03%)</title><rect x="94.7751%" y="709" width="0.0331%" height="15" fill="rgb(210,199,37)" fg:x="2866" fg:w="1"/><text x="95.0251%" y="719.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.07%)</title><rect x="94.8082%" y="709" width="0.0661%" height="15" fill="rgb(244,192,49)" fg:x="2867" fg:w="2"/><text x="95.0582%" y="719.50"></text></g><g><title>pa_context_get_state (1 samples, 0.03%)</title><rect x="94.8743%" y="709" width="0.0331%" height="15" fill="rgb(226,211,11)" fg:x="2869" fg:w="1"/><text x="95.1243%" y="719.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="94.9074%" y="709" width="0.0331%" height="15" fill="rgb(236,162,54)" fg:x="2870" fg:w="1"/><text x="95.1574%" y="719.50"></text></g><g><title>pa_mainloop_prepare (1 samples, 0.03%)</title><rect x="94.9405%" y="709" width="0.0331%" height="15" fill="rgb(220,229,9)" fg:x="2871" fg:w="1"/><text x="95.1905%" y="719.50"></text></g><g><title>pa_memblock_ref (1 samples, 0.03%)</title><rect x="94.9735%" y="709" width="0.0331%" height="15" fill="rgb(250,87,22)" fg:x="2872" fg:w="1"/><text x="95.2235%" y="719.50"></text></g><g><title>pa_memblock_unref (1 samples, 0.03%)</title><rect x="95.0066%" y="709" width="0.0331%" height="15" fill="rgb(239,43,17)" fg:x="2873" fg:w="1"/><text x="95.2566%" y="719.50"></text></g><g><title>pa_pdispatch_run (1 samples, 0.03%)</title><rect x="95.0397%" y="709" width="0.0331%" height="15" fill="rgb(231,177,25)" fg:x="2874" fg:w="1"/><text x="95.2897%" y="719.50"></text></g><g><title>pa_rtclock_get (1 samples, 0.03%)</title><rect x="95.0728%" y="709" width="0.0331%" height="15" fill="rgb(219,179,1)" fg:x="2875" fg:w="1"/><text x="95.3228%" y="719.50"></text></g><g><title>pa_timeval_rtstore (1 samples, 0.03%)</title><rect x="95.1058%" y="709" width="0.0331%" height="15" fill="rgb(238,219,53)" fg:x="2876" fg:w="1"/><text x="95.3558%" y="719.50"></text></g><g><title>pthread_mutex_lock (2 samples, 0.07%)</title><rect x="95.1389%" y="709" width="0.0661%" height="15" fill="rgb(232,167,36)" fg:x="2877" fg:w="2"/><text x="95.3889%" y="719.50"></text></g><g><title>[anon] (92 samples, 3.04%)</title><rect x="92.1958%" y="725" width="3.0423%" height="15" fill="rgb(244,19,51)" fg:x="2788" fg:w="92"/><text x="92.4458%" y="735.50">[an..</text></g><g><title>read (1 samples, 0.03%)</title><rect x="95.2050%" y="709" width="0.0331%" height="15" fill="rgb(224,6,22)" fg:x="2879" fg:w="1"/><text x="95.4550%" y="719.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="95.2712%" y="501" width="0.0331%" height="15" fill="rgb(224,145,5)" fg:x="2881" fg:w="1"/><text x="95.5212%" y="511.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (2 samples, 0.07%)</title><rect x="95.2712%" y="517" width="0.0661%" height="15" fill="rgb(234,130,49)" fg:x="2881" fg:w="2"/><text x="95.5212%" y="527.50"></text></g><g><title>pa_stream_writable_size (1 samples, 0.03%)</title><rect x="95.3042%" y="501" width="0.0331%" height="15" fill="rgb(254,6,2)" fg:x="2882" fg:w="1"/><text x="95.5542%" y="511.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="95.3042%" y="485" width="0.0331%" height="15" fill="rgb(208,96,46)" fg:x="2882" fg:w="1"/><text x="95.5542%" y="495.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (3 samples, 0.10%)</title><rect x="95.2712%" y="533" width="0.0992%" height="15" fill="rgb(239,3,39)" fg:x="2881" fg:w="3"/><text x="95.5212%" y="543.50"></text></g><g><title>__getpid (1 samples, 0.03%)</title><rect x="95.3373%" y="517" width="0.0331%" height="15" fill="rgb(233,210,1)" fg:x="2883" fg:w="1"/><text x="95.5873%" y="527.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="95.3704%" y="533" width="0.0331%" height="15" fill="rgb(244,137,37)" fg:x="2884" fg:w="1"/><text x="95.6204%" y="543.50"></text></g><g><title>[libpulse.so.0.24.1] (5 samples, 0.17%)</title><rect x="95.2712%" y="549" width="0.1653%" height="15" fill="rgb(240,136,2)" fg:x="2881" fg:w="5"/><text x="95.5212%" y="559.50"></text></g><g><title>pa_hashmap_get (1 samples, 0.03%)</title><rect x="95.4034%" y="533" width="0.0331%" height="15" fill="rgb(239,18,37)" fg:x="2885" fg:w="1"/><text x="95.6534%" y="543.50"></text></g><g><title>__getpid (1 samples, 0.03%)</title><rect x="95.4034%" y="517" width="0.0331%" height="15" fill="rgb(218,185,22)" fg:x="2885" fg:w="1"/><text x="95.6534%" y="527.50"></text></g><g><title>__errno_location (1 samples, 0.03%)</title><rect x="95.4365%" y="549" width="0.0331%" height="15" fill="rgb(225,218,4)" fg:x="2886" fg:w="1"/><text x="95.6865%" y="559.50"></text></g><g><title>[libpulse.so.0.24.1] (7 samples, 0.23%)</title><rect x="95.2712%" y="581" width="0.2315%" height="15" fill="rgb(230,182,32)" fg:x="2881" fg:w="7"/><text x="95.5212%" y="591.50"></text></g><g><title>pa_pdispatch_run (7 samples, 0.23%)</title><rect x="95.2712%" y="565" width="0.2315%" height="15" fill="rgb(242,56,43)" fg:x="2881" fg:w="7"/><text x="95.5212%" y="575.50"></text></g><g><title>pa_tagstruct_putu32 (1 samples, 0.03%)</title><rect x="95.4696%" y="549" width="0.0331%" height="15" fill="rgb(233,99,24)" fg:x="2887" fg:w="1"/><text x="95.7196%" y="559.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="95.5026%" y="581" width="0.0331%" height="15" fill="rgb(234,209,42)" fg:x="2888" fg:w="1"/><text x="95.7526%" y="591.50"></text></g><g><title>pa_iochannel_write (1 samples, 0.03%)</title><rect x="95.5357%" y="581" width="0.0331%" height="15" fill="rgb(227,7,12)" fg:x="2889" fg:w="1"/><text x="95.7857%" y="591.50"></text></g><g><title>pa_write (1 samples, 0.03%)</title><rect x="95.5357%" y="565" width="0.0331%" height="15" fill="rgb(245,203,43)" fg:x="2889" fg:w="1"/><text x="95.7857%" y="575.50"></text></g><g><title>__send (1 samples, 0.03%)</title><rect x="95.5357%" y="549" width="0.0331%" height="15" fill="rgb(238,205,33)" fg:x="2889" fg:w="1"/><text x="95.7857%" y="559.50"></text></g><g><title>pulse_check_connection (1 samples, 0.03%)</title><rect x="95.5357%" y="533" width="0.0331%" height="15" fill="rgb(231,56,7)" fg:x="2889" fg:w="1"/><text x="95.7857%" y="543.50"></text></g><g><title>[libpulsecommon-15.99.so] (10 samples, 0.33%)</title><rect x="95.2712%" y="597" width="0.3307%" height="15" fill="rgb(244,186,29)" fg:x="2881" fg:w="10"/><text x="95.5212%" y="607.50"></text></g><g><title>pa_queue_pop (1 samples, 0.03%)</title><rect x="95.5688%" y="581" width="0.0331%" height="15" fill="rgb(234,111,31)" fg:x="2890" fg:w="1"/><text x="95.8188%" y="591.50"></text></g><g><title>pa_flist_push (1 samples, 0.03%)</title><rect x="95.5688%" y="565" width="0.0331%" height="15" fill="rgb(241,149,10)" fg:x="2890" fg:w="1"/><text x="95.8188%" y="575.50"></text></g><g><title>pa_tagstruct_gets64 (1 samples, 0.03%)</title><rect x="95.5688%" y="549" width="0.0331%" height="15" fill="rgb(249,206,44)" fg:x="2890" fg:w="1"/><text x="95.8188%" y="559.50"></text></g><g><title>[libpulsecommon-15.99.so] (12 samples, 0.40%)</title><rect x="95.2381%" y="613" width="0.3968%" height="15" fill="rgb(251,153,30)" fg:x="2880" fg:w="12"/><text x="95.4881%" y="623.50"></text></g><g><title>write (1 samples, 0.03%)</title><rect x="95.6019%" y="597" width="0.0331%" height="15" fill="rgb(239,152,38)" fg:x="2891" fg:w="1"/><text x="95.8519%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.6349%" y="581" width="0.0331%" height="15" fill="rgb(249,139,47)" fg:x="2892" fg:w="1"/><text x="95.8849%" y="591.50"></text></g><g><title>pa_mainloop_dispatch (14 samples, 0.46%)</title><rect x="95.2381%" y="629" width="0.4630%" height="15" fill="rgb(244,64,35)" fg:x="2880" fg:w="14"/><text x="95.4881%" y="639.50"></text></g><g><title>pa_rtclock_now (2 samples, 0.07%)</title><rect x="95.6349%" y="613" width="0.0661%" height="15" fill="rgb(216,46,15)" fg:x="2892" fg:w="2"/><text x="95.8849%" y="623.50"></text></g><g><title>pa_rtclock_get (2 samples, 0.07%)</title><rect x="95.6349%" y="597" width="0.0661%" height="15" fill="rgb(250,74,19)" fg:x="2892" fg:w="2"/><text x="95.8849%" y="607.50"></text></g><g><title>__send (1 samples, 0.03%)</title><rect x="95.6680%" y="581" width="0.0331%" height="15" fill="rgb(249,42,33)" fg:x="2893" fg:w="1"/><text x="95.9180%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.7011%" y="613" width="0.0331%" height="15" fill="rgb(242,149,17)" fg:x="2894" fg:w="1"/><text x="95.9511%" y="623.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (1 samples, 0.03%)</title><rect x="95.7341%" y="597" width="0.0331%" height="15" fill="rgb(244,29,21)" fg:x="2895" fg:w="1"/><text x="95.9841%" y="607.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="95.7341%" y="581" width="0.0331%" height="15" fill="rgb(220,130,37)" fg:x="2895" fg:w="1"/><text x="95.9841%" y="591.50"></text></g><g><title>[libpulse.so.0.24.1] (4 samples, 0.13%)</title><rect x="95.7672%" y="597" width="0.1323%" height="15" fill="rgb(211,67,2)" fg:x="2896" fg:w="4"/><text x="96.0172%" y="607.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="95.8995%" y="597" width="0.0331%" height="15" fill="rgb(235,68,52)" fg:x="2900" fg:w="1"/><text x="96.1495%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.2302%" y="581" width="0.0331%" height="15" fill="rgb(246,142,3)" fg:x="2910" fg:w="1"/><text x="96.4802%" y="591.50"></text></g><g><title>__poll (12 samples, 0.40%)</title><rect x="95.9325%" y="597" width="0.3968%" height="15" fill="rgb(241,25,7)" fg:x="2901" fg:w="12"/><text x="96.1825%" y="607.50"></text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.07%)</title><rect x="96.2632%" y="581" width="0.0661%" height="15" fill="rgb(242,119,39)" fg:x="2911" fg:w="2"/><text x="96.5132%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.03%)</title><rect x="96.3294%" y="597" width="0.0331%" height="15" fill="rgb(241,98,45)" fg:x="2913" fg:w="1"/><text x="96.5794%" y="607.50"></text></g><g><title>[libpulse.so.0.24.1] (2 samples, 0.07%)</title><rect x="96.3624%" y="581" width="0.0661%" height="15" fill="rgb(254,28,30)" fg:x="2914" fg:w="2"/><text x="96.6124%" y="591.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="96.4286%" y="581" width="0.0331%" height="15" fill="rgb(241,142,54)" fg:x="2916" fg:w="1"/><text x="96.6786%" y="591.50"></text></g><g><title>pa_pstream_ref (1 samples, 0.03%)</title><rect x="96.4616%" y="581" width="0.0331%" height="15" fill="rgb(222,85,15)" fg:x="2917" fg:w="1"/><text x="96.7116%" y="591.50"></text></g><g><title>pa_mutex_lock (5 samples, 0.17%)</title><rect x="96.3624%" y="597" width="0.1653%" height="15" fill="rgb(210,85,47)" fg:x="2914" fg:w="5"/><text x="96.6124%" y="607.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="96.4947%" y="581" width="0.0331%" height="15" fill="rgb(224,206,25)" fg:x="2918" fg:w="1"/><text x="96.7447%" y="591.50"></text></g><g><title>[libpulse.so.0.24.1] (25 samples, 0.83%)</title><rect x="95.7341%" y="613" width="0.8267%" height="15" fill="rgb(243,201,19)" fg:x="2895" fg:w="25"/><text x="95.9841%" y="623.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="96.5278%" y="597" width="0.0331%" height="15" fill="rgb(236,59,4)" fg:x="2919" fg:w="1"/><text x="96.7778%" y="607.50"></text></g><g><title>pa_mainloop_poll (27 samples, 0.89%)</title><rect x="95.7011%" y="629" width="0.8929%" height="15" fill="rgb(254,179,45)" fg:x="2894" fg:w="27"/><text x="95.9511%" y="639.50"></text></g><g><title>pa_pdispatch_unref (1 samples, 0.03%)</title><rect x="96.5608%" y="613" width="0.0331%" height="15" fill="rgb(226,14,10)" fg:x="2920" fg:w="1"/><text x="96.8108%" y="623.50"></text></g><g><title>[libc.so.6] (42 samples, 1.39%)</title><rect x="95.2381%" y="709" width="1.3889%" height="15" fill="rgb(244,27,41)" fg:x="2880" fg:w="42"/><text x="95.4881%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (42 samples, 1.39%)</title><rect x="95.2381%" y="693" width="1.3889%" height="15" fill="rgb(235,35,32)" fg:x="2880" fg:w="42"/><text x="95.4881%" y="703.50"></text></g><g><title>[libpulse.so.0.24.1] (42 samples, 1.39%)</title><rect x="95.2381%" y="677" width="1.3889%" height="15" fill="rgb(218,68,31)" fg:x="2880" fg:w="42"/><text x="95.4881%" y="687.50"></text></g><g><title>pa_mainloop_run (42 samples, 1.39%)</title><rect x="95.2381%" y="661" width="1.3889%" height="15" fill="rgb(207,120,37)" fg:x="2880" fg:w="42"/><text x="95.4881%" y="671.50"></text></g><g><title>pa_mainloop_iterate (42 samples, 1.39%)</title><rect x="95.2381%" y="645" width="1.3889%" height="15" fill="rgb(227,98,0)" fg:x="2880" fg:w="42"/><text x="95.4881%" y="655.50"></text></g><g><title>pa_mainloop_prepare (1 samples, 0.03%)</title><rect x="96.5939%" y="629" width="0.0331%" height="15" fill="rgb(207,7,3)" fg:x="2921" fg:w="1"/><text x="96.8439%" y="639.50"></text></g><g><title>pa_read (1 samples, 0.03%)</title><rect x="96.5939%" y="613" width="0.0331%" height="15" fill="rgb(206,98,19)" fg:x="2921" fg:w="1"/><text x="96.8439%" y="623.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.03%)</title><rect x="96.5939%" y="597" width="0.0331%" height="15" fill="rgb(217,5,26)" fg:x="2921" fg:w="1"/><text x="96.8439%" y="607.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="96.6270%" y="709" width="0.0331%" height="15" fill="rgb(235,190,38)" fg:x="2922" fg:w="1"/><text x="96.8770%" y="719.50"></text></g><g><title>[libc.so.6] (44 samples, 1.46%)</title><rect x="95.2381%" y="725" width="1.4550%" height="15" fill="rgb(247,86,24)" fg:x="2880" fg:w="44"/><text x="95.4881%" y="735.50"></text></g><g><title>pa_rtclock_get (1 samples, 0.03%)</title><rect x="96.6601%" y="709" width="0.0331%" height="15" fill="rgb(205,101,16)" fg:x="2923" fg:w="1"/><text x="96.9101%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.6931%" y="709" width="0.0331%" height="15" fill="rgb(246,168,33)" fg:x="2924" fg:w="1"/><text x="96.9431%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.07%)</title><rect x="96.6931%" y="725" width="0.0661%" height="15" fill="rgb(231,114,1)" fg:x="2924" fg:w="2"/><text x="96.9431%" y="735.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.03%)</title><rect x="96.7262%" y="709" width="0.0331%" height="15" fill="rgb(207,184,53)" fg:x="2925" fg:w="1"/><text x="96.9762%" y="719.50"></text></g><g><title>[libc.so.6] (71 samples, 2.35%)</title><rect x="96.7593%" y="709" width="2.3479%" height="15" fill="rgb(224,95,51)" fg:x="2926" fg:w="71"/><text x="97.0093%" y="719.50">[..</text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="99.0741%" y="693" width="0.0331%" height="15" fill="rgb(212,188,45)" fg:x="2996" fg:w="1"/><text x="99.3241%" y="703.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.03%)</title><rect x="99.1071%" y="709" width="0.0331%" height="15" fill="rgb(223,154,38)" fg:x="2997" fg:w="1"/><text x="99.3571%" y="719.50"></text></g><g><title>[libpulsecommon-15.99.so] (3 samples, 0.10%)</title><rect x="99.1402%" y="709" width="0.0992%" height="15" fill="rgb(251,22,52)" fg:x="2998" fg:w="3"/><text x="99.3902%" y="719.50"></text></g><g><title>__libc_calloc (2 samples, 0.07%)</title><rect x="99.2394%" y="709" width="0.0661%" height="15" fill="rgb(229,209,22)" fg:x="3001" fg:w="2"/><text x="99.4894%" y="719.50"></text></g><g><title>pa_iochannel_read_with_ancil_data (1 samples, 0.03%)</title><rect x="99.3056%" y="709" width="0.0331%" height="15" fill="rgb(234,138,34)" fg:x="3003" fg:w="1"/><text x="99.5556%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.3056%" y="693" width="0.0331%" height="15" fill="rgb(212,95,11)" fg:x="3003" fg:w="1"/><text x="99.5556%" y="703.50"></text></g><g><title>pa_mainloop_dispatch (2 samples, 0.07%)</title><rect x="99.3386%" y="709" width="0.0661%" height="15" fill="rgb(240,179,47)" fg:x="3004" fg:w="2"/><text x="99.5886%" y="719.50"></text></g><g><title>pa_mainloop_prepare (1 samples, 0.03%)</title><rect x="99.4048%" y="709" width="0.0331%" height="15" fill="rgb(240,163,11)" fg:x="3006" fg:w="1"/><text x="99.6548%" y="719.50"></text></g><g><title>pa_once_begin (1 samples, 0.03%)</title><rect x="99.4378%" y="709" width="0.0331%" height="15" fill="rgb(236,37,12)" fg:x="3007" fg:w="1"/><text x="99.6878%" y="719.50"></text></g><g><title>pa_pdispatch_run (1 samples, 0.03%)</title><rect x="99.4709%" y="709" width="0.0331%" height="15" fill="rgb(232,164,16)" fg:x="3008" fg:w="1"/><text x="99.7209%" y="719.50"></text></g><g><title>pa_queue_pop (1 samples, 0.03%)</title><rect x="99.5040%" y="709" width="0.0331%" height="15" fill="rgb(244,205,15)" fg:x="3009" fg:w="1"/><text x="99.7540%" y="719.50"></text></g><g><title>pa_read (1 samples, 0.03%)</title><rect x="99.5370%" y="709" width="0.0331%" height="15" fill="rgb(223,117,47)" fg:x="3010" fg:w="1"/><text x="99.7870%" y="719.50"></text></g><g><title>pa_rtclock_get (1 samples, 0.03%)</title><rect x="99.5701%" y="709" width="0.0331%" height="15" fill="rgb(244,107,35)" fg:x="3011" fg:w="1"/><text x="99.8201%" y="719.50"></text></g><g><title>pa_stream_update_timing_info (1 samples, 0.03%)</title><rect x="99.6032%" y="709" width="0.0331%" height="15" fill="rgb(205,140,8)" fg:x="3012" fg:w="1"/><text x="99.8532%" y="719.50"></text></g><g><title>[unknown] (88 samples, 2.91%)</title><rect x="96.7593%" y="725" width="2.9101%" height="15" fill="rgb(228,84,46)" fg:x="2926" fg:w="88"/><text x="97.0093%" y="735.50">[u..</text></g><g><title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="99.6362%" y="709" width="0.0331%" height="15" fill="rgb(254,188,9)" fg:x="3013" fg:w="1"/><text x="99.8862%" y="719.50"></text></g><g><title>threaded-ml (243 samples, 8.04%)</title><rect x="91.6667%" y="741" width="8.0357%" height="15" fill="rgb(206,112,54)" fg:x="2772" fg:w="243"/><text x="91.9167%" y="751.50">threaded-ml</text></g><g><title>pa_memblock_release (1 samples, 0.03%)</title><rect x="99.6693%" y="725" width="0.0331%" height="15" fill="rgb(216,84,49)" fg:x="3014" fg:w="1"/><text x="99.9193%" y="735.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.03%)</title><rect x="99.7024%" y="437" width="0.0331%" height="15" fill="rgb(214,194,35)" fg:x="3015" fg:w="1"/><text x="99.9524%" y="447.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="99.7024%" y="725" width="0.0661%" height="15" fill="rgb(249,28,3)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="735.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="99.7024%" y="709" width="0.0661%" height="15" fill="rgb(222,56,52)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="719.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.07%)</title><rect x="99.7024%" y="693" width="0.0661%" height="15" fill="rgb(245,217,50)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.07%)</title><rect x="99.7024%" y="677" width="0.0661%" height="15" fill="rgb(213,201,24)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.07%)</title><rect x="99.7024%" y="661" width="0.0661%" height="15" fill="rgb(248,116,28)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.07%)</title><rect x="99.7024%" y="645" width="0.0661%" height="15" fill="rgb(219,72,43)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 0.07%)</title><rect x="99.7024%" y="629" width="0.0661%" height="15" fill="rgb(209,138,14)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="639.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.07%)</title><rect x="99.7024%" y="613" width="0.0661%" height="15" fill="rgb(222,18,33)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="623.50"></text></g><g><title>std::panicking::try (2 samples, 0.07%)</title><rect x="99.7024%" y="597" width="0.0661%" height="15" fill="rgb(213,199,7)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="607.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.07%)</title><rect x="99.7024%" y="581" width="0.0661%" height="15" fill="rgb(250,110,10)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.07%)</title><rect x="99.7024%" y="565" width="0.0661%" height="15" fill="rgb(248,123,6)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.07%)</title><rect x="99.7024%" y="549" width="0.0661%" height="15" fill="rgb(206,91,31)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.07%)</title><rect x="99.7024%" y="533" width="0.0661%" height="15" fill="rgb(211,154,13)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="543.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 0.07%)</title><rect x="99.7024%" y="517" width="0.0661%" height="15" fill="rgb(225,148,7)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="527.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2 samples, 0.07%)</title><rect x="99.7024%" y="501" width="0.0661%" height="15" fill="rgb(220,160,43)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="511.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.07%)</title><rect x="99.7024%" y="485" width="0.0661%" height="15" fill="rgb(213,52,39)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="495.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.07%)</title><rect x="99.7024%" y="469" width="0.0661%" height="15" fill="rgb(243,137,7)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="479.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.07%)</title><rect x="99.7024%" y="453" width="0.0661%" height="15" fill="rgb(230,79,13)" fg:x="3015" fg:w="2"/><text x="99.9524%" y="463.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.03%)</title><rect x="99.7354%" y="437" width="0.0331%" height="15" fill="rgb(247,105,23)" fg:x="3016" fg:w="1"/><text x="99.9854%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (1 samples, 0.03%)</title><rect x="99.7354%" y="421" width="0.0331%" height="15" fill="rgb(223,179,41)" fg:x="3016" fg:w="1"/><text x="99.9854%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.03%)</title><rect x="99.7354%" y="405" width="0.0331%" height="15" fill="rgb(218,9,34)" fg:x="3016" fg:w="1"/><text x="99.9854%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="99.7354%" y="389" width="0.0331%" height="15" fill="rgb(222,106,8)" fg:x="3016" fg:w="1"/><text x="99.9854%" y="399.50"></text></g><g><title>[libc.so.6] (5 samples, 0.17%)</title><rect x="99.7685%" y="709" width="0.1653%" height="15" fill="rgb(211,220,0)" fg:x="3017" fg:w="5"/><text x="100.0185%" y="719.50"></text></g><g><title>all (3,024 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(229,52,16)" fg:x="0" fg:w="3024"/><text x="0.2500%" y="767.50"></text></g><g><title>tokio-runtime-w (9 samples, 0.30%)</title><rect x="99.7024%" y="741" width="0.2976%" height="15" fill="rgb(212,155,18)" fg:x="3015" fg:w="9"/><text x="99.9524%" y="751.50"></text></g><g><title>[unknown] (7 samples, 0.23%)</title><rect x="99.7685%" y="725" width="0.2315%" height="15" fill="rgb(242,21,14)" fg:x="3017" fg:w="7"/><text x="100.0185%" y="735.50"></text></g><g><title>__ctype_init (2 samples, 0.07%)</title><rect x="99.9339%" y="709" width="0.0661%" height="15" fill="rgb(222,19,48)" fg:x="3022" fg:w="2"/><text x="100.1839%" y="719.50"></text></g></svg></svg>