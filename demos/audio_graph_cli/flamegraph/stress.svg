<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="7793"><g><title>[[stack]] (5 samples, 0.06%)</title><rect x="0.0000%" y="885" width="0.0642%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5 samples, 0.06%)</title><rect x="0.0000%" y="869" width="0.0642%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="0.0513%" y="853" width="0.0128%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3013%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.01%)</title><rect x="0.0513%" y="837" width="0.0128%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3013%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.05%)</title><rect x="0.0642%" y="885" width="0.0513%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="4"/><text x="0.3142%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.04%)</title><rect x="0.0770%" y="869" width="0.0385%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="3"/><text x="0.3270%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.1027%" y="853" width="0.0128%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.3527%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.1027%" y="837" width="0.0128%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.3527%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.1027%" y="821" width="0.0128%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="0.3527%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="0.7571%" y="853" width="0.0642%" height="15" fill="rgb(220,122,19)" fg:x="59" fg:w="5"/><text x="1.0071%" y="863.50"></text></g><g><title>__ctype_init (16 samples, 0.21%)</title><rect x="0.8212%" y="853" width="0.2053%" height="15" fill="rgb(250,228,42)" fg:x="64" fg:w="16"/><text x="1.0712%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.01%)</title><rect x="1.0266%" y="773" width="0.0128%" height="15" fill="rgb(240,193,28)" fg:x="80" fg:w="1"/><text x="1.2766%" y="783.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (1 samples, 0.01%)</title><rect x="1.0266%" y="757" width="0.0128%" height="15" fill="rgb(216,20,37)" fg:x="80" fg:w="1"/><text x="1.2766%" y="767.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.0266%" y="741" width="0.0128%" height="15" fill="rgb(206,188,39)" fg:x="80" fg:w="1"/><text x="1.2766%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.04%)</title><rect x="1.0266%" y="837" width="0.0385%" height="15" fill="rgb(217,207,13)" fg:x="80" fg:w="3"/><text x="1.2766%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.04%)</title><rect x="1.0266%" y="821" width="0.0385%" height="15" fill="rgb(231,73,38)" fg:x="80" fg:w="3"/><text x="1.2766%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.04%)</title><rect x="1.0266%" y="805" width="0.0385%" height="15" fill="rgb(225,20,46)" fg:x="80" fg:w="3"/><text x="1.2766%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 0.04%)</title><rect x="1.0266%" y="789" width="0.0385%" height="15" fill="rgb(210,31,41)" fg:x="80" fg:w="3"/><text x="1.2766%" y="799.50"></text></g><g><title>std::thread::Thread::cname (2 samples, 0.03%)</title><rect x="1.0394%" y="773" width="0.0257%" height="15" fill="rgb(221,200,47)" fg:x="81" fg:w="2"/><text x="1.2894%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_deref (1 samples, 0.01%)</title><rect x="1.0522%" y="757" width="0.0128%" height="15" fill="rgb(226,26,5)" fg:x="82" fg:w="1"/><text x="1.3022%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.01%)</title><rect x="1.0522%" y="741" width="0.0128%" height="15" fill="rgb(249,33,26)" fg:x="82" fg:w="1"/><text x="1.3022%" y="751.50"></text></g><g><title>sigaltstack (1 samples, 0.01%)</title><rect x="1.0651%" y="805" width="0.0128%" height="15" fill="rgb(235,183,28)" fg:x="83" fg:w="1"/><text x="1.3151%" y="815.50"></text></g><g><title>[libc.so.6] (78 samples, 1.00%)</title><rect x="0.1155%" y="885" width="1.0009%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="78"/><text x="0.3655%" y="895.50"></text></g><g><title>[libc.so.6] (76 samples, 0.98%)</title><rect x="0.1412%" y="869" width="0.9752%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="76"/><text x="0.3912%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7 samples, 0.09%)</title><rect x="1.0266%" y="853" width="0.0898%" height="15" fill="rgb(241,131,45)" fg:x="80" fg:w="7"/><text x="1.2766%" y="863.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 0.05%)</title><rect x="1.0651%" y="837" width="0.0513%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="4"/><text x="1.3151%" y="847.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 0.05%)</title><rect x="1.0651%" y="821" width="0.0513%" height="15" fill="rgb(225,111,53)" fg:x="83" fg:w="4"/><text x="1.3151%" y="831.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (3 samples, 0.04%)</title><rect x="1.0779%" y="805" width="0.0385%" height="15" fill="rgb(238,160,17)" fg:x="84" fg:w="3"/><text x="1.3279%" y="815.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (3 samples, 0.04%)</title><rect x="1.0779%" y="789" width="0.0385%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="3"/><text x="1.3279%" y="799.50"></text></g><g><title>std::sys::unix::os::page_size (2 samples, 0.03%)</title><rect x="1.0907%" y="773" width="0.0257%" height="15" fill="rgb(232,36,49)" fg:x="85" fg:w="2"/><text x="1.3407%" y="783.50"></text></g><g><title>__sysconf (2 samples, 0.03%)</title><rect x="1.0907%" y="757" width="0.0257%" height="15" fill="rgb(209,103,24)" fg:x="85" fg:w="2"/><text x="1.3407%" y="767.50"></text></g><g><title>[[vdso]] (1 samples, 0.01%)</title><rect x="1.4757%" y="869" width="0.0128%" height="15" fill="rgb(229,88,8)" fg:x="115" fg:w="1"/><text x="1.7257%" y="879.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="1.4757%" y="853" width="0.0128%" height="15" fill="rgb(213,181,19)" fg:x="115" fg:w="1"/><text x="1.7257%" y="863.50"></text></g><g><title>[unknown] (30 samples, 0.38%)</title><rect x="1.1164%" y="885" width="0.3850%" height="15" fill="rgb(254,191,54)" fg:x="87" fg:w="30"/><text x="1.3664%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.4885%" y="869" width="0.0128%" height="15" fill="rgb(241,83,37)" fg:x="116" fg:w="1"/><text x="1.7385%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (1 samples, 0.01%)</title><rect x="1.5142%" y="421" width="0.0128%" height="15" fill="rgb(233,36,39)" fg:x="118" fg:w="1"/><text x="1.7642%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.01%)</title><rect x="1.5142%" y="405" width="0.0128%" height="15" fill="rgb(226,3,54)" fg:x="118" fg:w="1"/><text x="1.7642%" y="415.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.04%)</title><rect x="1.5013%" y="485" width="0.0385%" height="15" fill="rgb(245,192,40)" fg:x="117" fg:w="3"/><text x="1.7513%" y="495.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.04%)</title><rect x="1.5013%" y="469" width="0.0385%" height="15" fill="rgb(238,167,29)" fg:x="117" fg:w="3"/><text x="1.7513%" y="479.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.04%)</title><rect x="1.5013%" y="453" width="0.0385%" height="15" fill="rgb(232,182,51)" fg:x="117" fg:w="3"/><text x="1.7513%" y="463.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.04%)</title><rect x="1.5013%" y="437" width="0.0385%" height="15" fill="rgb(231,60,39)" fg:x="117" fg:w="3"/><text x="1.7513%" y="447.50"></text></g><g><title>parking_lot_core::parking_lot::park (1 samples, 0.01%)</title><rect x="1.5270%" y="421" width="0.0128%" height="15" fill="rgb(208,69,12)" fg:x="119" fg:w="1"/><text x="1.7770%" y="431.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1 samples, 0.01%)</title><rect x="1.5270%" y="405" width="0.0128%" height="15" fill="rgb(235,93,37)" fg:x="119" fg:w="1"/><text x="1.7770%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (1 samples, 0.01%)</title><rect x="1.5270%" y="389" width="0.0128%" height="15" fill="rgb(213,116,39)" fg:x="119" fg:w="1"/><text x="1.7770%" y="399.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1 samples, 0.01%)</title><rect x="1.5270%" y="373" width="0.0128%" height="15" fill="rgb(222,207,29)" fg:x="119" fg:w="1"/><text x="1.7770%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (1 samples, 0.01%)</title><rect x="1.5270%" y="357" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="119" fg:w="1"/><text x="1.7770%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="1.5270%" y="341" width="0.0128%" height="15" fill="rgb(218,138,4)" fg:x="119" fg:w="1"/><text x="1.7770%" y="351.50"></text></g><g><title>tokio::runtime::builder::Builder::build (4 samples, 0.05%)</title><rect x="1.5013%" y="613" width="0.0513%" height="15" fill="rgb(250,191,14)" fg:x="117" fg:w="4"/><text x="1.7513%" y="623.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (4 samples, 0.05%)</title><rect x="1.5013%" y="597" width="0.0513%" height="15" fill="rgb(239,60,40)" fg:x="117" fg:w="4"/><text x="1.7513%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (4 samples, 0.05%)</title><rect x="1.5013%" y="581" width="0.0513%" height="15" fill="rgb(206,27,48)" fg:x="117" fg:w="4"/><text x="1.7513%" y="591.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (4 samples, 0.05%)</title><rect x="1.5013%" y="565" width="0.0513%" height="15" fill="rgb(225,35,8)" fg:x="117" fg:w="4"/><text x="1.7513%" y="575.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (4 samples, 0.05%)</title><rect x="1.5013%" y="549" width="0.0513%" height="15" fill="rgb(250,213,24)" fg:x="117" fg:w="4"/><text x="1.7513%" y="559.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (4 samples, 0.05%)</title><rect x="1.5013%" y="533" width="0.0513%" height="15" fill="rgb(247,123,22)" fg:x="117" fg:w="4"/><text x="1.7513%" y="543.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (4 samples, 0.05%)</title><rect x="1.5013%" y="517" width="0.0513%" height="15" fill="rgb(231,138,38)" fg:x="117" fg:w="4"/><text x="1.7513%" y="527.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (4 samples, 0.05%)</title><rect x="1.5013%" y="501" width="0.0513%" height="15" fill="rgb(231,145,46)" fg:x="117" fg:w="4"/><text x="1.7513%" y="511.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (1 samples, 0.01%)</title><rect x="1.5398%" y="485" width="0.0128%" height="15" fill="rgb(251,118,11)" fg:x="120" fg:w="1"/><text x="1.7898%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="1.5398%" y="469" width="0.0128%" height="15" fill="rgb(217,147,25)" fg:x="120" fg:w="1"/><text x="1.7898%" y="479.50"></text></g><g><title>audio_graph_cli (122 samples, 1.57%)</title><rect x="0.0000%" y="901" width="1.5655%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="122"/><text x="0.2500%" y="911.50"></text></g><g><title>_start (5 samples, 0.06%)</title><rect x="1.5013%" y="885" width="0.0642%" height="15" fill="rgb(209,12,38)" fg:x="117" fg:w="5"/><text x="1.7513%" y="895.50"></text></g><g><title>__libc_start_main (5 samples, 0.06%)</title><rect x="1.5013%" y="869" width="0.0642%" height="15" fill="rgb(227,1,9)" fg:x="117" fg:w="5"/><text x="1.7513%" y="879.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="1.5013%" y="853" width="0.0642%" height="15" fill="rgb(248,47,43)" fg:x="117" fg:w="5"/><text x="1.7513%" y="863.50"></text></g><g><title>main (5 samples, 0.06%)</title><rect x="1.5013%" y="837" width="0.0642%" height="15" fill="rgb(221,10,30)" fg:x="117" fg:w="5"/><text x="1.7513%" y="847.50"></text></g><g><title>std::rt::lang_start_internal (5 samples, 0.06%)</title><rect x="1.5013%" y="821" width="0.0642%" height="15" fill="rgb(210,229,1)" fg:x="117" fg:w="5"/><text x="1.7513%" y="831.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.06%)</title><rect x="1.5013%" y="805" width="0.0642%" height="15" fill="rgb(222,148,37)" fg:x="117" fg:w="5"/><text x="1.7513%" y="815.50"></text></g><g><title>std::panicking::try (5 samples, 0.06%)</title><rect x="1.5013%" y="789" width="0.0642%" height="15" fill="rgb(234,67,33)" fg:x="117" fg:w="5"/><text x="1.7513%" y="799.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.06%)</title><rect x="1.5013%" y="773" width="0.0642%" height="15" fill="rgb(247,98,35)" fg:x="117" fg:w="5"/><text x="1.7513%" y="783.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (5 samples, 0.06%)</title><rect x="1.5013%" y="757" width="0.0642%" height="15" fill="rgb(247,138,52)" fg:x="117" fg:w="5"/><text x="1.7513%" y="767.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.06%)</title><rect x="1.5013%" y="741" width="0.0642%" height="15" fill="rgb(213,79,30)" fg:x="117" fg:w="5"/><text x="1.7513%" y="751.50"></text></g><g><title>std::panicking::try (5 samples, 0.06%)</title><rect x="1.5013%" y="725" width="0.0642%" height="15" fill="rgb(246,177,23)" fg:x="117" fg:w="5"/><text x="1.7513%" y="735.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.06%)</title><rect x="1.5013%" y="709" width="0.0642%" height="15" fill="rgb(230,62,27)" fg:x="117" fg:w="5"/><text x="1.7513%" y="719.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5 samples, 0.06%)</title><rect x="1.5013%" y="693" width="0.0642%" height="15" fill="rgb(216,154,8)" fg:x="117" fg:w="5"/><text x="1.7513%" y="703.50"></text></g><g><title>std::rt::lang_start::{{closure}} (5 samples, 0.06%)</title><rect x="1.5013%" y="677" width="0.0642%" height="15" fill="rgb(244,35,45)" fg:x="117" fg:w="5"/><text x="1.7513%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.06%)</title><rect x="1.5013%" y="661" width="0.0642%" height="15" fill="rgb(251,115,12)" fg:x="117" fg:w="5"/><text x="1.7513%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.06%)</title><rect x="1.5013%" y="645" width="0.0642%" height="15" fill="rgb(240,54,50)" fg:x="117" fg:w="5"/><text x="1.7513%" y="655.50"></text></g><g><title>audio_graph_cli::main (5 samples, 0.06%)</title><rect x="1.5013%" y="629" width="0.0642%" height="15" fill="rgb(233,84,52)" fg:x="117" fg:w="5"/><text x="1.7513%" y="639.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (1 samples, 0.01%)</title><rect x="1.5527%" y="613" width="0.0128%" height="15" fill="rgb(207,117,47)" fg:x="121" fg:w="1"/><text x="1.8027%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (1 samples, 0.01%)</title><rect x="1.5527%" y="597" width="0.0128%" height="15" fill="rgb(249,43,39)" fg:x="121" fg:w="1"/><text x="1.8027%" y="607.50"></text></g><g><title>tokio::runtime::context::BlockingRegionGuard::block_on (1 samples, 0.01%)</title><rect x="1.5527%" y="581" width="0.0128%" height="15" fill="rgb(209,38,44)" fg:x="121" fg:w="1"/><text x="1.8027%" y="591.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1 samples, 0.01%)</title><rect x="1.5527%" y="565" width="0.0128%" height="15" fill="rgb(236,212,23)" fg:x="121" fg:w="1"/><text x="1.8027%" y="575.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.01%)</title><rect x="1.5527%" y="549" width="0.0128%" height="15" fill="rgb(242,79,21)" fg:x="121" fg:w="1"/><text x="1.8027%" y="559.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.01%)</title><rect x="1.5527%" y="533" width="0.0128%" height="15" fill="rgb(211,96,35)" fg:x="121" fg:w="1"/><text x="1.8027%" y="543.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (1 samples, 0.01%)</title><rect x="1.5527%" y="517" width="0.0128%" height="15" fill="rgb(253,215,40)" fg:x="121" fg:w="1"/><text x="1.8027%" y="527.50"></text></g><g><title>audio_graph_cli::main::{{closure}} (1 samples, 0.01%)</title><rect x="1.5527%" y="501" width="0.0128%" height="15" fill="rgb(211,81,21)" fg:x="121" fg:w="1"/><text x="1.8027%" y="511.50"></text></g><g><title>resonix_graph::audio_context::AudioContext::initialize_dac_from_defaults (1 samples, 0.01%)</title><rect x="1.5527%" y="485" width="0.0128%" height="15" fill="rgb(208,190,38)" fg:x="121" fg:w="1"/><text x="1.8027%" y="495.50"></text></g><g><title>resonix_dac::dac_config::DACConfig::from_defaults (1 samples, 0.01%)</title><rect x="1.5527%" y="469" width="0.0128%" height="15" fill="rgb(235,213,38)" fg:x="121" fg:w="1"/><text x="1.8027%" y="479.50"></text></g><g><title>&lt;cpal::platform::platform_impl::Device as cpal::traits::DeviceTrait&gt;::default_output_config (1 samples, 0.01%)</title><rect x="1.5527%" y="453" width="0.0128%" height="15" fill="rgb(237,122,38)" fg:x="121" fg:w="1"/><text x="1.8027%" y="463.50"></text></g><g><title>&lt;cpal::host::alsa::Device as cpal::traits::DeviceTrait&gt;::default_output_config (1 samples, 0.01%)</title><rect x="1.5527%" y="437" width="0.0128%" height="15" fill="rgb(244,218,35)" fg:x="121" fg:w="1"/><text x="1.8027%" y="447.50"></text></g><g><title>cpal::host::alsa::Device::default_output_config (1 samples, 0.01%)</title><rect x="1.5527%" y="421" width="0.0128%" height="15" fill="rgb(240,68,47)" fg:x="121" fg:w="1"/><text x="1.8027%" y="431.50"></text></g><g><title>cpal::host::alsa::Device::default_config (1 samples, 0.01%)</title><rect x="1.5527%" y="405" width="0.0128%" height="15" fill="rgb(210,16,53)" fg:x="121" fg:w="1"/><text x="1.8027%" y="415.50"></text></g><g><title>cpal::host::alsa::Device::supported_configs (1 samples, 0.01%)</title><rect x="1.5527%" y="389" width="0.0128%" height="15" fill="rgb(235,124,12)" fg:x="121" fg:w="1"/><text x="1.8027%" y="399.50"></text></g><g><title>cpal::host::alsa::DeviceHandles::get_mut (1 samples, 0.01%)</title><rect x="1.5527%" y="373" width="0.0128%" height="15" fill="rgb(224,169,11)" fg:x="121" fg:w="1"/><text x="1.8027%" y="383.50"></text></g><g><title>cpal::host::alsa::DeviceHandles::try_open (1 samples, 0.01%)</title><rect x="1.5527%" y="357" width="0.0128%" height="15" fill="rgb(250,166,2)" fg:x="121" fg:w="1"/><text x="1.8027%" y="367.50"></text></g><g><title>alsa::pcm::PCM::new (1 samples, 0.01%)</title><rect x="1.5527%" y="341" width="0.0128%" height="15" fill="rgb(242,216,29)" fg:x="121" fg:w="1"/><text x="1.8027%" y="351.50"></text></g><g><title>alsa::pcm::PCM::open (1 samples, 0.01%)</title><rect x="1.5527%" y="325" width="0.0128%" height="15" fill="rgb(230,116,27)" fg:x="121" fg:w="1"/><text x="1.8027%" y="335.50"></text></g><g><title>snd_pcm_open (1 samples, 0.01%)</title><rect x="1.5527%" y="309" width="0.0128%" height="15" fill="rgb(228,99,48)" fg:x="121" fg:w="1"/><text x="1.8027%" y="319.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="1.5527%" y="293" width="0.0128%" height="15" fill="rgb(253,11,6)" fg:x="121" fg:w="1"/><text x="1.8027%" y="303.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="1.5527%" y="277" width="0.0128%" height="15" fill="rgb(247,143,39)" fg:x="121" fg:w="1"/><text x="1.8027%" y="287.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="1.5527%" y="261" width="0.0128%" height="15" fill="rgb(236,97,10)" fg:x="121" fg:w="1"/><text x="1.8027%" y="271.50"></text></g><g><title>snd_dlopen (1 samples, 0.01%)</title><rect x="1.5527%" y="245" width="0.0128%" height="15" fill="rgb(233,208,19)" fg:x="121" fg:w="1"/><text x="1.8027%" y="255.50"></text></g><g><title>dlopen (1 samples, 0.01%)</title><rect x="1.5527%" y="229" width="0.0128%" height="15" fill="rgb(216,164,2)" fg:x="121" fg:w="1"/><text x="1.8027%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.5527%" y="213" width="0.0128%" height="15" fill="rgb(220,129,5)" fg:x="121" fg:w="1"/><text x="1.8027%" y="223.50"></text></g><g><title>_dl_catch_error (1 samples, 0.01%)</title><rect x="1.5527%" y="197" width="0.0128%" height="15" fill="rgb(242,17,10)" fg:x="121" fg:w="1"/><text x="1.8027%" y="207.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="1.5527%" y="181" width="0.0128%" height="15" fill="rgb(242,107,0)" fg:x="121" fg:w="1"/><text x="1.8027%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="1.5527%" y="165" width="0.0128%" height="15" fill="rgb(251,28,31)" fg:x="121" fg:w="1"/><text x="1.8027%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="149" width="0.0128%" height="15" fill="rgb(233,223,10)" fg:x="121" fg:w="1"/><text x="1.8027%" y="159.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="1.5527%" y="133" width="0.0128%" height="15" fill="rgb(215,21,27)" fg:x="121" fg:w="1"/><text x="1.8027%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="117" width="0.0128%" height="15" fill="rgb(232,23,21)" fg:x="121" fg:w="1"/><text x="1.8027%" y="127.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="1.5527%" y="101" width="0.0128%" height="15" fill="rgb(244,5,23)" fg:x="121" fg:w="1"/><text x="1.8027%" y="111.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="85" width="0.0128%" height="15" fill="rgb(226,81,46)" fg:x="121" fg:w="1"/><text x="1.8027%" y="95.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="69" width="0.0128%" height="15" fill="rgb(247,70,30)" fg:x="121" fg:w="1"/><text x="1.8027%" y="79.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="53" width="0.0128%" height="15" fill="rgb(212,68,19)" fg:x="121" fg:w="1"/><text x="1.8027%" y="63.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="1.5527%" y="37" width="0.0128%" height="15" fill="rgb(240,187,13)" fg:x="121" fg:w="1"/><text x="1.8027%" y="47.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (1 samples, 0.01%)</title><rect x="1.5655%" y="885" width="0.0128%" height="15" fill="rgb(223,113,26)" fg:x="122" fg:w="1"/><text x="1.8155%" y="895.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (326 samples, 4.18%)</title><rect x="7.6222%" y="853" width="4.1832%" height="15" fill="rgb(206,192,2)" fg:x="594" fg:w="326"/><text x="7.8722%" y="863.50">&lt;&amp;mut..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (1,040 samples, 13.35%)</title><rect x="1.5783%" y="869" width="13.3453%" height="15" fill="rgb(241,108,4)" fg:x="123" fg:w="1040"/><text x="1.8283%" y="879.50">&lt;resonix_graph::node..</text></g><g><title>core::option::Option&lt;T&gt;::map (243 samples, 3.12%)</title><rect x="11.8055%" y="853" width="3.1182%" height="15" fill="rgb(247,173,49)" fg:x="920" fg:w="243"/><text x="12.0555%" y="863.50">cor..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process::{{closure}} (243 samples, 3.12%)</title><rect x="11.8055%" y="837" width="3.1182%" height="15" fill="rgb(224,114,35)" fg:x="920" fg:w="243"/><text x="12.0555%" y="847.50">&lt;re..</text></g><g><title>[[heap]] (1,041 samples, 13.36%)</title><rect x="1.5783%" y="885" width="13.3581%" height="15" fill="rgb(245,159,27)" fg:x="123" fg:w="1041"/><text x="1.8283%" y="895.50">[[heap]]</text></g><g><title>&lt;resonix_graph::nodes::sine_node::SineNode as resonix_graph::traits::node::Node&gt;::process (1 samples, 0.01%)</title><rect x="14.9236%" y="869" width="0.0128%" height="15" fill="rgb(245,172,44)" fg:x="1163" fg:w="1"/><text x="15.1736%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.01%)</title><rect x="14.9236%" y="853" width="0.0128%" height="15" fill="rgb(236,23,11)" fg:x="1163" fg:w="1"/><text x="15.1736%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.01%)</title><rect x="14.9236%" y="837" width="0.0128%" height="15" fill="rgb(205,117,38)" fg:x="1163" fg:w="1"/><text x="15.1736%" y="847.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="14.9236%" y="821" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="1163" fg:w="1"/><text x="15.1736%" y="831.50"></text></g><g><title>[audio_graph_cli] (1 samples, 0.01%)</title><rect x="14.9365%" y="885" width="0.0128%" height="15" fill="rgb(244,70,9)" fg:x="1164" fg:w="1"/><text x="15.1865%" y="895.50"></text></g><g><title>&lt;resonix_core::sine::sine_struct::Sine as resonix_core::sine::sine_interface::SineInterface&gt;::next_sample (1 samples, 0.01%)</title><rect x="14.9365%" y="869" width="0.0128%" height="15" fill="rgb(217,125,39)" fg:x="1164" fg:w="1"/><text x="15.1865%" y="879.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (1 samples, 0.01%)</title><rect x="14.9365%" y="853" width="0.0128%" height="15" fill="rgb(235,36,10)" fg:x="1164" fg:w="1"/><text x="15.1865%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.01%)</title><rect x="14.9493%" y="629" width="0.0128%" height="15" fill="rgb(251,123,47)" fg:x="1165" fg:w="1"/><text x="15.1993%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.01%)</title><rect x="14.9621%" y="629" width="0.0128%" height="15" fill="rgb(221,13,13)" fg:x="1166" fg:w="1"/><text x="15.2121%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.01%)</title><rect x="14.9621%" y="613" width="0.0128%" height="15" fill="rgb(238,131,9)" fg:x="1166" fg:w="1"/><text x="15.2121%" y="623.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="14.9621%" y="597" width="0.0128%" height="15" fill="rgb(211,50,8)" fg:x="1166" fg:w="1"/><text x="15.2121%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="14.9621%" y="581" width="0.0128%" height="15" fill="rgb(245,182,24)" fg:x="1166" fg:w="1"/><text x="15.2121%" y="591.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (5 samples, 0.06%)</title><rect x="14.9493%" y="645" width="0.0642%" height="15" fill="rgb(242,14,37)" fg:x="1165" fg:w="5"/><text x="15.1993%" y="655.50"></text></g><g><title>alsa::poll::poll (3 samples, 0.04%)</title><rect x="14.9750%" y="629" width="0.0385%" height="15" fill="rgb(246,228,12)" fg:x="1167" fg:w="3"/><text x="15.2250%" y="639.50"></text></g><g><title>__poll (2 samples, 0.03%)</title><rect x="14.9878%" y="613" width="0.0257%" height="15" fill="rgb(213,55,15)" fg:x="1168" fg:w="2"/><text x="15.2378%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="15.0006%" y="597" width="0.0128%" height="15" fill="rgb(209,9,3)" fg:x="1169" fg:w="1"/><text x="15.2506%" y="607.50"></text></g><g><title>resonix_graph::processor::Processor::dac_nodes_sum (1 samples, 0.01%)</title><rect x="15.0135%" y="597" width="0.0128%" height="15" fill="rgb(230,59,30)" fg:x="1170" fg:w="1"/><text x="15.2635%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.01%)</title><rect x="15.0135%" y="581" width="0.0128%" height="15" fill="rgb(209,121,21)" fg:x="1170" fg:w="1"/><text x="15.2635%" y="591.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.01%)</title><rect x="15.0135%" y="565" width="0.0128%" height="15" fill="rgb(220,109,13)" fg:x="1170" fg:w="1"/><text x="15.2635%" y="575.50"></text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (112 samples, 1.44%)</title><rect x="15.0263%" y="581" width="1.4372%" height="15" fill="rgb(232,18,1)" fg:x="1171" fg:w="112"/><text x="15.2763%" y="591.50"></text></g><g><title>&lt;resonix_graph::nodes::dac_node::DACNode as resonix_graph::traits::node::Node&gt;::process (1 samples, 0.01%)</title><rect x="18.4011%" y="565" width="0.0128%" height="15" fill="rgb(215,41,42)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="18.4011%" y="549" width="0.0128%" height="15" fill="rgb(224,123,36)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.01%)</title><rect x="18.4011%" y="533" width="0.0128%" height="15" fill="rgb(240,125,3)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="543.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.01%)</title><rect x="18.4011%" y="517" width="0.0128%" height="15" fill="rgb(205,98,50)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="527.50"></text></g><g><title>resonix_graph::processor::Processor::run::{{closure}} (1 samples, 0.01%)</title><rect x="18.4011%" y="501" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.01%)</title><rect x="18.4011%" y="485" width="0.0128%" height="15" fill="rgb(238,207,15)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.01%)</title><rect x="18.4011%" y="469" width="0.0128%" height="15" fill="rgb(213,199,42)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.01%)</title><rect x="18.4011%" y="453" width="0.0128%" height="15" fill="rgb(235,201,11)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="18.4011%" y="437" width="0.0128%" height="15" fill="rgb(207,46,11)" fg:x="1434" fg:w="1"/><text x="18.6511%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (153 samples, 1.96%)</title><rect x="21.3910%" y="517" width="1.9633%" height="15" fill="rgb(241,35,35)" fg:x="1667" fg:w="153"/><text x="21.6410%" y="527.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (99 samples, 1.27%)</title><rect x="22.0839%" y="501" width="1.2704%" height="15" fill="rgb(243,32,47)" fg:x="1721" fg:w="99"/><text x="22.3339%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (99 samples, 1.27%)</title><rect x="22.0839%" y="485" width="1.2704%" height="15" fill="rgb(247,202,23)" fg:x="1721" fg:w="99"/><text x="22.3339%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (99 samples, 1.27%)</title><rect x="22.0839%" y="469" width="1.2704%" height="15" fill="rgb(219,102,11)" fg:x="1721" fg:w="99"/><text x="22.3339%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (144 samples, 1.85%)</title><rect x="23.3543%" y="469" width="1.8478%" height="15" fill="rgb(243,110,44)" fg:x="1820" fg:w="144"/><text x="23.6043%" y="479.50">c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (144 samples, 1.85%)</title><rect x="23.3543%" y="453" width="1.8478%" height="15" fill="rgb(222,74,54)" fg:x="1820" fg:w="144"/><text x="23.6043%" y="463.50">c..</text></g><g><title>core::cell::BorrowRefMut::new (144 samples, 1.85%)</title><rect x="23.3543%" y="437" width="1.8478%" height="15" fill="rgb(216,99,12)" fg:x="1820" fg:w="144"/><text x="23.6043%" y="447.50">c..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (600 samples, 7.70%)</title><rect x="20.8007%" y="549" width="7.6992%" height="15" fill="rgb(226,22,26)" fg:x="1621" fg:w="600"/><text x="21.0507%" y="559.50">&lt;&amp;mut I as ..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (554 samples, 7.11%)</title><rect x="21.3910%" y="533" width="7.1089%" height="15" fill="rgb(217,163,10)" fg:x="1667" fg:w="554"/><text x="21.6410%" y="543.50">&lt;core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (401 samples, 5.15%)</title><rect x="23.3543%" y="517" width="5.1456%" height="15" fill="rgb(213,25,53)" fg:x="1820" fg:w="401"/><text x="23.6043%" y="527.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (401 samples, 5.15%)</title><rect x="23.3543%" y="501" width="5.1456%" height="15" fill="rgb(252,105,26)" fg:x="1820" fg:w="401"/><text x="23.6043%" y="511.50">core::..</text></g><g><title>resonix_graph::processor::Processor::run::{{closure}} (401 samples, 5.15%)</title><rect x="23.3543%" y="485" width="5.1456%" height="15" fill="rgb(220,39,43)" fg:x="1820" fg:w="401"/><text x="23.6043%" y="495.50">resoni..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (257 samples, 3.30%)</title><rect x="25.2021%" y="469" width="3.2978%" height="15" fill="rgb(229,68,48)" fg:x="1964" fg:w="257"/><text x="25.4521%" y="479.50">pet..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (257 samples, 3.30%)</title><rect x="25.2021%" y="453" width="3.2978%" height="15" fill="rgb(252,8,32)" fg:x="1964" fg:w="257"/><text x="25.4521%" y="463.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (257 samples, 3.30%)</title><rect x="25.2021%" y="437" width="3.2978%" height="15" fill="rgb(223,20,43)" fg:x="1964" fg:w="257"/><text x="25.4521%" y="447.50">&lt;us..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 1.71%)</title><rect x="28.4999%" y="533" width="1.7067%" height="15" fill="rgb(229,81,49)" fg:x="2221" fg:w="133"/><text x="28.7499%" y="543.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (133 samples, 1.71%)</title><rect x="28.4999%" y="517" width="1.7067%" height="15" fill="rgb(236,28,36)" fg:x="2221" fg:w="133"/><text x="28.7499%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (133 samples, 1.71%)</title><rect x="28.4999%" y="501" width="1.7067%" height="15" fill="rgb(249,185,26)" fg:x="2221" fg:w="133"/><text x="28.7499%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (133 samples, 1.71%)</title><rect x="28.4999%" y="485" width="1.7067%" height="15" fill="rgb(249,174,33)" fg:x="2221" fg:w="133"/><text x="28.7499%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (104 samples, 1.33%)</title><rect x="30.2194%" y="437" width="1.3345%" height="15" fill="rgb(233,201,37)" fg:x="2355" fg:w="104"/><text x="30.4694%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (210 samples, 2.69%)</title><rect x="30.2194%" y="485" width="2.6947%" height="15" fill="rgb(221,78,26)" fg:x="2355" fg:w="210"/><text x="30.4694%" y="495.50">co..</text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (210 samples, 2.69%)</title><rect x="30.2194%" y="469" width="2.6947%" height="15" fill="rgb(250,127,30)" fg:x="2355" fg:w="210"/><text x="30.4694%" y="479.50">co..</text></g><g><title>core::cell::BorrowRef::new (210 samples, 2.69%)</title><rect x="30.2194%" y="453" width="2.6947%" height="15" fill="rgb(230,49,44)" fg:x="2355" fg:w="210"/><text x="30.4694%" y="463.50">co..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (106 samples, 1.36%)</title><rect x="31.5540%" y="437" width="1.3602%" height="15" fill="rgb(229,67,23)" fg:x="2459" fg:w="106"/><text x="31.8040%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (106 samples, 1.36%)</title><rect x="31.5540%" y="421" width="1.3602%" height="15" fill="rgb(249,83,47)" fg:x="2459" fg:w="106"/><text x="31.8040%" y="431.50"></text></g><g><title>core::mem::replace (106 samples, 1.36%)</title><rect x="31.5540%" y="405" width="1.3602%" height="15" fill="rgb(215,43,3)" fg:x="2459" fg:w="106"/><text x="31.8040%" y="415.50"></text></g><g><title>core::ptr::write (106 samples, 1.36%)</title><rect x="31.5540%" y="389" width="1.3602%" height="15" fill="rgb(238,154,13)" fg:x="2459" fg:w="106"/><text x="31.8040%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (604 samples, 7.75%)</title><rect x="28.4999%" y="549" width="7.7505%" height="15" fill="rgb(219,56,2)" fg:x="2221" fg:w="604"/><text x="28.7499%" y="559.50">&lt;core::iter..</text></g><g><title>core::option::Option&lt;T&gt;::map (471 samples, 6.04%)</title><rect x="30.2066%" y="533" width="6.0439%" height="15" fill="rgb(233,0,4)" fg:x="2354" fg:w="471"/><text x="30.4566%" y="543.50">core::op..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (471 samples, 6.04%)</title><rect x="30.2066%" y="517" width="6.0439%" height="15" fill="rgb(235,30,7)" fg:x="2354" fg:w="471"/><text x="30.4566%" y="527.50">core::op..</text></g><g><title>resonix_graph::processor::Processor::run::{{closure}} (470 samples, 6.03%)</title><rect x="30.2194%" y="501" width="6.0311%" height="15" fill="rgb(250,79,13)" fg:x="2355" fg:w="470"/><text x="30.4694%" y="511.50">resonix_..</text></g><g><title>petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::edge_weight (260 samples, 3.34%)</title><rect x="32.9142%" y="485" width="3.3363%" height="15" fill="rgb(211,146,34)" fg:x="2565" fg:w="260"/><text x="33.1642%" y="495.50">pet..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (260 samples, 3.34%)</title><rect x="32.9142%" y="469" width="3.3363%" height="15" fill="rgb(228,22,38)" fg:x="2565" fg:w="260"/><text x="33.1642%" y="479.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (260 samples, 3.34%)</title><rect x="32.9142%" y="453" width="3.3363%" height="15" fill="rgb(235,168,5)" fg:x="2565" fg:w="260"/><text x="33.1642%" y="463.50">&lt;us..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (78 samples, 1.00%)</title><rect x="36.2505%" y="421" width="1.0009%" height="15" fill="rgb(221,155,16)" fg:x="2825" fg:w="78"/><text x="36.5005%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (232 samples, 2.98%)</title><rect x="36.2505%" y="549" width="2.9770%" height="15" fill="rgb(215,215,53)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="559.50">cor..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process::{{closure}} (232 samples, 2.98%)</title><rect x="36.2505%" y="533" width="2.9770%" height="15" fill="rgb(223,4,10)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="543.50">&lt;re..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;resonix_graph::connection::Connection&gt;&gt; (232 samples, 2.98%)</title><rect x="36.2505%" y="517" width="2.9770%" height="15" fill="rgb(234,103,6)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="527.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (232 samples, 2.98%)</title><rect x="36.2505%" y="501" width="2.9770%" height="15" fill="rgb(227,97,0)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="511.50">cor..</text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (232 samples, 2.98%)</title><rect x="36.2505%" y="485" width="2.9770%" height="15" fill="rgb(234,150,53)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="495.50">&lt;co..</text></g><g><title>core::cell::Cell&lt;T&gt;::set (232 samples, 2.98%)</title><rect x="36.2505%" y="469" width="2.9770%" height="15" fill="rgb(228,201,54)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="479.50">cor..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (232 samples, 2.98%)</title><rect x="36.2505%" y="453" width="2.9770%" height="15" fill="rgb(222,22,37)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="463.50">cor..</text></g><g><title>core::mem::replace (232 samples, 2.98%)</title><rect x="36.2505%" y="437" width="2.9770%" height="15" fill="rgb(237,53,32)" fg:x="2825" fg:w="232"/><text x="36.5005%" y="447.50">cor..</text></g><g><title>core::ptr::write (154 samples, 1.98%)</title><rect x="37.2514%" y="421" width="1.9761%" height="15" fill="rgb(233,25,53)" fg:x="2903" fg:w="154"/><text x="37.5014%" y="431.50">c..</text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (1,694 samples, 21.74%)</title><rect x="18.4140%" y="565" width="21.7375%" height="15" fill="rgb(210,40,34)" fg:x="1435" fg:w="1694"/><text x="18.6640%" y="575.50">&lt;resonix_graph::nodes::pass_throug..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;resonix_graph::connection::Connection&gt;&gt; (72 samples, 0.92%)</title><rect x="39.2275%" y="549" width="0.9239%" height="15" fill="rgb(241,220,44)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (72 samples, 0.92%)</title><rect x="39.2275%" y="533" width="0.9239%" height="15" fill="rgb(235,28,35)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="543.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (72 samples, 0.92%)</title><rect x="39.2275%" y="517" width="0.9239%" height="15" fill="rgb(210,56,17)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="527.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (72 samples, 0.92%)</title><rect x="39.2275%" y="501" width="0.9239%" height="15" fill="rgb(224,130,29)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (72 samples, 0.92%)</title><rect x="39.2275%" y="485" width="0.9239%" height="15" fill="rgb(235,212,8)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="495.50"></text></g><g><title>core::mem::replace (72 samples, 0.92%)</title><rect x="39.2275%" y="469" width="0.9239%" height="15" fill="rgb(223,33,50)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="479.50"></text></g><g><title>core::ptr::write (72 samples, 0.92%)</title><rect x="39.2275%" y="453" width="0.9239%" height="15" fill="rgb(219,149,13)" fg:x="3057" fg:w="72"/><text x="39.4775%" y="463.50"></text></g><g><title>__fmodf_finite (1 samples, 0.01%)</title><rect x="40.1514%" y="533" width="0.0128%" height="15" fill="rgb(250,156,29)" fg:x="3129" fg:w="1"/><text x="40.4014%" y="543.50"></text></g><g><title>&lt;resonix_core::sine::sine_struct::Sine as resonix_core::sine::sine_interface::SineInterface&gt;::next_sample (4 samples, 0.05%)</title><rect x="40.1514%" y="549" width="0.0513%" height="15" fill="rgb(216,193,19)" fg:x="3129" fg:w="4"/><text x="40.4014%" y="559.50"></text></g><g><title>fmodf32 (3 samples, 0.04%)</title><rect x="40.1642%" y="533" width="0.0385%" height="15" fill="rgb(216,135,14)" fg:x="3130" fg:w="3"/><text x="40.4142%" y="543.50"></text></g><g><title>[libm.so.6] (4 samples, 0.05%)</title><rect x="40.2027%" y="549" width="0.0513%" height="15" fill="rgb(241,47,5)" fg:x="3133" fg:w="4"/><text x="40.4527%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn resonix_graph::traits::node::Node&gt; as resonix_graph::traits::node::Node&gt;::process (1,858 samples, 23.84%)</title><rect x="16.4635%" y="581" width="23.8419%" height="15" fill="rgb(233,42,35)" fg:x="1283" fg:w="1858"/><text x="16.7135%" y="591.50">&lt;alloc::boxed::Box&lt;dyn resonix_graph::..</text></g><g><title>&lt;resonix_graph::nodes::sine_node::SineNode as resonix_graph::traits::node::Node&gt;::process (12 samples, 0.15%)</title><rect x="40.1514%" y="565" width="0.1540%" height="15" fill="rgb(231,13,6)" fg:x="3129" fg:w="12"/><text x="40.4014%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.05%)</title><rect x="40.2541%" y="549" width="0.0513%" height="15" fill="rgb(207,181,40)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.05%)</title><rect x="40.2541%" y="533" width="0.0513%" height="15" fill="rgb(254,173,49)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.05%)</title><rect x="40.2541%" y="517" width="0.0513%" height="15" fill="rgb(221,1,38)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="527.50"></text></g><g><title>&lt;resonix_graph::nodes::sine_node::SineNode as resonix_graph::traits::node::Node&gt;::process::{{closure}} (4 samples, 0.05%)</title><rect x="40.2541%" y="501" width="0.0513%" height="15" fill="rgb(206,124,46)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;resonix_graph::connection::Connection&gt;&gt; (4 samples, 0.05%)</title><rect x="40.2541%" y="485" width="0.0513%" height="15" fill="rgb(249,21,11)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.05%)</title><rect x="40.2541%" y="469" width="0.0513%" height="15" fill="rgb(222,201,40)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="40.2541%" y="453" width="0.0513%" height="15" fill="rgb(235,61,29)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.05%)</title><rect x="40.2541%" y="437" width="0.0513%" height="15" fill="rgb(219,207,3)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.05%)</title><rect x="40.2541%" y="421" width="0.0513%" height="15" fill="rgb(222,56,46)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="431.50"></text></g><g><title>core::mem::replace (4 samples, 0.05%)</title><rect x="40.2541%" y="405" width="0.0513%" height="15" fill="rgb(239,76,54)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="415.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="40.2541%" y="389" width="0.0513%" height="15" fill="rgb(231,124,27)" fg:x="3137" fg:w="4"/><text x="40.5041%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn resonix_graph::traits::node::Node&gt; as resonix_graph::traits::node::Node&gt;::uid (2 samples, 0.03%)</title><rect x="40.3054%" y="581" width="0.0257%" height="15" fill="rgb(249,195,6)" fg:x="3141" fg:w="2"/><text x="40.5554%" y="591.50"></text></g><g><title>&lt;resonix_graph::nodes::sine_node::SineNode as resonix_graph::traits::node::Node&gt;::uid (2 samples, 0.03%)</title><rect x="40.3054%" y="565" width="0.0257%" height="15" fill="rgb(237,174,47)" fg:x="3141" fg:w="2"/><text x="40.5554%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (149 samples, 1.91%)</title><rect x="40.3311%" y="581" width="1.9120%" height="15" fill="rgb(206,201,31)" fg:x="3143" fg:w="149"/><text x="40.5811%" y="591.50">&lt;..</text></g><g><title>&lt;petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt; as core::ops::index::Index&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt;&gt;&gt;::index (70 samples, 0.90%)</title><rect x="42.2430%" y="581" width="0.8982%" height="15" fill="rgb(231,57,52)" fg:x="3292" fg:w="70"/><text x="42.4930%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.03%)</title><rect x="43.1413%" y="533" width="0.0257%" height="15" fill="rgb(248,177,22)" fg:x="3362" fg:w="2"/><text x="43.3913%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (149 samples, 1.91%)</title><rect x="43.1669%" y="533" width="1.9120%" height="15" fill="rgb(215,211,37)" fg:x="3364" fg:w="149"/><text x="43.4169%" y="543.50">c..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (149 samples, 1.91%)</title><rect x="43.1669%" y="517" width="1.9120%" height="15" fill="rgb(241,128,51)" fg:x="3364" fg:w="149"/><text x="43.4169%" y="527.50">c..</text></g><g><title>core::mem::replace (149 samples, 1.91%)</title><rect x="43.1669%" y="501" width="1.9120%" height="15" fill="rgb(227,165,31)" fg:x="3364" fg:w="149"/><text x="43.4169%" y="511.50">c..</text></g><g><title>core::ptr::write (149 samples, 1.91%)</title><rect x="43.1669%" y="485" width="1.9120%" height="15" fill="rgb(228,167,24)" fg:x="3364" fg:w="149"/><text x="43.4169%" y="495.50">c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (329 samples, 4.22%)</title><rect x="43.1413%" y="581" width="4.2217%" height="15" fill="rgb(228,143,12)" fg:x="3362" fg:w="329"/><text x="43.3913%" y="591.50">core:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (329 samples, 4.22%)</title><rect x="43.1413%" y="565" width="4.2217%" height="15" fill="rgb(249,149,8)" fg:x="3362" fg:w="329"/><text x="43.3913%" y="575.50">core:..</text></g><g><title>core::cell::BorrowRef::new (329 samples, 4.22%)</title><rect x="43.1413%" y="549" width="4.2217%" height="15" fill="rgb(243,35,44)" fg:x="3362" fg:w="329"/><text x="43.3913%" y="559.50">core:..</text></g><g><title>core::cell::is_reading (178 samples, 2.28%)</title><rect x="45.0789%" y="533" width="2.2841%" height="15" fill="rgb(246,89,9)" fg:x="3513" fg:w="178"/><text x="45.3289%" y="543.50">c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (119 samples, 1.53%)</title><rect x="47.3630%" y="581" width="1.5270%" height="15" fill="rgb(233,213,13)" fg:x="3691" fg:w="119"/><text x="47.6130%" y="591.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (119 samples, 1.53%)</title><rect x="47.3630%" y="565" width="1.5270%" height="15" fill="rgb(233,141,41)" fg:x="3691" fg:w="119"/><text x="47.6130%" y="575.50"></text></g><g><title>core::cell::BorrowRefMut::new (119 samples, 1.53%)</title><rect x="47.3630%" y="549" width="1.5270%" height="15" fill="rgb(239,167,4)" fg:x="3691" fg:w="119"/><text x="47.6130%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (248 samples, 3.18%)</title><rect x="48.8900%" y="581" width="3.1823%" height="15" fill="rgb(209,217,16)" fg:x="3810" fg:w="248"/><text x="49.1400%" y="591.50">cor..</text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (248 samples, 3.18%)</title><rect x="48.8900%" y="565" width="3.1823%" height="15" fill="rgb(219,88,35)" fg:x="3810" fg:w="248"/><text x="49.1400%" y="575.50">cor..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (242 samples, 3.11%)</title><rect x="52.0724%" y="581" width="3.1054%" height="15" fill="rgb(220,193,23)" fg:x="4058" fg:w="242"/><text x="52.3224%" y="591.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;alloc::boxed::Box&lt;dyn resonix_graph::traits::node::Node&gt;&gt;&gt; (69 samples, 0.89%)</title><rect x="55.1777%" y="581" width="0.8854%" height="15" fill="rgb(230,90,52)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (69 samples, 0.89%)</title><rect x="55.1777%" y="565" width="0.8854%" height="15" fill="rgb(252,106,19)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="575.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (69 samples, 0.89%)</title><rect x="55.1777%" y="549" width="0.8854%" height="15" fill="rgb(206,74,20)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (69 samples, 0.89%)</title><rect x="55.1777%" y="533" width="0.8854%" height="15" fill="rgb(230,138,44)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="543.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (69 samples, 0.89%)</title><rect x="55.1777%" y="517" width="0.8854%" height="15" fill="rgb(235,182,43)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="527.50"></text></g><g><title>core::mem::replace (69 samples, 0.89%)</title><rect x="55.1777%" y="501" width="0.8854%" height="15" fill="rgb(242,16,51)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="511.50"></text></g><g><title>core::ptr::write (69 samples, 0.89%)</title><rect x="55.1777%" y="485" width="0.8854%" height="15" fill="rgb(248,9,4)" fg:x="4300" fg:w="69"/><text x="55.4277%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (65 samples, 0.83%)</title><rect x="56.0631%" y="565" width="0.8341%" height="15" fill="rgb(210,31,22)" fg:x="4369" fg:w="65"/><text x="56.3131%" y="575.50"></text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (148 samples, 1.90%)</title><rect x="59.9641%" y="485" width="1.8991%" height="15" fill="rgb(239,54,39)" fg:x="4673" fg:w="148"/><text x="60.2141%" y="495.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 2.01%)</title><rect x="64.3270%" y="469" width="2.0146%" height="15" fill="rgb(230,99,41)" fg:x="5013" fg:w="157"/><text x="64.5770%" y="479.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (157 samples, 2.01%)</title><rect x="64.3270%" y="453" width="2.0146%" height="15" fill="rgb(253,106,12)" fg:x="5013" fg:w="157"/><text x="64.5770%" y="463.50">h..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (17 samples, 0.22%)</title><rect x="66.3416%" y="453" width="0.2181%" height="15" fill="rgb(213,46,41)" fg:x="5170" fg:w="17"/><text x="66.5916%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (17 samples, 0.22%)</title><rect x="66.3416%" y="437" width="0.2181%" height="15" fill="rgb(215,133,35)" fg:x="5170" fg:w="17"/><text x="66.5916%" y="447.50"></text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (4 samples, 0.05%)</title><rect x="66.5597%" y="405" width="0.0513%" height="15" fill="rgb(213,28,5)" fg:x="5187" fg:w="4"/><text x="66.8097%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (76 samples, 0.98%)</title><rect x="66.3416%" y="469" width="0.9752%" height="15" fill="rgb(215,77,49)" fg:x="5170" fg:w="76"/><text x="66.5916%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (59 samples, 0.76%)</title><rect x="66.5597%" y="453" width="0.7571%" height="15" fill="rgb(248,100,22)" fg:x="5187" fg:w="59"/><text x="66.8097%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (59 samples, 0.76%)</title><rect x="66.5597%" y="437" width="0.7571%" height="15" fill="rgb(208,67,9)" fg:x="5187" fg:w="59"/><text x="66.8097%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (59 samples, 0.76%)</title><rect x="66.5597%" y="421" width="0.7571%" height="15" fill="rgb(219,133,21)" fg:x="5187" fg:w="59"/><text x="66.8097%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (55 samples, 0.71%)</title><rect x="66.6111%" y="405" width="0.7058%" height="15" fill="rgb(246,46,29)" fg:x="5191" fg:w="55"/><text x="66.8611%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.17%)</title><rect x="67.3168%" y="469" width="0.1668%" height="15" fill="rgb(246,185,52)" fg:x="5246" fg:w="13"/><text x="67.5668%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.17%)</title><rect x="67.3168%" y="453" width="0.1668%" height="15" fill="rgb(252,136,11)" fg:x="5246" fg:w="13"/><text x="67.5668%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.17%)</title><rect x="67.3168%" y="437" width="0.1668%" height="15" fill="rgb(219,138,53)" fg:x="5246" fg:w="13"/><text x="67.5668%" y="447.50"></text></g><g><title>resonix_graph::processor::Processor::incoming_connection_indexes (992 samples, 12.73%)</title><rect x="56.0631%" y="581" width="12.7294%" height="15" fill="rgb(211,51,23)" fg:x="4369" fg:w="992"/><text x="56.3131%" y="591.50">resonix_graph::proc..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (927 samples, 11.90%)</title><rect x="56.8972%" y="565" width="11.8953%" height="15" fill="rgb(247,221,28)" fg:x="4434" fg:w="927"/><text x="57.1472%" y="575.50">std::collections::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (927 samples, 11.90%)</title><rect x="56.8972%" y="549" width="11.8953%" height="15" fill="rgb(251,222,45)" fg:x="4434" fg:w="927"/><text x="57.1472%" y="559.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (927 samples, 11.90%)</title><rect x="56.8972%" y="533" width="11.8953%" height="15" fill="rgb(217,162,53)" fg:x="4434" fg:w="927"/><text x="57.1472%" y="543.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (688 samples, 8.83%)</title><rect x="59.9641%" y="517" width="8.8284%" height="15" fill="rgb(229,93,14)" fg:x="4673" fg:w="688"/><text x="60.2141%" y="527.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (688 samples, 8.83%)</title><rect x="59.9641%" y="501" width="8.8284%" height="15" fill="rgb(209,67,49)" fg:x="4673" fg:w="688"/><text x="60.2141%" y="511.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (540 samples, 6.93%)</title><rect x="61.8632%" y="485" width="6.9293%" height="15" fill="rgb(213,87,29)" fg:x="4821" fg:w="540"/><text x="62.1132%" y="495.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (102 samples, 1.31%)</title><rect x="67.4836%" y="469" width="1.3089%" height="15" fill="rgb(205,151,52)" fg:x="5259" fg:w="102"/><text x="67.7336%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (102 samples, 1.31%)</title><rect x="67.4836%" y="453" width="1.3089%" height="15" fill="rgb(253,215,39)" fg:x="5259" fg:w="102"/><text x="67.7336%" y="463.50"></text></g><g><title>resonix_graph::processor::Processor::initialize_visit_order (1 samples, 0.01%)</title><rect x="68.7925%" y="581" width="0.0128%" height="15" fill="rgb(221,220,41)" fg:x="5361" fg:w="1"/><text x="69.0425%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1 samples, 0.01%)</title><rect x="68.7925%" y="565" width="0.0128%" height="15" fill="rgb(218,133,21)" fg:x="5361" fg:w="1"/><text x="69.0425%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="68.7925%" y="549" width="0.0128%" height="15" fill="rgb(221,193,43)" fg:x="5361" fg:w="1"/><text x="69.0425%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.01%)</title><rect x="68.7925%" y="533" width="0.0128%" height="15" fill="rgb(240,128,52)" fg:x="5361" fg:w="1"/><text x="69.0425%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (163 samples, 2.09%)</title><rect x="68.8053%" y="565" width="2.0916%" height="15" fill="rgb(253,114,12)" fg:x="5362" fg:w="163"/><text x="69.0553%" y="575.50">c..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 2.85%)</title><rect x="73.9253%" y="469" width="2.8487%" height="15" fill="rgb(215,223,47)" fg:x="5761" fg:w="222"/><text x="74.1753%" y="479.50">&lt;h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (159 samples, 2.04%)</title><rect x="74.7337%" y="453" width="2.0403%" height="15" fill="rgb(248,225,23)" fg:x="5824" fg:w="159"/><text x="74.9837%" y="463.50">h..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.01%)</title><rect x="76.7740%" y="453" width="0.0128%" height="15" fill="rgb(250,108,0)" fg:x="5983" fg:w="1"/><text x="77.0240%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (1 samples, 0.01%)</title><rect x="76.7740%" y="437" width="0.0128%" height="15" fill="rgb(228,208,7)" fg:x="5983" fg:w="1"/><text x="77.0240%" y="447.50"></text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (55 samples, 0.71%)</title><rect x="76.7869%" y="405" width="0.7058%" height="15" fill="rgb(244,45,10)" fg:x="5984" fg:w="55"/><text x="77.0369%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (174 samples, 2.23%)</title><rect x="76.7740%" y="469" width="2.2328%" height="15" fill="rgb(207,125,25)" fg:x="5983" fg:w="174"/><text x="77.0240%" y="479.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (173 samples, 2.22%)</title><rect x="76.7869%" y="453" width="2.2199%" height="15" fill="rgb(210,195,18)" fg:x="5984" fg:w="173"/><text x="77.0369%" y="463.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (173 samples, 2.22%)</title><rect x="76.7869%" y="437" width="2.2199%" height="15" fill="rgb(249,80,12)" fg:x="5984" fg:w="173"/><text x="77.0369%" y="447.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (173 samples, 2.22%)</title><rect x="76.7869%" y="421" width="2.2199%" height="15" fill="rgb(221,65,9)" fg:x="5984" fg:w="173"/><text x="77.0369%" y="431.50">c..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (118 samples, 1.51%)</title><rect x="77.4926%" y="405" width="1.5142%" height="15" fill="rgb(235,49,36)" fg:x="6039" fg:w="118"/><text x="77.7426%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (67 samples, 0.86%)</title><rect x="79.0068%" y="469" width="0.8597%" height="15" fill="rgb(225,32,20)" fg:x="6157" fg:w="67"/><text x="79.2568%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (67 samples, 0.86%)</title><rect x="79.0068%" y="453" width="0.8597%" height="15" fill="rgb(215,141,46)" fg:x="6157" fg:w="67"/><text x="79.2568%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.86%)</title><rect x="79.0068%" y="437" width="0.8597%" height="15" fill="rgb(250,160,47)" fg:x="6157" fg:w="67"/><text x="79.2568%" y="447.50"></text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (5,055 samples, 64.87%)</title><rect x="15.0135%" y="629" width="64.8659%" height="15" fill="rgb(216,222,40)" fg:x="1170" fg:w="5055"/><text x="15.2635%" y="639.50">&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call</text></g><g><title>resonix_graph::audio_context::AudioContext::initialize_dac_from_config::{{closure}} (5,055 samples, 64.87%)</title><rect x="15.0135%" y="613" width="64.8659%" height="15" fill="rgb(234,217,39)" fg:x="1170" fg:w="5055"/><text x="15.2635%" y="623.50">resonix_graph::audio_context::AudioContext::initialize_dac_from_config::{{closure}}</text></g><g><title>resonix_graph::processor::Processor::run (5,054 samples, 64.85%)</title><rect x="15.0263%" y="597" width="64.8531%" height="15" fill="rgb(207,178,40)" fg:x="1171" fg:w="5054"/><text x="15.2763%" y="607.50">resonix_graph::processor::Processor::run</text></g><g><title>resonix_graph::processor::Processor::outgoing_connection_indexes (863 samples, 11.07%)</title><rect x="68.8053%" y="581" width="11.0740%" height="15" fill="rgb(221,136,13)" fg:x="5362" fg:w="863"/><text x="69.0553%" y="591.50">resonix_graph::p..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (700 samples, 8.98%)</title><rect x="70.8970%" y="565" width="8.9824%" height="15" fill="rgb(249,199,10)" fg:x="5525" fg:w="700"/><text x="71.1470%" y="575.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (700 samples, 8.98%)</title><rect x="70.8970%" y="549" width="8.9824%" height="15" fill="rgb(249,222,13)" fg:x="5525" fg:w="700"/><text x="71.1470%" y="559.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (700 samples, 8.98%)</title><rect x="70.8970%" y="533" width="8.9824%" height="15" fill="rgb(244,185,38)" fg:x="5525" fg:w="700"/><text x="71.1470%" y="543.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (550 samples, 7.06%)</title><rect x="72.8218%" y="517" width="7.0576%" height="15" fill="rgb(236,202,9)" fg:x="5675" fg:w="550"/><text x="73.0718%" y="527.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (550 samples, 7.06%)</title><rect x="72.8218%" y="501" width="7.0576%" height="15" fill="rgb(250,229,37)" fg:x="5675" fg:w="550"/><text x="73.0718%" y="511.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (550 samples, 7.06%)</title><rect x="72.8218%" y="485" width="7.0576%" height="15" fill="rgb(206,174,23)" fg:x="5675" fg:w="550"/><text x="73.0718%" y="495.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="79.8665%" y="469" width="0.0128%" height="15" fill="rgb(211,33,43)" fg:x="6224" fg:w="1"/><text x="80.1165%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="79.8665%" y="453" width="0.0128%" height="15" fill="rgb(245,58,50)" fg:x="6224" fg:w="1"/><text x="80.1165%" y="463.50"></text></g><g><title>[libc.so.6] (5,061 samples, 64.94%)</title><rect x="14.9493%" y="885" width="64.9429%" height="15" fill="rgb(244,68,36)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="895.50">[libc.so.6]</text></g><g><title>[libc.so.6] (5,061 samples, 64.94%)</title><rect x="14.9493%" y="869" width="64.9429%" height="15" fill="rgb(232,229,15)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="879.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5,061 samples, 64.94%)</title><rect x="14.9493%" y="853" width="64.9429%" height="15" fill="rgb(254,30,23)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="863.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,061 samples, 64.94%)</title><rect x="14.9493%" y="837" width="64.9429%" height="15" fill="rgb(235,160,14)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="847.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5,061 samples, 64.94%)</title><rect x="14.9493%" y="821" width="64.9429%" height="15" fill="rgb(212,155,44)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="831.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5,061 samples, 64.94%)</title><rect x="14.9493%" y="805" width="64.9429%" height="15" fill="rgb(226,2,50)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="815.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (5,061 samples, 64.94%)</title><rect x="14.9493%" y="789" width="64.9429%" height="15" fill="rgb(234,177,6)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="799.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,061 samples, 64.94%)</title><rect x="14.9493%" y="773" width="64.9429%" height="15" fill="rgb(217,24,9)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,061 samples, 64.94%)</title><rect x="14.9493%" y="757" width="64.9429%" height="15" fill="rgb(220,13,46)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,061 samples, 64.94%)</title><rect x="14.9493%" y="741" width="64.9429%" height="15" fill="rgb(239,221,27)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="751.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,061 samples, 64.94%)</title><rect x="14.9493%" y="725" width="64.9429%" height="15" fill="rgb(222,198,25)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="735.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (5,061 samples, 64.94%)</title><rect x="14.9493%" y="709" width="64.9429%" height="15" fill="rgb(211,99,13)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="719.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,061 samples, 64.94%)</title><rect x="14.9493%" y="693" width="64.9429%" height="15" fill="rgb(232,111,31)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="703.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>cpal::host::alsa::Stream::new_output::{{closure}} (5,061 samples, 64.94%)</title><rect x="14.9493%" y="677" width="64.9429%" height="15" fill="rgb(245,82,37)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="687.50">cpal::host::alsa::Stream::new_output::{{closure}}</text></g><g><title>cpal::host::alsa::output_stream_worker (5,061 samples, 64.94%)</title><rect x="14.9493%" y="661" width="64.9429%" height="15" fill="rgb(227,149,46)" fg:x="1165" fg:w="5061"/><text x="15.1993%" y="671.50">cpal::host::alsa::output_stream_worker</text></g><g><title>cpal::host::alsa::process_output (5,056 samples, 64.88%)</title><rect x="15.0135%" y="645" width="64.8787%" height="15" fill="rgb(218,36,50)" fg:x="1170" fg:w="5056"/><text x="15.2635%" y="655.50">cpal::host::alsa::process_output</text></g><g><title>alsa::pcm::IO&lt;S&gt;::writei (1 samples, 0.01%)</title><rect x="79.8794%" y="629" width="0.0128%" height="15" fill="rgb(226,80,48)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="639.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="79.8794%" y="613" width="0.0128%" height="15" fill="rgb(238,224,15)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="623.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="79.8794%" y="597" width="0.0128%" height="15" fill="rgb(241,136,10)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="607.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.01%)</title><rect x="79.8794%" y="581" width="0.0128%" height="15" fill="rgb(208,32,45)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="591.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.01%)</title><rect x="79.8794%" y="565" width="0.0128%" height="15" fill="rgb(207,135,9)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="575.50"></text></g><g><title>pa_stream_write (1 samples, 0.01%)</title><rect x="79.8794%" y="549" width="0.0128%" height="15" fill="rgb(206,86,44)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="559.50"></text></g><g><title>pa_stream_write_ext_free (1 samples, 0.01%)</title><rect x="79.8794%" y="533" width="0.0128%" height="15" fill="rgb(245,177,15)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="543.50"></text></g><g><title>pa_memblock_new (1 samples, 0.01%)</title><rect x="79.8794%" y="517" width="0.0128%" height="15" fill="rgb(206,64,50)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="527.50"></text></g><g><title>pa_memblock_new_pool (1 samples, 0.01%)</title><rect x="79.8794%" y="501" width="0.0128%" height="15" fill="rgb(234,36,40)" fg:x="6225" fg:w="1"/><text x="80.1294%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;dyn resonix_graph::traits::node::Node&gt; as resonix_graph::traits::node::Node&gt;::process (258 samples, 3.31%)</title><rect x="79.9050%" y="821" width="3.3107%" height="15" fill="rgb(213,64,8)" fg:x="6227" fg:w="258"/><text x="80.1550%" y="831.50">&lt;al..</text></g><g><title>&lt;Callback as resonix_dac::write_frame_to_buffer::WriteFrameToBuffer&lt;S,(E1,)&gt;&gt;::call (481 samples, 6.17%)</title><rect x="79.9050%" y="869" width="6.1722%" height="15" fill="rgb(210,75,36)" fg:x="6227" fg:w="481"/><text x="80.1550%" y="879.50">&lt;Callbac..</text></g><g><title>resonix_graph::audio_context::AudioContext::initialize_dac_from_config::{{closure}} (481 samples, 6.17%)</title><rect x="79.9050%" y="853" width="6.1722%" height="15" fill="rgb(229,88,21)" fg:x="6227" fg:w="481"/><text x="80.1550%" y="863.50">resonix_..</text></g><g><title>resonix_graph::processor::Processor::run (481 samples, 6.17%)</title><rect x="79.9050%" y="837" width="6.1722%" height="15" fill="rgb(252,204,47)" fg:x="6227" fg:w="481"/><text x="80.1550%" y="847.50">resonix_..</text></g><g><title>&lt;alloc::boxed::Box&lt;dyn resonix_graph::traits::node::Node&gt; as resonix_graph::traits::node::Node&gt;::uid (223 samples, 2.86%)</title><rect x="83.2157%" y="821" width="2.8615%" height="15" fill="rgb(208,77,27)" fg:x="6485" fg:w="223"/><text x="83.4657%" y="831.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="86.0772%" y="869" width="0.0128%" height="15" fill="rgb(221,76,26)" fg:x="6708" fg:w="1"/><text x="86.3272%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (350 samples, 4.49%)</title><rect x="86.0901%" y="869" width="4.4912%" height="15" fill="rgb(225,139,18)" fg:x="6709" fg:w="350"/><text x="86.3401%" y="879.50">&lt;core..</text></g><g><title>&lt;resonix_graph::nodes::dac_node::DACNode as resonix_graph::traits::node::Node&gt;::process (1 samples, 0.01%)</title><rect x="90.5813%" y="869" width="0.0128%" height="15" fill="rgb(230,137,11)" fg:x="7059" fg:w="1"/><text x="90.8313%" y="879.50"></text></g><g><title>&lt;resonix_graph::nodes::dac_node::DACNode as resonix_graph::traits::node::Node&gt;::uid (1 samples, 0.01%)</title><rect x="90.5941%" y="869" width="0.0128%" height="15" fill="rgb(212,28,1)" fg:x="7060" fg:w="1"/><text x="90.8441%" y="879.50"></text></g><g><title>&lt;resonix_graph::nodes::multiply_node::MultiplyNode as resonix_graph::traits::node::Node&gt;::uid (93 samples, 1.19%)</title><rect x="90.6070%" y="869" width="1.1934%" height="15" fill="rgb(248,164,17)" fg:x="7061" fg:w="93"/><text x="90.8570%" y="879.50"></text></g><g><title>&lt;resonix_graph::nodes::pass_through_node::PassThroughNode as resonix_graph::traits::node::Node&gt;::process (209 samples, 2.68%)</title><rect x="91.8003%" y="869" width="2.6819%" height="15" fill="rgb(222,171,42)" fg:x="7154" fg:w="209"/><text x="92.0503%" y="879.50">&lt;r..</text></g><g><title>[unknown] (1,311 samples, 16.82%)</title><rect x="79.8922%" y="885" width="16.8228%" height="15" fill="rgb(243,84,45)" fg:x="6226" fg:w="1311"/><text x="80.1422%" y="895.50">[unknown]</text></g><g><title>resonix_graph::connection::Connection::set_data (174 samples, 2.23%)</title><rect x="94.4822%" y="869" width="2.2328%" height="15" fill="rgb(252,49,23)" fg:x="7363" fg:w="174"/><text x="94.7322%" y="879.50">r..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 1.92%)</title><rect x="96.7150%" y="869" width="1.9248%" height="15" fill="rgb(215,19,7)" fg:x="7537" fg:w="150"/><text x="96.9650%" y="879.50">&lt;..</text></g><g><title>cpal_alsa_out (7,659 samples, 98.28%)</title><rect x="1.5655%" y="901" width="98.2805%" height="15" fill="rgb(238,81,41)" fg:x="122" fg:w="7659"/><text x="1.8155%" y="911.50">cpal_alsa_out</text></g><g><title>anon.1bb240313b19172b9a2bc143086d52cf.7.llvm.11930453664136161024 (244 samples, 3.13%)</title><rect x="96.7150%" y="885" width="3.1310%" height="15" fill="rgb(210,199,37)" fg:x="7537" fg:w="244"/><text x="96.9650%" y="895.50">ano..</text></g><g><title>resonix_graph::connection::Connection::data (94 samples, 1.21%)</title><rect x="98.6398%" y="869" width="1.2062%" height="15" fill="rgb(244,192,49)" fg:x="7687" fg:w="94"/><text x="98.8898%" y="879.50"></text></g><g><title>[anon] (1 samples, 0.01%)</title><rect x="99.8460%" y="885" width="0.0128%" height="15" fill="rgb(226,211,11)" fg:x="7781" fg:w="1"/><text x="100.0960%" y="895.50"></text></g><g><title>pa_run_once (1 samples, 0.01%)</title><rect x="99.8460%" y="869" width="0.0128%" height="15" fill="rgb(236,162,54)" fg:x="7781" fg:w="1"/><text x="100.0960%" y="879.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.01%)</title><rect x="99.8588%" y="757" width="0.0128%" height="15" fill="rgb(220,229,9)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="767.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.01%)</title><rect x="99.8588%" y="741" width="0.0128%" height="15" fill="rgb(250,87,22)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="751.50"></text></g><g><title>pa_pstream_send_tagstruct_with_creds (1 samples, 0.01%)</title><rect x="99.8588%" y="725" width="0.0128%" height="15" fill="rgb(239,43,17)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="735.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.01%)</title><rect x="99.8588%" y="709" width="0.0128%" height="15" fill="rgb(231,177,25)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="719.50"></text></g><g><title>pa_pstream_send_packet (1 samples, 0.01%)</title><rect x="99.8588%" y="693" width="0.0128%" height="15" fill="rgb(219,179,1)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="703.50"></text></g><g><title>pa_run_once (1 samples, 0.01%)</title><rect x="99.8588%" y="677" width="0.0128%" height="15" fill="rgb(238,219,53)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="687.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.01%)</title><rect x="99.8588%" y="661" width="0.0128%" height="15" fill="rgb(232,167,36)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="671.50"></text></g><g><title>pa_flist_new_with_name (1 samples, 0.01%)</title><rect x="99.8588%" y="645" width="0.0128%" height="15" fill="rgb(244,19,51)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="655.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.01%)</title><rect x="99.8588%" y="629" width="0.0128%" height="15" fill="rgb(224,6,22)" fg:x="7782" fg:w="1"/><text x="100.1088%" y="639.50"></text></g><g><title>pa_mainloop_dispatch (2 samples, 0.03%)</title><rect x="99.8588%" y="789" width="0.0257%" height="15" fill="rgb(224,145,5)" fg:x="7782" fg:w="2"/><text x="100.1088%" y="799.50"></text></g><g><title>[libpulsecommon-15.99.so] (2 samples, 0.03%)</title><rect x="99.8588%" y="773" width="0.0257%" height="15" fill="rgb(234,130,49)" fg:x="7782" fg:w="2"/><text x="100.1088%" y="783.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.01%)</title><rect x="99.8717%" y="757" width="0.0128%" height="15" fill="rgb(254,6,2)" fg:x="7783" fg:w="1"/><text x="100.1217%" y="767.50"></text></g><g><title>pa_iochannel_read_with_ancil_data (1 samples, 0.01%)</title><rect x="99.8717%" y="741" width="0.0128%" height="15" fill="rgb(208,96,46)" fg:x="7783" fg:w="1"/><text x="100.1217%" y="751.50"></text></g><g><title>[libpulsecommon-15.99.so] (1 samples, 0.01%)</title><rect x="99.8717%" y="725" width="0.0128%" height="15" fill="rgb(239,3,39)" fg:x="7783" fg:w="1"/><text x="100.1217%" y="735.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.01%)</title><rect x="99.8717%" y="709" width="0.0128%" height="15" fill="rgb(233,210,1)" fg:x="7783" fg:w="1"/><text x="100.1217%" y="719.50"></text></g><g><title>[libpulse.so.0.24.1] (3 samples, 0.04%)</title><rect x="99.8588%" y="837" width="0.0385%" height="15" fill="rgb(244,137,37)" fg:x="7782" fg:w="3"/><text x="100.1088%" y="847.50"></text></g><g><title>pa_mainloop_run (3 samples, 0.04%)</title><rect x="99.8588%" y="821" width="0.0385%" height="15" fill="rgb(240,136,2)" fg:x="7782" fg:w="3"/><text x="100.1088%" y="831.50"></text></g><g><title>pa_mainloop_iterate (3 samples, 0.04%)</title><rect x="99.8588%" y="805" width="0.0385%" height="15" fill="rgb(239,18,37)" fg:x="7782" fg:w="3"/><text x="100.1088%" y="815.50"></text></g><g><title>pa_mainloop_poll (1 samples, 0.01%)</title><rect x="99.8845%" y="789" width="0.0128%" height="15" fill="rgb(218,185,22)" fg:x="7784" fg:w="1"/><text x="100.1345%" y="799.50"></text></g><g><title>[libpulse.so.0.24.1] (1 samples, 0.01%)</title><rect x="99.8845%" y="773" width="0.0128%" height="15" fill="rgb(225,218,4)" fg:x="7784" fg:w="1"/><text x="100.1345%" y="783.50"></text></g><g><title>__poll_chk (1 samples, 0.01%)</title><rect x="99.8845%" y="757" width="0.0128%" height="15" fill="rgb(230,182,32)" fg:x="7784" fg:w="1"/><text x="100.1345%" y="767.50"></text></g><g><title>threaded-ml (5 samples, 0.06%)</title><rect x="99.8460%" y="901" width="0.0642%" height="15" fill="rgb(242,56,43)" fg:x="7781" fg:w="5"/><text x="100.0960%" y="911.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="99.8588%" y="885" width="0.0513%" height="15" fill="rgb(233,99,24)" fg:x="7782" fg:w="4"/><text x="100.1088%" y="895.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="99.8588%" y="869" width="0.0513%" height="15" fill="rgb(234,209,42)" fg:x="7782" fg:w="4"/><text x="100.1088%" y="879.50"></text></g><g><title>[libpulsecommon-15.99.so] (4 samples, 0.05%)</title><rect x="99.8588%" y="853" width="0.0513%" height="15" fill="rgb(227,7,12)" fg:x="7782" fg:w="4"/><text x="100.1088%" y="863.50"></text></g><g><title>pa_run_once (1 samples, 0.01%)</title><rect x="99.8973%" y="837" width="0.0128%" height="15" fill="rgb(245,203,43)" fg:x="7785" fg:w="1"/><text x="100.1473%" y="847.50"></text></g><g><title>pa_once_begin (1 samples, 0.01%)</title><rect x="99.8973%" y="821" width="0.0128%" height="15" fill="rgb(238,205,33)" fg:x="7785" fg:w="1"/><text x="100.1473%" y="831.50"></text></g><g><title>[anon] (1 samples, 0.01%)</title><rect x="99.9102%" y="885" width="0.0128%" height="15" fill="rgb(231,56,7)" fg:x="7786" fg:w="1"/><text x="100.1602%" y="895.50"></text></g><g><title>realloc (1 samples, 0.01%)</title><rect x="99.9102%" y="869" width="0.0128%" height="15" fill="rgb(244,186,29)" fg:x="7786" fg:w="1"/><text x="100.1602%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.01%)</title><rect x="99.9230%" y="661" width="0.0128%" height="15" fill="rgb(234,111,31)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="671.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (1 samples, 0.01%)</title><rect x="99.9230%" y="645" width="0.0128%" height="15" fill="rgb(241,149,10)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="655.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (1 samples, 0.01%)</title><rect x="99.9230%" y="629" width="0.0128%" height="15" fill="rgb(249,206,44)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="639.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (1 samples, 0.01%)</title><rect x="99.9230%" y="613" width="0.0128%" height="15" fill="rgb(251,153,30)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="623.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.01%)</title><rect x="99.9230%" y="597" width="0.0128%" height="15" fill="rgb(239,152,38)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="607.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1 samples, 0.01%)</title><rect x="99.9230%" y="581" width="0.0128%" height="15" fill="rgb(249,139,47)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="591.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (1 samples, 0.01%)</title><rect x="99.9230%" y="565" width="0.0128%" height="15" fill="rgb(244,64,35)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="575.50"></text></g><g><title>__sched_yield (1 samples, 0.01%)</title><rect x="99.9230%" y="549" width="0.0128%" height="15" fill="rgb(216,46,15)" fg:x="7787" fg:w="1"/><text x="100.1730%" y="559.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.03%)</title><rect x="99.9230%" y="773" width="0.0257%" height="15" fill="rgb(250,74,19)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="783.50"></text></g><g><title>std::panicking::try (2 samples, 0.03%)</title><rect x="99.9230%" y="757" width="0.0257%" height="15" fill="rgb(249,42,33)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="767.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.03%)</title><rect x="99.9230%" y="741" width="0.0257%" height="15" fill="rgb(242,149,17)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.03%)</title><rect x="99.9230%" y="725" width="0.0257%" height="15" fill="rgb(244,29,21)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="735.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.03%)</title><rect x="99.9230%" y="709" width="0.0257%" height="15" fill="rgb(220,130,37)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.03%)</title><rect x="99.9230%" y="693" width="0.0257%" height="15" fill="rgb(211,67,2)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (2 samples, 0.03%)</title><rect x="99.9230%" y="677" width="0.0257%" height="15" fill="rgb(235,68,52)" fg:x="7787" fg:w="2"/><text x="100.1730%" y="687.50"></text></g><g><title>tokio::runtime::handle::Handle::enter (1 samples, 0.01%)</title><rect x="99.9358%" y="661" width="0.0128%" height="15" fill="rgb(246,142,3)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="671.50"></text></g><g><title>tokio::runtime::context::try_set_current (1 samples, 0.01%)</title><rect x="99.9358%" y="645" width="0.0128%" height="15" fill="rgb(241,25,7)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="99.9358%" y="629" width="0.0128%" height="15" fill="rgb(242,119,39)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="639.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (1 samples, 0.01%)</title><rect x="99.9358%" y="613" width="0.0128%" height="15" fill="rgb(241,98,45)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="623.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="99.9358%" y="597" width="0.0128%" height="15" fill="rgb(254,28,30)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="607.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.01%)</title><rect x="99.9358%" y="581" width="0.0128%" height="15" fill="rgb(241,142,54)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="591.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit::{{closure}} (1 samples, 0.01%)</title><rect x="99.9358%" y="565" width="0.0128%" height="15" fill="rgb(222,85,15)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="575.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__init (1 samples, 0.01%)</title><rect x="99.9358%" y="549" width="0.0128%" height="15" fill="rgb(210,85,47)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="559.50"></text></g><g><title>tokio::util::rand::RngSeed::new (1 samples, 0.01%)</title><rect x="99.9358%" y="533" width="0.0128%" height="15" fill="rgb(224,206,25)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="543.50"></text></g><g><title>tokio::loom::std::rand::seed (1 samples, 0.01%)</title><rect x="99.9358%" y="517" width="0.0128%" height="15" fill="rgb(243,201,19)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="527.50"></text></g><g><title>std::collections::hash::map::RandomState::new (1 samples, 0.01%)</title><rect x="99.9358%" y="501" width="0.0128%" height="15" fill="rgb(236,59,4)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="99.9358%" y="485" width="0.0128%" height="15" fill="rgb(254,179,45)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="99.9358%" y="469" width="0.0128%" height="15" fill="rgb(226,14,10)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="479.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.01%)</title><rect x="99.9358%" y="453" width="0.0128%" height="15" fill="rgb(244,27,41)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="463.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.01%)</title><rect x="99.9358%" y="437" width="0.0128%" height="15" fill="rgb(235,35,32)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="447.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.01%)</title><rect x="99.9358%" y="421" width="0.0128%" height="15" fill="rgb(218,68,31)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="431.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.01%)</title><rect x="99.9358%" y="405" width="0.0128%" height="15" fill="rgb(207,120,37)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="415.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit::{{closure}} (1 samples, 0.01%)</title><rect x="99.9358%" y="389" width="0.0128%" height="15" fill="rgb(227,98,0)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="399.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__init (1 samples, 0.01%)</title><rect x="99.9358%" y="373" width="0.0128%" height="15" fill="rgb(207,7,3)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="383.50"></text></g><g><title>std::sys::unix::rand::hashmap_random_keys (1 samples, 0.01%)</title><rect x="99.9358%" y="357" width="0.0128%" height="15" fill="rgb(206,98,19)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="367.50"></text></g><g><title>std::sys::unix::rand::imp::fill_bytes (1 samples, 0.01%)</title><rect x="99.9358%" y="341" width="0.0128%" height="15" fill="rgb(217,5,26)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="351.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom_fill_bytes (1 samples, 0.01%)</title><rect x="99.9358%" y="325" width="0.0128%" height="15" fill="rgb(235,190,38)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="335.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom (1 samples, 0.01%)</title><rect x="99.9358%" y="309" width="0.0128%" height="15" fill="rgb(247,86,24)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="319.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom::getrandom (1 samples, 0.01%)</title><rect x="99.9358%" y="293" width="0.0128%" height="15" fill="rgb(205,101,16)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="303.50"></text></g><g><title>getrandom (1 samples, 0.01%)</title><rect x="99.9358%" y="277" width="0.0128%" height="15" fill="rgb(246,168,33)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="99.9358%" y="261" width="0.0128%" height="15" fill="rgb(231,114,1)" fg:x="7788" fg:w="1"/><text x="100.1858%" y="271.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (1 samples, 0.01%)</title><rect x="99.9487%" y="773" width="0.0128%" height="15" fill="rgb(207,184,53)" fg:x="7789" fg:w="1"/><text x="100.1987%" y="783.50"></text></g><g><title>pthread_setname_np (1 samples, 0.01%)</title><rect x="99.9487%" y="757" width="0.0128%" height="15" fill="rgb(224,95,51)" fg:x="7789" fg:w="1"/><text x="100.1987%" y="767.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="99.9230%" y="885" width="0.0513%" height="15" fill="rgb(212,188,45)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="895.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="99.9230%" y="869" width="0.0513%" height="15" fill="rgb(223,154,38)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (4 samples, 0.05%)</title><rect x="99.9230%" y="853" width="0.0513%" height="15" fill="rgb(251,22,52)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 0.05%)</title><rect x="99.9230%" y="837" width="0.0513%" height="15" fill="rgb(229,209,22)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (4 samples, 0.05%)</title><rect x="99.9230%" y="821" width="0.0513%" height="15" fill="rgb(234,138,34)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.05%)</title><rect x="99.9230%" y="805" width="0.0513%" height="15" fill="rgb(212,95,11)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="815.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (4 samples, 0.05%)</title><rect x="99.9230%" y="789" width="0.0513%" height="15" fill="rgb(240,179,47)" fg:x="7787" fg:w="4"/><text x="100.1730%" y="799.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.01%)</title><rect x="99.9615%" y="773" width="0.0128%" height="15" fill="rgb(240,163,11)" fg:x="7790" fg:w="1"/><text x="100.2115%" y="783.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="99.9615%" y="757" width="0.0128%" height="15" fill="rgb(236,37,12)" fg:x="7790" fg:w="1"/><text x="100.2115%" y="767.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="99.9615%" y="741" width="0.0128%" height="15" fill="rgb(232,164,16)" fg:x="7790" fg:w="1"/><text x="100.2115%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="99.9615%" y="725" width="0.0128%" height="15" fill="rgb(244,205,15)" fg:x="7790" fg:w="1"/><text x="100.2115%" y="735.50"></text></g><g><title>all (7,793 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="7793"/><text x="0.2500%" y="927.50"></text></g><g><title>tokio-runtime-w (7 samples, 0.09%)</title><rect x="99.9102%" y="901" width="0.0898%" height="15" fill="rgb(244,107,35)" fg:x="7786" fg:w="7"/><text x="100.1602%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.03%)</title><rect x="99.9743%" y="885" width="0.0257%" height="15" fill="rgb(205,140,8)" fg:x="7791" fg:w="2"/><text x="100.2243%" y="895.50"></text></g></svg></svg>